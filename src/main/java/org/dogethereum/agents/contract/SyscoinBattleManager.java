package org.dogethereum.agents.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple11;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.6.0.
 */
public class SyscoinBattleManager extends Contract {
    private static final String BINARY = "0x6080604052600060015534801561001557600080fd5b506040516080806125ce83398101604090815281516020830151918301516060909301516004805492949285919060ff1916600183600281111561005557fe5b021790555060058054600160a060020a031916600160a060020a0394909416939093179092556002556003555061253d806100916000396000f30060806040526004361061012e5763ffffffff60e060020a6000350416626622a4811461013357806306ef472114610153578063089845e11461017a5780630f2c63ff146101d857806318b011de146101f35780632c1ae45014610208578063312f6307146102685780633678c1431461027d57806341827da71461029e578063455e6166146102b35780634955d085146102c85780635704a5fa146102dd57806361bd8d66146103455780636ca640a11461035a57806371a8c18a1461036f578063795ea18e1461039b5780637dbd2832146103b357806390b6f6991461044e57806399b32f3a14610463578063a6c07c961461047b578063ba16d60014610493578063d035c403146104a8578063d1daeede146104bd578063eda1970b146104e7578063f1afcfa6146104fc575b600080fd5b34801561013f57600080fd5b50610151600435602435604435610511565b005b34801561015f57600080fd5b50610168610600565b60408051918252519081900360200190f35b34801561018657600080fd5b5060408051602060046044358181013583810280860185019096528085526101519583359560248035963696956064959394920192918291850190849080828437509497506106079650505050505050565b3480156101e457600080fd5b50610151600435602435610746565b3480156101ff57600080fd5b5061016861082c565b34801561021457600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526101519482359460248035953695946064949201919081908401838280828437509497506108329650505050505050565b34801561027457600080fd5b50610168610a03565b34801561028957600080fd5b50610151600160a060020a0360043516610a09565b3480156102aa57600080fd5b50610168610a6f565b3480156102bf57600080fd5b50610168610a76565b3480156102d457600080fd5b50610168610a7d565b3480156102e957600080fd5b506102f5600435610a83565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610331578181015183820152602001610319565b505050509050019250505060405180910390f35b34801561035157600080fd5b50610168610ae7565b34801561036657600080fd5b50610168610aee565b34801561037b57600080fd5b50610387600435610af5565b604080519115158252519081900360200190f35b3480156103a757600080fd5b50610168600435610b2a565b3480156103bf57600080fd5b506103cb600435610c19565b604080518c8152602081018c9052600160a060020a03808c169282019290925290891660608201526080810188905260a0810187905260c0810186905260e0810185905261010081018490526101208101839052610140810182600881111561043057fe5b60ff1681526020019b50505050505050505050505060405180910390f35b34801561045a57600080fd5b50610168610c81565b34801561046f57600080fd5b50610387600435610c88565b34801561048757600080fd5b50610151600435610cba565b34801561049f57600080fd5b50610168610d33565b3480156104b457600080fd5b50610168610d3a565b3480156104c957600080fd5b50610168600435600160a060020a0360243581169060443516610d41565b3480156104f357600080fd5b50610168610f26565b34801561050857600080fd5b50610168610f2c565b60008281526020819052604081206003015481908490600160a060020a0316331461053b57600080fd5b600085815260208190526040902092506105558385610f32565b9150811561058b57604080518681526020810184905281516000805160206124f2833981519152929181900390910190a16105f8565b60078301805460010190819055426004850155600684015560028301546040805188815260208101889052600160a060020a039092168282015260608201869052517fc32d73f54fbafb3a4f05d1f05fa0d120659da2f8494eee5a94442fcda572f4159181900360800190a15b505050505050565b620157c081565b60008281526020819052604081206002015481908490600160a060020a0316331461063157600080fd5b6000858152602081905260409020925061064b8385611082565b9150811561068157604080518681526020810184905281516000805160206124f2833981519152929181900390910190a16105f8565b6007830180546001019081905542600485015560058401556003830154604080518881526020808201899052600160a060020a0390931691810182905260806060820181815288519183019190915287517fbca3431b78418303a430f83db37413835aa6c34f2bc94b5cb93f3c1a56384e69948b948b9490938b939192909160a0840191808601910280838360005b83811015610728578181015183820152602001610710565b505050509050019550505050505060405180910390a1505050505050565b60008181526020819052604081206003015481908390600160a060020a0316331461077057600080fd5b6000848152602081905260409020925061078983611253565b915081156107bf57604080518581526020810184905281516000805160206124f2833981519152929181900390910190a1610825565b60078301805460010190819055426004850155600684015560028301546040805187815260208101879052600160a060020a0390921682820152517f0817bf136ff95abb2d41d10a9fa5ff6652ff71c13e1b46717fae65db16423c9b9181900360600190a15b5050505050565b60035481565b60008281526020819052604081206002015481906060908590600160a060020a0316331461085f57600080fd5b6000868152602081905260409020935061087984866112e2565b909350915082156108b257604080518781526020810185905281516000805160206124f2833981519152929181900390910190a16109fa565b60078401805460010190819055426004860155600585015560038401546040805189815260208082018a9052600160a060020a0390931691810182905260a06060820181815289519183019190915288517f42ec54b7e8967fdf1f7e6aac12670a48dac3545628e73f391efe928695f7f632948c948c9490938c938a93608084019160c085019187019080838360005b8381101561095a578181015183820152602001610942565b50505050905090810190601f1680156109875780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156109ba5781810151838201526020016109a2565b50505050905090810190601f1680156109e75780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a15b50505050505050565b60015481565b6004546101009004600160a060020a0316158015610a2f5750600160a060020a03811615155b1515610a3a57600080fd5b60048054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b62018e7081565b62069f5081565b619c4081565b60008181526020818152604091829020600801805483518184028101840190945280845260609392830182828015610adb57602002820191906000526020600020905b81548152600190910190602001808311610ac6575b50505050509050919050565b6206b6c081565b620cd14081565b600081815260208190526040812060058101546006820154118015610b21575060035481600401540142115b91505b50919050565b60008181526020819052604081206008600c82015460ff166008811115610b4d57fe5b1480610b72575080600501548160060154118015610b72575060035481600401540142115b15610ba15760028101546001820154610b98918591600160a060020a03909116906114ba565b60009150610b24565b80600601548160050154118015610bbf575060035481600401540142115b15610be55760038101546001820154610b98918591600160a060020a0390911690611543565b6040805184815261c36e602082015281516000805160206124f2833981519152929181900390910190a15061c36e92915050565b6000602081905290815260409020805460018201546002830154600384015460048501546005860154600687015460078801546009890154600a8a0154600c909a015498999798600160a060020a039788169897909616969495939492939192909160ff168b565b6205c49081565b600081815260208190526040812060068101546005820154118015610b21575060035460049091015401421192915050565b600081815260208190526040812090610cd382846115cc565b90508060011415610d045760038201546001830154610cff918591600160a060020a0390911690611543565b610d2e565b8060021415610d2e5760028201546001830154610d2e918591600160a060020a03909116906114ba565b505050565b62061a8081565b62035b6081565b600454600090819081906101009004600160a060020a0316338114610d6557600080fd5b6001546040805160208082018b9052338284015260608083019490945282518083039094018452608090910191829052825182918401908083835b60208310610dbf5780518252601f199092019160209182019101610da0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209250600080846000191660001916815260200190815260200160002091508282600001816000191690555086826001018160001916905550858260020160006101000a815481600160a060020a030219169083600160a060020a03160217905550848260030160006101000a815481600160a060020a030219169083600160a060020a03160217905550428260040181905550600082600601819055506001826005018190555060018260070181905550600182600c0160006101000a81548160ff02191690836008811115610ebe57fe5b021790555060018054810190556040805188815260208101859052600160a060020a03808916828401528716606082015290517f403956bdc140717d54d4573786b4e9e773ef2e6e325e2c061476eb47711770de9181900360800190a1509095945050505050565b6184d081565b60025481565b600080610f4133619c406116a7565b1515610f515761c38c915061107b565b6009840154158015610f7557506003600c85015460ff166008811115610f7357fe5b145b80610fa1575060008460090154118015610fa157506005600c85015460ff166008811115610f9f57fe5b145b15611075576008840154600985015410610fba57600080fd5b600080848152600b860160205260409020600101546c01000000000000000000000000900460ff166002811115610fed57fe5b14610ff757600080fd5b611008846001015433619c4061174d565b50905080156110195780915061107b565b60098401805460019081019091556000848152600b86016020526040812090910180546c010000000000000000000000006cff00000000000000000000000019909116179055600c8501805460ff19166004179055915061107b565b61c36491505b5092915050565b6000806000806110953362035b606116a7565b15156110a55761c38c935061124a565b6008860154156110b457600080fd5b6002600c87015460ff1660088111156110c957fe5b1415611244576110dc8660010154611806565b5050505050955050505092508460018651038151811015156110fa57fe5b6020908102909101015182146111145761c3e6935061124a565b6040517ff9b5d7c000000000000000000000000000000000000000000000000000000000815260206004820181815287516024840152875173__SyscoinMessageLibrary_________________9363f9b5d7c0938a9392839260440191808601910280838360005b8381101561119457818101518382015260200161117c565b505050509050019250505060206040518083038186803b1580156111b757600080fd5b505af41580156111cb573d6000803e3d6000fd5b505050506040513d60208110156111e157600080fd5b505183146111f35761c378935061124a565b61120586600101543362035b6061174d565b50905080156112165780935061124a565b845161122b90600888019060208801906123f8565b50600c8601805460ff191660031790556000935061124a565b61c36493505b50505092915050565b600080611263336205c4906116a7565b15156112735761c38c9150610b24565b6001600c84015460ff16600881111561128857fe5b14156112d857600c8301805460ff19166002179055600383015433600160a060020a03909116146112b557fe5b6112c78360010154336205c49061174d565b5090508015610b9857809150610b24565b5061c36492915050565b60006060600080600060606112f933619c406116a7565b151561131f576040805160008082526020820190925261c38c915b5090965094506114af565b6004600c89015460ff16600881111561133457fe5b1415611498576113478760006050611936565b6000818152600b8a016020526040902090945092506001808401546c01000000000000000000000000900460ff16600281111561138057fe5b1461139e576040805160008082526020820190925261c36991611314565b6113ac8860010154886119f7565b15156113cb576040805160008082526020820190925261c37391611314565b6113d6838589611a5c565b909250905081156113f857604080516000808252602082019092528391611314565b600183810180546cff00000000000000000000000019166c020000000000000000000000001790558801546114309033619c4061174d565b509150811561145057604080516000808252602082019092528391611314565b600a88018054600101908190556008890154141561147c57600c8801805460ff1916600617905561148c565b600c8801805460ff191660051790555b600081955095506114af565b60408051600081526020810190915261c364965094505b505050509250929050565b6000838152602081905260409020600381015460028201546114ec9186918591600160a060020a039081169116611c45565b6114f584611ce3565b6040805183815260208101869052600160a060020a0385168183015290517faab6a8f22c7ab5131c1cdc1c0000e123efd38efadfef092cef78be507d16542e9181900360600190a150505050565b6000838152602081905260409020600281015460038201546115759186918591600160a060020a039081169116611c45565b61157e84611ce3565b6040805183815260208101869052600160a060020a0385168183015290517fda9b5fdafb0f67d811425d3f095917a63329d60d3db3aa456b5247a8f3b88b119181900360600190a150505050565b6000806006600c85015460ff1660088111156115e457fe5b1415611679576115f384611d6f565b9050801561162d57604080518481526020810183905281516000805160206124f2833981519152929181900390910190a16002915061107b565b61163684611e5f565b9050801561167057604080518481526020810183905281516000805160206124f2833981519152929181900390910190a16002915061107b565b6001915061107b565b6008600c85015460ff16600881111561168e57fe5b141561169d576002915061107b565b5060009392505050565b60048054604080517fe1254fba000000000000000000000000000000000000000000000000000000008152600160a060020a0386811694820194909452905160009385936101009004169163e1254fba91602480830192602092919082900301818887803b15801561171857600080fd5b505af115801561172c573d6000803e3d6000fd5b505050506040513d602081101561174257600080fd5b505110159392505050565b60048054604080517fc2569e5a000000000000000000000000000000000000000000000000000000008152928301869052600160a060020a038581166024850152604484018590528151600094859461010090049092169263c2569e5a926064808201939182900301818787803b1580156117c757600080fd5b505af11580156117db573d6000803e3d6000fd5b505050506040513d60408110156117f157600080fd5b50805160209091015190969095509350505050565b600554604080517f6e5b7071000000000000000000000000000000000000000000000000000000008152600481018490529051600092839283928392839283928392839283928392600160a060020a031691636e5b70719160248083019261014092919082900301818787803b15801561187f57600080fd5b505af1158015611893573d6000803e3d6000fd5b505050506040513d6101408110156118aa57600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505099509950995099509950995099509950995099509193959799509193959799565b60006119ef6002611948868686611f3f565b6040805160208082019390935281518082038401815290820191829052805190928291908401908083835b602083106119925780518252601f199092019160209182019101611973565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af11580156119d3573d6000803e3d6000fd5b5050506040513d60208110156119e857600080fd5b5051611f66565b949350505050565b6000806000611a07846000611f91565b63ffffffff169150611a1885611806565b50959850505050858711801595509350611a53925050505750600160025482811515611a4057fe5b040360025483811515611a4f57fe5b0410155b95945050505050565b60006060600080606073__SyscoinMessageLibrary_________________6376837a138760008a600190046040518463ffffffff1660e060020a0281526004018080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015611ae2578181015183820152602001611aca565b50505050905090810190601f168015611b0f5780820380516001836020036101000a031916815260200191505b50945050505050604080518083038186803b158015611b2d57600080fd5b505af4158015611b41573d6000803e3d6000fd5b505050506040513d6040811015611b5757600080fd5b50805160209091015190935091508215611b87576040805160008152602081019091529294509192508391611c3a565b81611b9e57611b998660006050611fc5565b611bae565b611bae8660508851038851611fc5565b9050611bbb866000611f91565b60018901805467ffffffffffffffff191663ffffffff92909216919091179055611be686600061201c565b8860010160086101000a81548163ffffffff021916908363ffffffff160217905550611c13866000612050565b8855600388018790558051611c319060028a01906020840190612445565b50600081945094505b505050935093915050565b60048054604080517f748a00e200000000000000000000000000000000000000000000000000000000815292830187905260248301869052600160a060020a03858116604485015284811660648501529051610100909204169163748a00e291608480830192600092919082900301818387803b158015611cc557600080fd5b505af1158015611cd9573d6000803e3d6000fd5b5050505050505050565b60008181526020819052604081208181556001810182905560028101805473ffffffffffffffffffffffffffffffffffffffff1990811690915560038201805490911690556004810182905560058101829055600681018290556007810182905590611d5260088301826124b3565b50600060098201819055600a820155600c01805460ff1916905550565b60008060008060008060008760080180549050111515611d935761c3e69550611e55565b611da08760010154611806565b50505060088e018054959c50939a50909850965090935050600019810191508110611dc757fe5b6000918252602080832090910154808352600b8a0190915260409091206001015490915067ffffffffffffffff168514611e055761c3739550611e55565b6000818152600b8801602052604090206001015463ffffffff848116680100000000000000009092041614611e3e5761c3d29550611e55565b84841115611e505761c3739550611e55565b600095505b5050505050919050565b600080600080600080600080600080611e7b8b60010154611806565b90919293949596979850909192939495965090919293945090919293509091509050809950819b50829850839c5050505050611eb688611806565b9091929394959697985090919293949550909192509091509050809b50819750829c5083985084965050505050508a60080180549050870163ffffffff168663ffffffff16141515611f0c5761c3f09950611f31565b611f1c8b8589858d8a898f612063565b90508015611f2c57809950611f31565b600099505b505050505050505050919050565b60006040516020818486602089010160025afa1515611f5d57600080fd5b51949350505050565b600060405160005b6020811015611f89578381601f031a81830153600101611f6e565b505192915050565b600081604c84010151630100000081601b1a026201000082601a1a02016101008260191a02018160181a0191505092915050565b6060600060608484039150816040519080825280601f01601f191660200182016040528015611ffe578160200160208202803883390190505b5090508160208201838760208a010160045afa1515611a5357600080fd5b600081605084010151630100000081601b1a026201000082601a1a02016101008260191a02018160181a0191505092915050565b818101602401516000906119ef81611f66565b6000808080805b60088d015463ffffffff851610156123b35760088d01805463ffffffff861690811061209257fe5b906000526020600020015492508c600b016000846000191660001916815260200190815260200160002060010160089054906101000a900463ffffffff16915085600019168d600b0160008560001916600019168152602001908152602001600020600001546000191614151561210d5761c38294506123e8565b600260045460ff16600281111561212057fe5b146122de57600160045460ff16600281111561213857fe5b14801561216857506000838152600b8e01602052604090206001015461a8c067ffffffffffffffff9091168d9003115b156121785750631e0fffff6122c4565b73__SyscoinMessageLibrary_________________63f28843856040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156121bf57600080fd5b505af41580156121d3573d6000803e3d6000fd5b505050506040513d60208110156121e957600080fd5b505160070b63ffffffff60018d8701011681151561220357fe5b0760070b156122135750856122c4565b604080517fb199c898000000000000000000000000000000000000000000000000000000008152898e03600790810b900b600482015263ffffffff89166024820152905173__SyscoinMessageLibrary_________________9163b199c898916044808301926020929190829003018186803b15801561229257600080fd5b505af41580156122a6573d6000803e3d6000fd5b505050506040513d60208110156122bc57600080fd5b50518c985090505b63ffffffff828116908216146122de5761c3d294506123e8565b604080517f304ef8ac00000000000000000000000000000000000000000000000000000000815263ffffffff84166004820152905173__SyscoinMessageLibrary_________________9163304ef8ac916024808301926020929190829003018186803b15801561234e57600080fd5b505af4158015612362573d6000803e3d6000fd5b505050506040513d602081101561237857600080fd5b50516000848152600b8f016020526040902060019081015467ffffffffffffffff169d509a019991965091945091909101908390859061206a565b600260045460ff1660028111156123c657fe5b141580156123d45750888a14155b156123e35761c3c894506123e8565b600094505b5050505098975050505050505050565b828054828255906000526020600020908101928215612435579160200282015b828111156124355782518255602090920191600190910190612418565b506124419291506124d4565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061248657805160ff1916838001178555612435565b82800160010185558215612435579182015b82811115612435578251825591602001919060010190612498565b50805460008255906000526020600020908101906124d191906124d4565b50565b6124ee91905b8082111561244157600081556001016124da565b90560080235326defb5d335564dd77860b0a010e19446427d3d78d155cabd064ca9c2aa165627a7a7230582030087e86be9d43c957bc3ce1f09d55d7dd4c614cdb8bdf4d2039bed2396acb8f0029";

    public static final String FUNC_QUERYMERKLEROOTHASHESCOST = "queryMerkleRootHashesCost";

    public static final String FUNC_SUPERBLOCKTIMEOUT = "superblockTimeout";

    public static final String FUNC_SESSIONSCOUNT = "sessionsCount";

    public static final String FUNC_QUERYBLOCKHEADERCOST = "queryBlockHeaderCost";

    public static final String FUNC_MINPROPOSALDEPOSIT = "minProposalDeposit";

    public static final String FUNC_RESPONDBLOCKHEADERCOST = "respondBlockHeaderCost";

    public static final String FUNC_SUPERBLOCKCOST = "superblockCost";

    public static final String FUNC_MINCHALLENGEDEPOSIT = "minChallengeDeposit";

    public static final String FUNC_SESSIONS = "sessions";

    public static final String FUNC_RESPONDMERKLEROOTHASHESCOST = "respondMerkleRootHashesCost";

    public static final String FUNC_MINREWARD = "minReward";

    public static final String FUNC_VERIFYSUPERBLOCKCOST = "verifySuperblockCost";

    public static final String FUNC_CHALLENGECOST = "challengeCost";

    public static final String FUNC_SUPERBLOCKDURATION = "superblockDuration";

    public static final String FUNC_SETSYSCOINCLAIMMANAGER = "setSyscoinClaimManager";

    public static final String FUNC_BEGINBATTLESESSION = "beginBattleSession";

    public static final String FUNC_QUERYMERKLEROOTHASHES = "queryMerkleRootHashes";

    public static final String FUNC_RESPONDMERKLEROOTHASHES = "respondMerkleRootHashes";

    public static final String FUNC_QUERYBLOCKHEADER = "queryBlockHeader";

    public static final String FUNC_RESPONDBLOCKHEADER = "respondBlockHeader";

    public static final String FUNC_VERIFYSUPERBLOCK = "verifySuperblock";

    public static final String FUNC_TIMEOUT = "timeout";

    public static final String FUNC_GETCHALLENGERHITTIMEOUT = "getChallengerHitTimeout";

    public static final String FUNC_GETSUBMITTERHITTIMEOUT = "getSubmitterHitTimeout";

    public static final String FUNC_GETSYSCOINBLOCKHASHES = "getSyscoinBlockHashes";

    public static final Event NEWBATTLE_EVENT = new Event("NewBattle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event CHALLENGERCONVICTED_EVENT = new Event("ChallengerConvicted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUBMITTERCONVICTED_EVENT = new Event("SubmitterConvicted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event QUERYMERKLEROOTHASHES_EVENT = new Event("QueryMerkleRootHashes", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event RESPONDMERKLEROOTHASHES_EVENT = new Event("RespondMerkleRootHashes", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
    ;

    public static final Event QUERYBLOCKHEADER_EVENT = new Event("QueryBlockHeader", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event RESPONDBLOCKHEADER_EVENT = new Event("RespondBlockHeader", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event ERRORBATTLE_EVENT = new Event("ErrorBattle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("4", "0x3b5feaa1cd233d04bc4a38bb09c33cd78852fe90");
    }

    @Deprecated
    protected SyscoinBattleManager(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SyscoinBattleManager(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SyscoinBattleManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SyscoinBattleManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Uint256> queryMerkleRootHashesCost() {
        final Function function = new Function(FUNC_QUERYMERKLEROOTHASHESCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> superblockTimeout() {
        final Function function = new Function(FUNC_SUPERBLOCKTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> sessionsCount() {
        final Function function = new Function(FUNC_SESSIONSCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> queryBlockHeaderCost() {
        final Function function = new Function(FUNC_QUERYBLOCKHEADERCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minProposalDeposit() {
        final Function function = new Function(FUNC_MINPROPOSALDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> respondBlockHeaderCost() {
        final Function function = new Function(FUNC_RESPONDBLOCKHEADERCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> superblockCost() {
        final Function function = new Function(FUNC_SUPERBLOCKCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minChallengeDeposit() {
        final Function function = new Function(FUNC_MINCHALLENGEDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple11<Bytes32, Bytes32, Address, Address, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256, Uint8>> sessions(Bytes32 param0) {
        final Function function = new Function(FUNC_SESSIONS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
        return new RemoteCall<Tuple11<Bytes32, Bytes32, Address, Address, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256, Uint8>>(
                new Callable<Tuple11<Bytes32, Bytes32, Address, Address, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256, Uint8>>() {
                    @Override
                    public Tuple11<Bytes32, Bytes32, Address, Address, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256, Uint8> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple11<Bytes32, Bytes32, Address, Address, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256, Uint8>(
                                (Bytes32) results.get(0), 
                                (Bytes32) results.get(1), 
                                (Address) results.get(2), 
                                (Address) results.get(3), 
                                (Uint256) results.get(4), 
                                (Uint256) results.get(5), 
                                (Uint256) results.get(6), 
                                (Uint256) results.get(7), 
                                (Uint256) results.get(8), 
                                (Uint256) results.get(9), 
                                (Uint8) results.get(10));
                    }
                });
    }

    public RemoteCall<Uint256> respondMerkleRootHashesCost() {
        final Function function = new Function(FUNC_RESPONDMERKLEROOTHASHESCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minReward() {
        final Function function = new Function(FUNC_MINREWARD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> verifySuperblockCost() {
        final Function function = new Function(FUNC_VERIFYSUPERBLOCKCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> challengeCost() {
        final Function function = new Function(FUNC_CHALLENGECOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> superblockDuration() {
        final Function function = new Function(FUNC_SUPERBLOCKDURATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public static RemoteCall<SyscoinBattleManager> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, Uint8 _network, Address _superblocks, Uint256 _superblockDuration, Uint256 _superblockTimeout) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_network, _superblocks, _superblockDuration, _superblockTimeout));
        return deployRemoteCall(SyscoinBattleManager.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<SyscoinBattleManager> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, Uint8 _network, Address _superblocks, Uint256 _superblockDuration, Uint256 _superblockTimeout) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_network, _superblocks, _superblockDuration, _superblockTimeout));
        return deployRemoteCall(SyscoinBattleManager.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SyscoinBattleManager> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, Uint8 _network, Address _superblocks, Uint256 _superblockDuration, Uint256 _superblockTimeout) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_network, _superblocks, _superblockDuration, _superblockTimeout));
        return deployRemoteCall(SyscoinBattleManager.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SyscoinBattleManager> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, Uint8 _network, Address _superblocks, Uint256 _superblockDuration, Uint256 _superblockTimeout) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_network, _superblocks, _superblockDuration, _superblockTimeout));
        return deployRemoteCall(SyscoinBattleManager.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public List<NewBattleEventResponse> getNewBattleEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(NEWBATTLE_EVENT, transactionReceipt);
        ArrayList<NewBattleEventResponse> responses = new ArrayList<NewBattleEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NewBattleEventResponse typedResponse = new NewBattleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(2);
            typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(3);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewBattleEventResponse> newBattleEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewBattleEventResponse>() {
            @Override
            public NewBattleEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(NEWBATTLE_EVENT, log);
                NewBattleEventResponse typedResponse = new NewBattleEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(2);
                typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(3);
                return typedResponse;
            }
        });
    }

    public Observable<NewBattleEventResponse> newBattleEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWBATTLE_EVENT));
        return newBattleEventObservable(filter);
    }

    public List<ChallengerConvictedEventResponse> getChallengerConvictedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CHALLENGERCONVICTED_EVENT, transactionReceipt);
        ArrayList<ChallengerConvictedEventResponse> responses = new ArrayList<ChallengerConvictedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ChallengerConvictedEventResponse typedResponse = new ChallengerConvictedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ChallengerConvictedEventResponse> challengerConvictedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, ChallengerConvictedEventResponse>() {
            @Override
            public ChallengerConvictedEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(CHALLENGERCONVICTED_EVENT, log);
                ChallengerConvictedEventResponse typedResponse = new ChallengerConvictedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Observable<ChallengerConvictedEventResponse> challengerConvictedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHALLENGERCONVICTED_EVENT));
        return challengerConvictedEventObservable(filter);
    }

    public List<SubmitterConvictedEventResponse> getSubmitterConvictedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SUBMITTERCONVICTED_EVENT, transactionReceipt);
        ArrayList<SubmitterConvictedEventResponse> responses = new ArrayList<SubmitterConvictedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SubmitterConvictedEventResponse typedResponse = new SubmitterConvictedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SubmitterConvictedEventResponse> submitterConvictedEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, SubmitterConvictedEventResponse>() {
            @Override
            public SubmitterConvictedEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SUBMITTERCONVICTED_EVENT, log);
                SubmitterConvictedEventResponse typedResponse = new SubmitterConvictedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Observable<SubmitterConvictedEventResponse> submitterConvictedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUBMITTERCONVICTED_EVENT));
        return submitterConvictedEventObservable(filter);
    }

    public List<QueryMerkleRootHashesEventResponse> getQueryMerkleRootHashesEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(QUERYMERKLEROOTHASHES_EVENT, transactionReceipt);
        ArrayList<QueryMerkleRootHashesEventResponse> responses = new ArrayList<QueryMerkleRootHashesEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            QueryMerkleRootHashesEventResponse typedResponse = new QueryMerkleRootHashesEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<QueryMerkleRootHashesEventResponse> queryMerkleRootHashesEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, QueryMerkleRootHashesEventResponse>() {
            @Override
            public QueryMerkleRootHashesEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(QUERYMERKLEROOTHASHES_EVENT, log);
                QueryMerkleRootHashesEventResponse typedResponse = new QueryMerkleRootHashesEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Observable<QueryMerkleRootHashesEventResponse> queryMerkleRootHashesEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(QUERYMERKLEROOTHASHES_EVENT));
        return queryMerkleRootHashesEventObservable(filter);
    }

    public List<RespondMerkleRootHashesEventResponse> getRespondMerkleRootHashesEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(RESPONDMERKLEROOTHASHES_EVENT, transactionReceipt);
        ArrayList<RespondMerkleRootHashesEventResponse> responses = new ArrayList<RespondMerkleRootHashesEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RespondMerkleRootHashesEventResponse typedResponse = new RespondMerkleRootHashesEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(2);
            typedResponse.blockHashes = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(3);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RespondMerkleRootHashesEventResponse> respondMerkleRootHashesEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, RespondMerkleRootHashesEventResponse>() {
            @Override
            public RespondMerkleRootHashesEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(RESPONDMERKLEROOTHASHES_EVENT, log);
                RespondMerkleRootHashesEventResponse typedResponse = new RespondMerkleRootHashesEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(2);
                typedResponse.blockHashes = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(3);
                return typedResponse;
            }
        });
    }

    public Observable<RespondMerkleRootHashesEventResponse> respondMerkleRootHashesEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RESPONDMERKLEROOTHASHES_EVENT));
        return respondMerkleRootHashesEventObservable(filter);
    }

    public List<QueryBlockHeaderEventResponse> getQueryBlockHeaderEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(QUERYBLOCKHEADER_EVENT, transactionReceipt);
        ArrayList<QueryBlockHeaderEventResponse> responses = new ArrayList<QueryBlockHeaderEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            QueryBlockHeaderEventResponse typedResponse = new QueryBlockHeaderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(2);
            typedResponse.blockSha256Hash = (Bytes32) eventValues.getNonIndexedValues().get(3);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<QueryBlockHeaderEventResponse> queryBlockHeaderEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, QueryBlockHeaderEventResponse>() {
            @Override
            public QueryBlockHeaderEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(QUERYBLOCKHEADER_EVENT, log);
                QueryBlockHeaderEventResponse typedResponse = new QueryBlockHeaderEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(2);
                typedResponse.blockSha256Hash = (Bytes32) eventValues.getNonIndexedValues().get(3);
                return typedResponse;
            }
        });
    }

    public Observable<QueryBlockHeaderEventResponse> queryBlockHeaderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(QUERYBLOCKHEADER_EVENT));
        return queryBlockHeaderEventObservable(filter);
    }

    public List<RespondBlockHeaderEventResponse> getRespondBlockHeaderEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(RESPONDBLOCKHEADER_EVENT, transactionReceipt);
        ArrayList<RespondBlockHeaderEventResponse> responses = new ArrayList<RespondBlockHeaderEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RespondBlockHeaderEventResponse typedResponse = new RespondBlockHeaderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(2);
            typedResponse.blockHeader = (DynamicBytes) eventValues.getNonIndexedValues().get(3);
            typedResponse.powBlockHeader = (DynamicBytes) eventValues.getNonIndexedValues().get(4);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RespondBlockHeaderEventResponse> respondBlockHeaderEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, RespondBlockHeaderEventResponse>() {
            @Override
            public RespondBlockHeaderEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(RESPONDBLOCKHEADER_EVENT, log);
                RespondBlockHeaderEventResponse typedResponse = new RespondBlockHeaderEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(2);
                typedResponse.blockHeader = (DynamicBytes) eventValues.getNonIndexedValues().get(3);
                typedResponse.powBlockHeader = (DynamicBytes) eventValues.getNonIndexedValues().get(4);
                return typedResponse;
            }
        });
    }

    public Observable<RespondBlockHeaderEventResponse> respondBlockHeaderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RESPONDBLOCKHEADER_EVENT));
        return respondBlockHeaderEventObservable(filter);
    }

    public List<ErrorBattleEventResponse> getErrorBattleEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ERRORBATTLE_EVENT, transactionReceipt);
        ArrayList<ErrorBattleEventResponse> responses = new ArrayList<ErrorBattleEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ErrorBattleEventResponse typedResponse = new ErrorBattleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ErrorBattleEventResponse> errorBattleEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, ErrorBattleEventResponse>() {
            @Override
            public ErrorBattleEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ERRORBATTLE_EVENT, log);
                ErrorBattleEventResponse typedResponse = new ErrorBattleEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<ErrorBattleEventResponse> errorBattleEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ERRORBATTLE_EVENT));
        return errorBattleEventObservable(filter);
    }

    public RemoteCall<TransactionReceipt> setSyscoinClaimManager(Address _syscoinClaimManager) {
        final Function function = new Function(
                FUNC_SETSYSCOINCLAIMMANAGER, 
                Arrays.<Type>asList(_syscoinClaimManager), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> beginBattleSession(Bytes32 superblockHash, Address submitter, Address challenger) {
        final Function function = new Function(
                FUNC_BEGINBATTLESESSION, 
                Arrays.<Type>asList(superblockHash, submitter, challenger), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> queryMerkleRootHashes(Bytes32 superblockHash, Bytes32 sessionId) {
        final Function function = new Function(
                FUNC_QUERYMERKLEROOTHASHES, 
                Arrays.<Type>asList(superblockHash, sessionId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> respondMerkleRootHashes(Bytes32 superblockHash, Bytes32 sessionId, DynamicArray<Bytes32> blockHashes) {
        final Function function = new Function(
                FUNC_RESPONDMERKLEROOTHASHES, 
                Arrays.<Type>asList(superblockHash, sessionId, blockHashes), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> queryBlockHeader(Bytes32 superblockHash, Bytes32 sessionId, Bytes32 blockHash) {
        final Function function = new Function(
                FUNC_QUERYBLOCKHEADER, 
                Arrays.<Type>asList(superblockHash, sessionId, blockHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> respondBlockHeader(Bytes32 superblockHash, Bytes32 sessionId, DynamicBytes blockHeader) {
        final Function function = new Function(
                FUNC_RESPONDBLOCKHEADER, 
                Arrays.<Type>asList(superblockHash, sessionId, blockHeader), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> verifySuperblock(Bytes32 sessionId) {
        final Function function = new Function(
                FUNC_VERIFYSUPERBLOCK, 
                Arrays.<Type>asList(sessionId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> timeout(Bytes32 sessionId) {
        final Function function = new Function(
                FUNC_TIMEOUT, 
                Arrays.<Type>asList(sessionId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Bool> getChallengerHitTimeout(Bytes32 sessionId) {
        final Function function = new Function(FUNC_GETCHALLENGERHITTIMEOUT, 
                Arrays.<Type>asList(sessionId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> getSubmitterHitTimeout(Bytes32 sessionId) {
        final Function function = new Function(FUNC_GETSUBMITTERHITTIMEOUT, 
                Arrays.<Type>asList(sessionId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Bytes32>> getSyscoinBlockHashes(Bytes32 sessionId) {
        final Function function = new Function(FUNC_GETSYSCOINBLOCKHASHES, 
                Arrays.<Type>asList(sessionId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    @Deprecated
    public static SyscoinBattleManager load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SyscoinBattleManager(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SyscoinBattleManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SyscoinBattleManager(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SyscoinBattleManager load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SyscoinBattleManager(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SyscoinBattleManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SyscoinBattleManager(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class NewBattleEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Bytes32 sessionId;

        public Address submitter;

        public Address challenger;
    }

    public static class ChallengerConvictedEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Bytes32 sessionId;

        public Address challenger;
    }

    public static class SubmitterConvictedEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Bytes32 sessionId;

        public Address submitter;
    }

    public static class QueryMerkleRootHashesEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Bytes32 sessionId;

        public Address submitter;
    }

    public static class RespondMerkleRootHashesEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Bytes32 sessionId;

        public Address challenger;

        public DynamicArray<Bytes32> blockHashes;
    }

    public static class QueryBlockHeaderEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Bytes32 sessionId;

        public Address submitter;

        public Bytes32 blockSha256Hash;
    }

    public static class RespondBlockHeaderEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Bytes32 sessionId;

        public Address challenger;

        public DynamicBytes blockHeader;

        public DynamicBytes powBlockHeader;
    }

    public static class ErrorBattleEventResponse {
        public Log log;

        public Bytes32 sessionId;

        public Uint256 err;
    }
}
