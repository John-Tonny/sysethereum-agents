package org.dogethereum.agents.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple12;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class DogeBattleManager extends Contract {
    private static final String BINARY = "0x6080604052600060015534801561001557600080fd5b506040516080806131db83398101604090815281516020830151918301516060909301516006805492949285919060ff1916600183600281111561005557fe5b021790555060088054600160a060020a031916600160a060020a0394909416939093179092556002556003555061314a806100916000396000f3006080604052600436106101aa5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416626622a481146101af57806301c17ec7146101cf57806306ef472114610232578063089845e1146102595780630f2c63ff146102b757806318b011de146102d25780631fc8ad6f146102e7578063312f63071461034f5780633c2f7fb81461036457806341827da714610395578063455e6166146103aa5780634955d085146103bf5780635292a590146103d457806361bd8d66146103ec5780636beb7262146104015780636c8bb739146104165780636ca640a11461044a57806371a8c18a1461045f57806375988c301461048b578063795ea18e146104a95780637dbd2832146104c157806390b6f69914610565578063945fd0c51461057a57806399b32f3a1461058f5780639e30ce2d146105a7578063a6c07c96146105d8578063ba16d600146105f0578063d035c40314610605578063d1daeede1461061a578063db1ee90314610644578063db484ac11461065c578063e1bafb911461067d578063eda1970b1461069e578063f1afcfa6146106b3575b600080fd5b3480156101bb57600080fd5b506101cd6004356024356044356106c8565b005b3480156101db57600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526101cd94803594602480359560443595369560849493019181908401838280828437509497506107b79650505050505050565b34801561023e57600080fd5b50610247610998565b60408051918252519081900360200190f35b34801561026557600080fd5b5060408051602060046044358181013583810280860185019096528085526101cd95833595602480359636969560649593949201929182918501908490808284375094975061099f9650505050505050565b3480156102c357600080fd5b506101cd600435602435610b5e565b3480156102de57600080fd5b50610247610c44565b3480156102f357600080fd5b506102ff600435610c4a565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561033b578181015183820152602001610323565b505050509050019250505060405180910390f35b34801561035b57600080fd5b50610247610cae565b34801561037057600080fd5b50610379610cb4565b60408051600160a060020a039092168252519081900360200190f35b3480156103a157600080fd5b50610247610cc8565b3480156103b657600080fd5b50610247610ccf565b3480156103cb57600080fd5b50610247610cd6565b3480156103e057600080fd5b506101cd600435610cdc565b3480156103f857600080fd5b50610247610d08565b34801561040d57600080fd5b50610247610d0f565b34801561042257600080fd5b506101cd60048035906024803591604435918201910135600160a060020a0360643516610d15565b34801561045657600080fd5b50610247610f0a565b34801561046b57600080fd5b50610477600435610f11565b604080519115158252519081900360200190f35b34801561049757600080fd5b506101cd600435602435604435610f65565b3480156104b557600080fd5b50610247600435611001565b3480156104cd57600080fd5b506104d960043561113f565b604080518d8152602081018d9052600160a060020a03808d1692820192909252908a1660608201526080810189905260a0810188905260c0810187905260e08101869052610100810185905261012081018490526101408101839052610160810182600b81111561054657fe5b60ff1681526020019c5050505050505050505050505060405180910390f35b34801561057157600080fd5b506102476111ae565b34801561058657600080fd5b506102476111b5565b34801561059b57600080fd5b506104776004356111bc565b3480156105b357600080fd5b506105bf60043561120c565b6040805192835260208301919091528051918290030190f35b3480156105e457600080fd5b506101cd600435611225565b3480156105fc57600080fd5b5061024761129e565b34801561061157600080fd5b506102476112a5565b34801561062657600080fd5b50610247600435600160a060020a03602435811690604435166112ac565b34801561065057600080fd5b506101cd60043561148c565b34801561066857600080fd5b506101cd600160a060020a03600435166114b4565b34801561068957600080fd5b506101cd600160a060020a036004351661150f565b3480156106aa57600080fd5b50610247611575565b3480156106bf57600080fd5b5061024761157b565b60008281526020819052604081206003015481908490600160a060020a031633146106f257600080fd5b6000858152602081905260409020925061070c8385611581565b9150811561074257604080518681526020810184905281516000805160206130ff833981519152929181900390910190a16107af565b60078301805460010190819055426004850155600684015560028301546040805188815260208101889052600160a060020a039092168282015260608201869052517fc32d73f54fbafb3a4f05d1f05fa0d120659da2f8494eee5a94442fcda572f4159181900360800190a15b505050505050565b60008381526020819052604081206002015481906060908690600160a060020a031633146107e457600080fd5b60008781526020819052604090209350610800848888886116f6565b9093509150821561083957604080518881526020810185905281516000805160206130ff833981519152929181900390910190a161098e565b6007840180546001019081905542600486015560058501556003840154604080518a815260208082018b9052600160a060020a039093169181018290526060810189905260c06080820181815289519183019190915288517f39eb553cd1a51fa2226da9b6bc983cf6c2d87c588236014a137e080b22fc2036948d948d9490938d938d938b93929160a084019160e08501919087019080838360005b838110156108ed5781810151838201526020016108d5565b50505050905090810190601f16801561091a5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561094d578181015183820152602001610935565b50505050905090810190601f16801561097a5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a15b5050505050505050565b620157c081565b600082815260208190526040812060020154819081908590600160a060020a031633146109cb57600080fd5b600086815260208190526040902093506109e584866118dd565b92508215610a1b57604080518781526020810185905281516000805160206130ff833981519152929181900390910190a1610b55565b600784018054600101908190554260048601556005850155600091505b8451821015610aaf57600184600b0160008785815181101515610a5757fe5b6020908102909101810151825281019190915260400160002060010180546cff00000000000000000000000019166c01000000000000000000000000836005811115610a9f57fe5b0217905550816001019150610a38565b60038401546040805189815260208082018a9052600160a060020a0390931691810182905260806060820181815289519183019190915288517fbca3431b78418303a430f83db37413835aa6c34f2bc94b5cb93f3c1a56384e69948c948c9490938c939192909160a0840191808601910280838360005b83811015610b3e578181015183820152602001610b26565b505050509050019550505050505060405180910390a15b50505050505050565b60008181526020819052604081206003015481908390600160a060020a03163314610b8857600080fd5b60008481526020819052604090209250610ba183611aad565b91508115610bd757604080518581526020810184905281516000805160206130ff833981519152929181900390910190a1610c3d565b60078301805460010190819055426004850155600684015560028301546040805187815260208101879052600160a060020a0390921682820152517f0817bf136ff95abb2d41d10a9fa5ff6652ff71c13e1b46717fae65db16423c9b9181900360600190a15b5050505050565b60035481565b60008181526020818152604091829020600801805483518184028101840190945280845260609392830182828015610ca257602002820191906000526020600020905b81548152600190910190602001808311610c8d575b50505050509050919050565b60015481565b6006546101009004600160a060020a031681565b62018e7081565b62069f5081565b619c4081565b6006546101009004600160a060020a0316338114610cf957600080fd5b610d04826001611b3c565b5050565b6206b6c081565b60045481565b600654600090819081906101009004600160a060020a0316338114610d3957600080fd5b60508614610d4657600080fd5b60008981526005602090815260408083208054845291839052909120600c81015491955093508914610d7757600080fd5b6007600d84015460ff16600b811115610d8c57fe5b14610d9657600080fd5b6002830154600160a060020a03868116911614610db257600080fd5b60018401546000908152600b8401602052604090209150600360018301546c01000000000000000000000000900460ff166005811115610dee57fe5b14610df857600080fd5b60038201548814610e0857600080fd5b600282810180546040805160206001841615610100026000190190931694909404601f8101839004830285018301909152808452610ece939291830182828015610e935780601f10610e6857610100808354040283529160200191610e93565b820191906000526020600020905b815481529060010190602001808311610e7657829003601f168201915b505050505088888080601f01602080910402602001604051908101604052809392919081815260200183838082843750611c67945050505050565b15610ed857600080fd5b5050600d8101805460ff1916600817905560078101805460010190819055426004830155600590910155505050505050565b620cd14081565b60008181526020819052604081206008600d82015460ff16600b811115610f3457fe5b14158015610f49575080600501548160060154115b8015610f5c575060035481600401540142115b91505b50919050565b60008281526020819052604081206003015481908490600160a060020a03163314610f8f57600080fd5b60008581526020819052604090209250610fab83878787611ce0565b91508115610fe157604080518681526020810184905281516000805160206130ff833981519152929181900390910190a16107af565b600783018054600101908190554260048501556006840155505050505050565b60008181526020819052604081206008600d82015460ff16600b81111561102457fe5b141561105e576040805184815261c36e602082015281516000805160206130ff833981519152929181900390910190a161c36e9150610f5f565b600b600d82015460ff16600b81111561107357fe5b1480611098575080600501548160060154118015611098575060035481600401540142115b156110c757600281015460018201546110be918591600160a060020a0390911690611e9e565b60009150610f5f565b806006015481600501541180156110e5575060035481600401540142115b1561110b57600381015460018201546110be918591600160a060020a0390911690611f27565b6040805184815261c36e602082015281516000805160206130ff833981519152929181900390910190a15061c36e92915050565b6000602081905290815260409020805460018201546002830154600384015460048501546005860154600687015460078801546009890154600a8a0154600c8b0154600d909b0154999a9899600160a060020a0398891699979098169795969495939492939192909160ff168c565b6205c49081565b6201388081565b60008181526020819052604081206008600d82015460ff16600b8111156111df57fe5b14158015610f49575080600601548160050154118015610f5c575060035460049091015401421192915050565b6005602052600090815260409020805460019091015482565b60008181526020819052604081209061123e8284611fb0565b9050806001141561126f576003820154600183015461126a918591600160a060020a0390911690611f27565b611299565b80600214156112995760028201546001830154611299918591600160a060020a0390911690611e9e565b505050565b62061a8081565b62035b6081565b60075460009081908190600160a060020a03163381146112cb57600080fd5b6001546040805160208082018b9052338284015260608083019490945282518083039094018452608090910191829052825182918401908083835b602083106113255780518252601f199092019160209182019101611306565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209250600080846000191660001916815260200190815260200160002091508282600001816000191690555086826001018160001916905550858260020160006101000a815481600160a060020a030219169083600160a060020a03160217905550848260030160006101000a815481600160a060020a030219169083600160a060020a03160217905550428260040181905550600082600601819055506001826005018190555060018260070181905550600182600d0160006101000a81548160ff0219169083600b81111561142457fe5b021790555060018054810190556040805188815260208101859052600160a060020a03808916828401528716606082015290517f403956bdc140717d54d4573786b4e9e773ef2e6e325e2c061476eb47711770de9181900360800190a1509095945050505050565b6006546101009004600160a060020a03163381146114a957600080fd5b610d04826000611b3c565b600754600160a060020a03161580156114d55750600160a060020a03811615155b15156114e057600080fd5b6007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6006546101009004600160a060020a03161580156115355750600160a060020a03811615155b151561154057600080fd5b60068054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b6184d081565b60025481565b60008061159033619c406120af565b15156115a05761c38c91506116ef565b6006600d85015460ff16600b8111156115b557fe5b14156115c4576115c48461214d565b60098401541580156115e857506003600d85015460ff16600b8111156115e657fe5b145b8061161457506000846009015411801561161457506005600d85015460ff16600b81111561161257fe5b145b156116e957600884015460098501541061162d57600080fd5b60016000848152600b860160205260409020600101546c01000000000000000000000000900460ff16600581111561166157fe5b1461166b57600080fd5b61167c846001015433619c406121b4565b509050801561168d578091506116ef565b60098401805460019081019091556000848152600b86016020526040812090910180546c020000000000000000000000006cff00000000000000000000000019909116179055600d8501805460ff1916600417905591506116ef565b61c36491505b5092915050565b6000606060008060006060600061170f33619c406120af565b1515611735576040805160008082526020820190925261c38c915b5090975095506118cf565b6004600d8c015460ff16600b81111561174a57fe5b14156118b85761175d8860006050612268565b6000818152600b8d01602052604090209095509350600260018501546c01000000000000000000000000900460ff16600581111561179757fe5b146117b5576040805160008082526020820190925261c3699161172a565b6117c38b6001015489612329565b15156117e2576040805160008082526020820190925261c3739161172a565b6117ed848a8a6123aa565b9093509150821561180f5760408051600080825260208201909252849161172a565b600184810180546cff00000000000000000000000019166c030000000000000000000000001790558b01546118479033619c406121b4565b50925082156118675760408051600080825260208201909252849161172a565b600384015460028c0154611887918c918890600160a060020a03166125c1565b600a8c0180546001019055600d8c01805460ff19166006179055600c8c0181905560009750919550859190506118cf565b60408051600081526020810190915261c364975095505b505050505094509492505050565b6000806000806118f03362035b606120af565b15156119005761c38c9350611aa4565b60088601541561190f57600080fd5b6002600d87015460ff16600b81111561192457fe5b1415611a9e5761193786600101546126a0565b505050509550505050925084600186510381518110151561195457fe5b60209081029091010151821461196e5761c3e69350611aa4565b6040517ff9b5d7c000000000000000000000000000000000000000000000000000000000815260206004820181815287516024840152875173__DogeMessageLibrary____________________9363f9b5d7c0938a9392839260440191808601910280838360005b838110156119ee5781810151838201526020016119d6565b505050509050019250505060206040518083038186803b158015611a1157600080fd5b505af4158015611a25573d6000803e3d6000fd5b505050506040513d6020811015611a3b57600080fd5b50518314611a4d5761c3789350611aa4565b611a5f86600101543362035b606121b4565b5090508015611a7057809350611aa4565b8451611a859060088801906020880190613005565b50600d8601805460ff1916600317905560009350611aa4565b61c36493505b50505092915050565b600080611abd336205c4906120af565b1515611acd5761c38c9150610f5f565b6001600d84015460ff16600b811115611ae257fe5b1415611b3257600d8301805460ff19166002179055600383015433600160a060020a0390911614611b0f57fe5b611b218360010154336205c4906121b4565b50905080156110be57809150610f5f565b5061c36492915050565b600082815260056020908152604080832080548452918390528220600c810154919290918514611b6b57600080fd5b6008600d83015460ff16600b811115611b8057fe5b14611b8a57600080fd5b5060018201546000908152600b820160205260409020600360018201546c01000000000000000000000000900460ff166005811115611bc557fe5b14611bcf57600080fd5b611bde828460010154866127c5565b4260048301556001808301548454600380850154938701549086015460408051948552602085019390935283830194909452606083015260808201889052600160a060020a0390921660a082015285151560c082015290517f13a771cb91faa8e8a02bf31e73e4f740eec154e07a621921f8032b2f2283b6e89181900360e00190a15050505050565b600080600084516050141515611c7c57600080fd5b8351605014611c8a57600080fd5b505060208381015190830151808214611ca7578082039250611cd8565b505060408381015190830151808214611cc4578082039250611cd8565b605085015191506050840151905080820392505b505092915050565b6000806000611cf233620157c06120af565b1515611d025761c38c9250611e94565b6006600d88015460ff16600b811115611d1757fe5b1415611e8e576000848152600b8801602052604090209150600360018301546c01000000000000000000000000900460ff166005811115611d5457fe5b1415611e8e57611d6c876001015433620157c06121b4565b5090508015611d7d57809250611e94565b6003820154600c880154600289810154604080518b8152602081018b905290810185905260808101849052600160a060020a0390911660a0820181905260c06060830181815284890180546001811615610100026000190116959095049184018290527fa0a243586b0bd46802910cb3689c5f90d34de99ee8c612f60614bc120f7ebfe6968d968d9691959194909390929060e083019086908015611e635780601f10611e3857610100808354040283529160200191611e63565b820191906000526020600020905b815481529060010190602001808311611e4657829003601f168201915b505097505050505050505060405180910390a1600d8701805460ff1916600717905560009250611e94565b61c36492505b5050949350505050565b600083815260208190526040902060038101546002820154611ed09186918591600160a060020a03908116911661287a565b611ed98461290b565b6040805183815260208101869052600160a060020a0385168183015290517faab6a8f22c7ab5131c1cdc1c0000e123efd38efadfef092cef78be507d16542e9181900360600190a150505050565b600083815260208190526040902060028101546003820154611f599186918591600160a060020a03908116911661287a565b611f628461290b565b6040805183815260208101869052600160a060020a0385168183015290517fda9b5fdafb0f67d811425d3f095917a63329d60d3db3aa456b5247a8f3b88b119181900360600190a150505050565b6000806006600d85015460ff16600b811115611fc857fe5b1415611fd757611fd78461214d565b6009600d85015460ff16600b811115611fec57fe5b141561208157611ffb8461299e565b9050801561203557604080518481526020810183905281516000805160206130ff833981519152929181900390910190a1600291506116ef565b61203e84612b06565b9050801561207857604080518481526020810183905281516000805160206130ff833981519152929181900390910190a1600291506116ef565b600191506116ef565b600b600d85015460ff16600b81111561209657fe5b14156120a557600291506116ef565b5060009392505050565b600754604080517fe1254fba000000000000000000000000000000000000000000000000000000008152600160a060020a03858116600483015291516000938593169163e1254fba91602480830192602092919082900301818887803b15801561211857600080fd5b505af115801561212c573d6000803e3d6000fd5b505050506040513d602081101561214257600080fd5b505110159392505050565b600c8101546000908190151561216257600080fd5b5050600c81015460008181526005602052604090208054151561218457600080fd5b61219483826001015460016127c5565b506000908152600560205260408120818155600101819055600c90910155565b600754604080517fc2569e5a00000000000000000000000000000000000000000000000000000000815260048101869052600160a060020a038581166024830152604482018590528251600094859492169263c2569e5a92606480830193919282900301818787803b15801561222957600080fd5b505af115801561223d573d6000803e3d6000fd5b505050506040513d604081101561225357600080fd5b50805160209091015190969095509350505050565b6000612321600261227a868686612ee1565b6040805160208082019390935281518082038401815290820191829052805190928291908401908083835b602083106122c45780518252601f1990920191602091820191016122a5565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015612305573d6000803e3d6000fd5b5050506040513d602081101561231a57600080fd5b5051612f08565b949350505050565b6000806000612339846000612f33565b63ffffffff16915061234a856126a0565b505060025494975093955086945050508315159150612367905057fe5b046002548381151561237557fe5b04111580156123a1575060016002548281151561238e57fe5b04036002548381151561239d57fe5b0410155b95945050505050565b600060606000806000606073__DogeMessageLibrary____________________63fa7199a18860008a518c600190046040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001858152602001848152602001838152602001828103825286818151815260200191508051906020019080838360005b8381101561245357818101518382015260200161243b565b50505050905090810190601f1680156124805780820380516001836020036101000a031916815260200191505b509550505050505060806040518083038186803b1580156124a057600080fd5b505af41580156124b4573d6000803e3d6000fd5b505050506040513d60808110156124ca57600080fd5b5080516040820151606090920151909550909350915083156125025760408051600081526020810190915293955092935084926125b5565b81612519576125148760006050612f67565b612529565b6125298760508951038951612f67565b9050612536876000612f33565b60018a01805467ffffffffffffffff191663ffffffff92909216919091179055612561876000612fbe565b8960010160086101000a81548163ffffffff021916908363ffffffff16021790555061258e876000612ff2565b89556003890183905580516125ac9060028b01906020840190613052565b50600081955095505b50505050935093915050565b60048054600101908190556040805160208082018790526c01000000000000000000000000600160a060020a038616028284015260548083019490945282518083039094018452607490910191829052825160009384939092909182918401908083835b602083106126445780518252601f199092019160209182019101612625565b51815160001960209485036101000a0190811690199091161790526040805194909201849003842084830183529b8452838101998a5260008c815260059091522091518255509551600190960195909555509495945050505050565b600854604080517f6e5b707100000000000000000000000000000000000000000000000000000000815260048101849052905160009283928392839283928392839283928392600160a060020a0390921691636e5b7071916024808201926101209290919082900301818787803b15801561271a57600080fd5b505af115801561272e573d6000803e3d6000fd5b505050506040513d61012081101561274557600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291905050509850985098509850985098509850985098509193959799909294969850565b6000828152600b840160205260409020811561283b576001810180546cff00000000000000000000000019166c040000000000000000000000001790556008840154600a850154141561282657600d8401805460ff19166009179055612836565b600d8401805460ff191660051790555b612874565b6001810180546c050000000000000000000000006cff00000000000000000000000019909116179055600d8401805460ff1916600b1790555b50505050565b600754604080517f748a00e20000000000000000000000000000000000000000000000000000000081526004810187905260248101869052600160a060020a03858116604483015284811660648301529151919092169163748a00e291608480830192600092919082900301818387803b1580156128f757600080fd5b505af115801561098e573d6000803e3d6000fd5b60008181526020819052604081208181556001810182905560028101805473ffffffffffffffffffffffffffffffffffffffff199081169091556003820180549091169055600481018290556005810182905560068101829055600781018290559061297a60088301826130c0565b50600060098201819055600a8201819055600c820155600d01805460ff1916905550565b600080600080600080600087600801805490501115156129c25761c3e69550612afc565b6129cf87600101546126a0565b505060088e018054959c50939a509098509650909350506000198101915081106129f557fe5b6000918252602080832090910154808352600b8a0190915260409091206001015490915067ffffffffffffffff168514612a335761c3739550612afc565b6000818152600b8801602052604090206001015463ffffffff848116680100000000000000009092041614612a6c5761c3d29550612afc565b600887015460011015612ad0576008870180546001198101908110612a8d57fe5b6000918252602080832090910154808352600b8a0190915260409091206001015490915067ffffffffffffffff168414612acb5761c3739550612afc565b612af7565b612ad9826126a0565b50949b505050888a149450612af793505050505761c3739550612afc565b600095505b5050505050919050565b6000806000806000806000806000806000806000612b278e600101546126a0565b90919293949596975090919293949550909192939450909192935090919250905050809b50819d505050612b5a8a6126a0565b909192939495969750909150905050809a50819d50829b50839c50849f505050505050600094505b60088e0154851015612e995760088e01805486908110612b9e57fe5b906000526020600020015492508d600b016000846000191660001916815260200190815260200160002060010160089054906101000a900463ffffffff16915088600019168e600b01600085600019166000191681526020019081526020016000206000015460001916141515612c195761c3829c50612ed0565b600260065460ff166002811115612c2c57fe5b14612d4657604080517f7034991b000000000000000000000000000000000000000000000000000000008152888a03600790810b900b600482015263ffffffff88166024820152905173__DogeMessageLibrary____________________91637034991b916044808301926020929190829003018186803b158015612cb057600080fd5b505af4158015612cc4573d6000803e3d6000fd5b505050506040513d6020811015612cda57600080fd5b50519050600160065460ff166002811115612cf157fe5b148015612d2057506000838152600b8f016020526040902060010154607867ffffffffffffffff909116899003115b15612d2c5750631e0fffff5b63ffffffff82811690821614612d465761c3d29c50612ed0565b6000838152600b8f0160209081526040918290206001015482517f304ef8ac0000000000000000000000000000000000000000000000000000000081526801000000000000000090910463ffffffff166004820152915173__DogeMessageLibrary____________________9263304ef8ac926024808301939192829003018186803b158015612dd557600080fd5b505af4158015612de9573d6000803e3d6000fd5b505050506040513d6020811015612dff57600080fd5b8101908080519060200190929190505050840193508298508d600b016000846000191660001916815260200190815260200160002060010160089054906101000a900463ffffffff1695508796508d600b016000846000191660001916815260200190815260200160002060010160009054906101000a900467ffffffffffffffff1667ffffffffffffffff169750600185019450612b82565b600260065460ff166002811115612eac57fe5b14158015612ebc57508b848c0114155b15612ecb5761c3c89c50612ed0565b60009c505b505050505050505050505050919050565b60006040516020818486602089010160025afa1515612eff57600080fd5b51949350505050565b600060405160005b6020811015612f2b578381601f031a81830153600101612f10565b505192915050565b600081604c84010151630100000081601b1a026201000082601a1a02016101008260191a02018160181a0191505092915050565b6060600060608484039150816040519080825280601f01601f191660200182016040528015612fa0578160200160208202803883390190505b5090508160208201838760208a010160045afa15156123a157600080fd5b600081605084010151630100000081601b1a026201000082601a1a02016101008260191a02018160181a0191505092915050565b8181016024015160009061232181612f08565b828054828255906000526020600020908101928215613042579160200282015b828111156130425782518255602090920191600190910190613025565b5061304e9291506130e1565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061309357805160ff1916838001178555613042565b82800160010185558215613042579182015b828111156130425782518255916020019190600101906130a5565b50805460008255906000526020600020908101906130de91906130e1565b50565b6130fb91905b8082111561304e57600081556001016130e7565b90560080235326defb5d335564dd77860b0a010e19446427d3d78d155cabd064ca9c2aa165627a7a723058207c8ec0f2cdbf0e99449b76a18dcdc6c6d6ee9dc0e9329b4a9ada40b5c9ff12d80029";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
        _addresses.put("32001", "0x076b086887ccfe6d716ca7e58f6719b38bab6658");
    }

    protected DogeBattleManager(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DogeBattleManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<NewBattleEventResponse> getNewBattleEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("NewBattle", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<NewBattleEventResponse> responses = new ArrayList<NewBattleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewBattleEventResponse typedResponse = new NewBattleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewBattleEventResponse> newBattleEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("NewBattle", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewBattleEventResponse>() {
            @Override
            public NewBattleEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                NewBattleEventResponse typedResponse = new NewBattleEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<ChallengerConvictedEventResponse> getChallengerConvictedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ChallengerConvicted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ChallengerConvictedEventResponse> responses = new ArrayList<ChallengerConvictedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChallengerConvictedEventResponse typedResponse = new ChallengerConvictedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ChallengerConvictedEventResponse> challengerConvictedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ChallengerConvicted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ChallengerConvictedEventResponse>() {
            @Override
            public ChallengerConvictedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ChallengerConvictedEventResponse typedResponse = new ChallengerConvictedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<SubmitterConvictedEventResponse> getSubmitterConvictedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SubmitterConvicted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SubmitterConvictedEventResponse> responses = new ArrayList<SubmitterConvictedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SubmitterConvictedEventResponse typedResponse = new SubmitterConvictedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SubmitterConvictedEventResponse> submitterConvictedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SubmitterConvicted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SubmitterConvictedEventResponse>() {
            @Override
            public SubmitterConvictedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SubmitterConvictedEventResponse typedResponse = new SubmitterConvictedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<QueryMerkleRootHashesEventResponse> getQueryMerkleRootHashesEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("QueryMerkleRootHashes", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<QueryMerkleRootHashesEventResponse> responses = new ArrayList<QueryMerkleRootHashesEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            QueryMerkleRootHashesEventResponse typedResponse = new QueryMerkleRootHashesEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<QueryMerkleRootHashesEventResponse> queryMerkleRootHashesEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("QueryMerkleRootHashes", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, QueryMerkleRootHashesEventResponse>() {
            @Override
            public QueryMerkleRootHashesEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                QueryMerkleRootHashesEventResponse typedResponse = new QueryMerkleRootHashesEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<RespondMerkleRootHashesEventResponse> getRespondMerkleRootHashesEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RespondMerkleRootHashes", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<RespondMerkleRootHashesEventResponse> responses = new ArrayList<RespondMerkleRootHashesEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RespondMerkleRootHashesEventResponse typedResponse = new RespondMerkleRootHashesEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.blockHashes = (List<byte[]>) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RespondMerkleRootHashesEventResponse> respondMerkleRootHashesEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RespondMerkleRootHashes", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RespondMerkleRootHashesEventResponse>() {
            @Override
            public RespondMerkleRootHashesEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                RespondMerkleRootHashesEventResponse typedResponse = new RespondMerkleRootHashesEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.blockHashes = (List<byte[]>) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<QueryBlockHeaderEventResponse> getQueryBlockHeaderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("QueryBlockHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<QueryBlockHeaderEventResponse> responses = new ArrayList<QueryBlockHeaderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            QueryBlockHeaderEventResponse typedResponse = new QueryBlockHeaderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.blockSha256Hash = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<QueryBlockHeaderEventResponse> queryBlockHeaderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("QueryBlockHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, QueryBlockHeaderEventResponse>() {
            @Override
            public QueryBlockHeaderEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                QueryBlockHeaderEventResponse typedResponse = new QueryBlockHeaderEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.blockSha256Hash = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<RespondBlockHeaderEventResponse> getRespondBlockHeaderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RespondBlockHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<RespondBlockHeaderEventResponse> responses = new ArrayList<RespondBlockHeaderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RespondBlockHeaderEventResponse typedResponse = new RespondBlockHeaderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.blockHeader = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.powBlockHeader = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RespondBlockHeaderEventResponse> respondBlockHeaderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RespondBlockHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RespondBlockHeaderEventResponse>() {
            @Override
            public RespondBlockHeaderEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                RespondBlockHeaderEventResponse typedResponse = new RespondBlockHeaderEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.blockHeader = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.powBlockHeader = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }


    public List<ErrorBattleEventResponse> getErrorBattleEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ErrorBattle", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ErrorBattleEventResponse> responses = new ArrayList<ErrorBattleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorBattleEventResponse typedResponse = new ErrorBattleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ErrorBattleEventResponse> errorBattleEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ErrorBattle", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ErrorBattleEventResponse>() {
            @Override
            public ErrorBattleEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ErrorBattleEventResponse typedResponse = new ErrorBattleEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<BigInteger> queryMerkleRootHashesCost() {
        final Function function = new Function("queryMerkleRootHashesCost", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> superblockTimeout() {
        final Function function = new Function("superblockTimeout", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> sessionsCount() {
        final Function function = new Function("sessionsCount", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }


    public RemoteCall<BigInteger> queryBlockHeaderCost() {
        final Function function = new Function("queryBlockHeaderCost", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> minProposalDeposit() {
        final Function function = new Function("minProposalDeposit", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> respondBlockHeaderCost() {
        final Function function = new Function("respondBlockHeaderCost", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> superblockCost() {
        final Function function = new Function("superblockCost", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }


    public RemoteCall<BigInteger> minChallengeDeposit() {
        final Function function = new Function("minChallengeDeposit", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple12<byte[], byte[], String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, byte[], BigInteger>> sessions(byte[] param0) {
        final Function function = new Function("sessions", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint8>() {}));
        return new RemoteCall<Tuple12<byte[], byte[], String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, byte[], BigInteger>>(
                new Callable<Tuple12<byte[], byte[], String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, byte[], BigInteger>>() {
                    @Override
                    public Tuple12<byte[], byte[], String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, byte[], BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple12<byte[], byte[], String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, byte[], BigInteger>(
                                (byte[]) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue(), 
                                (BigInteger) results.get(8).getValue(), 
                                (BigInteger) results.get(9).getValue(), 
                                (byte[]) results.get(10).getValue(), 
                                (BigInteger) results.get(11).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> respondMerkleRootHashesCost() {
        final Function function = new Function("respondMerkleRootHashesCost", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }


    public RemoteCall<BigInteger> minReward() {
        final Function function = new Function("minReward", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> verifySuperblockCost() {
        final Function function = new Function("verifySuperblockCost", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> challengeCost() {
        final Function function = new Function("challengeCost", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> superblockDuration() {
        final Function function = new Function("superblockDuration", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static RemoteCall<DogeBattleManager> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger _network, String _superblocks, BigInteger _superblockDuration, BigInteger _superblockTimeout) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(_network), 
                new org.web3j.abi.datatypes.Address(_superblocks), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockDuration), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockTimeout)));
        return deployRemoteCall(DogeBattleManager.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<DogeBattleManager> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger _network, String _superblocks, BigInteger _superblockDuration, BigInteger _superblockTimeout) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(_network), 
                new org.web3j.abi.datatypes.Address(_superblocks), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockDuration), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockTimeout)));
        return deployRemoteCall(DogeBattleManager.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }


    public RemoteCall<TransactionReceipt> setDogeClaimManager(String _dogeClaimManager) {
        final Function function = new Function(
                "setDogeClaimManager", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_dogeClaimManager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> beginBattleSession(byte[] superblockHash, String submitter, String challenger) {
        final Function function = new Function(
                "beginBattleSession", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash), 
                new org.web3j.abi.datatypes.Address(submitter), 
                new org.web3j.abi.datatypes.Address(challenger)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> queryMerkleRootHashes(byte[] superblockHash, byte[] sessionId) {
        final Function function = new Function(
                "queryMerkleRootHashes", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash), 
                new org.web3j.abi.datatypes.generated.Bytes32(sessionId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> respondMerkleRootHashes(byte[] superblockHash, byte[] sessionId, List<byte[]> blockHashes) {
        final Function function = new Function(
                "respondMerkleRootHashes", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash), 
                new org.web3j.abi.datatypes.generated.Bytes32(sessionId), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.Utils.typeMap(blockHashes, org.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> queryBlockHeader(byte[] superblockHash, byte[] sessionId, byte[] blockHash) {
        final Function function = new Function(
                "queryBlockHeader", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash), 
                new org.web3j.abi.datatypes.generated.Bytes32(sessionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(blockHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> respondBlockHeader(byte[] superblockHash, byte[] sessionId,  byte[] blockHeader) {
        final Function function = new Function(
                "respondBlockHeader", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash), 
                new org.web3j.abi.datatypes.generated.Bytes32(sessionId),
                new org.web3j.abi.datatypes.DynamicBytes(blockHeader)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }


    public RemoteCall<TransactionReceipt> verifySuperblock(byte[] sessionId) {
        final Function function = new Function(
                "verifySuperblock", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> timeout(byte[] sessionId) {
        final Function function = new Function(
                "timeout", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }


    public RemoteCall<Boolean> getChallengerHitTimeout(byte[] sessionId) {
        final Function function = new Function("getChallengerHitTimeout", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> getSubmitterHitTimeout(byte[] sessionId) {
        final Function function = new Function("getSubmitterHitTimeout", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<List> getDogeBlockHashes(byte[] sessionId) {
        final Function function = new Function("getDogeBlockHashes", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public static DogeBattleManager load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeBattleManager(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static DogeBattleManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeBattleManager(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class NewBattleEventResponse {
        public Log log;

        public byte[] superblockHash;

        public byte[] sessionId;

        public String submitter;

        public String challenger;
    }

    public static class ChallengerConvictedEventResponse {
        public Log log;

        public byte[] superblockHash;

        public byte[] sessionId;

        public String challenger;
    }

    public static class SubmitterConvictedEventResponse {
        public Log log;

        public byte[] superblockHash;

        public byte[] sessionId;

        public String submitter;
    }

    public static class QueryMerkleRootHashesEventResponse {
        public Log log;

        public byte[] superblockHash;

        public byte[] sessionId;

        public String submitter;
    }

    public static class RespondMerkleRootHashesEventResponse {
        public Log log;

        public byte[] superblockHash;

        public byte[] sessionId;

        public String challenger;

        public List<byte[]> blockHashes;
    }

    public static class QueryBlockHeaderEventResponse {
        public Log log;

        public byte[] superblockHash;

        public byte[] sessionId;

        public String submitter;

        public byte[] blockSha256Hash;
    }

    public static class RespondBlockHeaderEventResponse {
        public Log log;

        public byte[] superblockHash;

        public byte[] sessionId;

        public String challenger;

        public byte[] blockHeader;

        public byte[] powBlockHeader;
    }

    public static class ErrorBattleEventResponse {
        public Log log;

        public byte[] sessionId;

        public BigInteger err;
    }
}
