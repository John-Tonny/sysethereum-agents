package org.dogethereum.agents.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.StaticArray9;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple10;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.6.0.
 */
public class SyscoinSuperblocks extends Contract {
    private static final String BINARY = "0x608060405234801561001057600080fd5b506133b0806100206000396000f3006080604052600436106101df5763ffffffff60e060020a60003504166306ef472181146101e4578063155ee8941461020b57806327426f751461023c5780632da8cffd146102795780632e400191146102915780633288816a146102c25780633ce90e8f146102d757806341827da7146102ef578063455e61661461030457806348aefc32146103195780634955d0851461034557806355e018ce1461035a5780635b5728121461037257806361bd8d6614610387578063642ed9881461039c5780636ca640a1146103b45780636e5b7071146103c9578063742057861461045f5780637b34dcd91461048357806387a4d3821461049b5780638e4d8e99146104b357806390b6f699146104cb57806395b45ee7146104e0578063b6da214414610504578063ba16d60014610527578063c0dde98b1461053c578063c11818a114610554578063c1f67ab31461062d578063cae0581e14610651578063cfd77bf31461068d578063d035c403146106c4578063d095090a146106d9578063df22235714610801578063e52a9a4714610816578063eda1970b1461085a578063f06d520d1461086f578063f0a06beb14610884578063f2854e34146108bb578063f32007e9146108d3578063f6f3238a146108e8578063f9b5d7c014610936575b600080fd5b3480156101f057600080fd5b506101f961098b565b60408051918252519081900360200190f35b34801561021757600080fd5b50610220610992565b60408051600160a060020a039092168252519081900360200190f35b34801561024857600080fd5b50610260600435600160a060020a03602435166109a1565b6040805192835260208301919091528051918290030190f35b34801561028557600080fd5b506101f9600435610b04565b34801561029d57600080fd5b506102a9600435610b19565b6040805163ffffffff9092168252519081900360200190f35b3480156102ce57600080fd5b506101f9610b40565b3480156102e357600080fd5b506101f9600435610b46565b3480156102fb57600080fd5b506101f9610b5b565b34801561031057600080fd5b506101f9610b62565b34801561032557600080fd5b50610331600435610b69565b604080519115158252519081900360200190f35b34801561035157600080fd5b506101f9610b88565b34801561036657600080fd5b506101f9600435610b8e565b34801561037e57600080fd5b506101f9610ba3565b34801561039357600080fd5b506101f9610bcd565b3480156103a857600080fd5b506101f9600435610bd4565b3480156103c057600080fd5b506101f9610be6565b3480156103d557600080fd5b506103e1600435610bed565b604080518b8152602081018b9052908101899052606081018890526080810187905263ffffffff861660a082015260c08101859052600160a060020a03841660e0820152610100810183600581111561043657fe5b60ff16815263ffffffff9092166020830152506040805191829003019950975050505050505050f35b34801561046b57600080fd5b50610260600435600160a060020a0360243516610c64565b34801561048f57600080fd5b506101f9600435610dc1565b3480156104a757600080fd5b506102a9600435610dd6565b3480156104bf57600080fd5b506101f9600435610df9565b3480156104d757600080fd5b506101f9610e0e565b3480156104ec57600080fd5b50610260600435600160a060020a0360243516610e15565b34801561051057600080fd5b50610525600160a060020a0360043516611005565b005b34801561053357600080fd5b506101f9611060565b34801561054857600080fd5b506101f9600435611067565b34801561056057600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101f994369492936024939284019190819084018382808284375050604080516020808901358a01803580830284810184018652818552999c8b359c909b909a95019850929650810194509092508291908501908490808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975050933594506110d49350505050565b34801561063957600080fd5b50610260600435600160a060020a036024351661114b565b34801561065d57600080fd5b506106696004356112a8565b6040518082600581111561067957fe5b60ff16815260200191505060405180910390f35b34801561069957600080fd5b506101f960043560243560443560643560843563ffffffff60a43581169060c4359060e435166112c7565b3480156106d057600080fd5b506101f961138c565b3480156106e557600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101f994369492936024939284019190819084018382808284375050604080516020808901358a01803580830284810184018652818552999c8b359c909b909a95019850929650810194509092508291908501908490808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020808901358a01803580830284810184018652818552999c8b359c909b909a9501985092965081019450909250829190850190849080828437509497505084359550505050602090910135600160a060020a03169050611393565b34801561080d57600080fd5b506101f96116f6565b34801561082257600080fd5b5061026060043560243560443560643560843563ffffffff60a43581169060c4359060e43516600160a060020a0361010435166116fc565b34801561086657600080fd5b506101f9611a9d565b34801561087b57600080fd5b506101f9611aa3565b34801561089057600080fd5b5061026060043560243560443560643560843563ffffffff60a43581169060c4359060e43516611aa9565b3480156108c757600080fd5b506101f9600435611cd6565b3480156108df57600080fd5b506102a9611ceb565b3480156108f457600080fd5b506108fd611cf7565b604051808261012080838360005b8381101561092357818101518382015260200161090b565b5050505090500191505060405180910390f35b34801561094257600080fd5b50604080516020600480358082013583810280860185019096528085526101f995369593946024949385019291829185019084908082843750949750611d6d9650505050505050565b620157c081565b600654600160a060020a031681565b60065460009081908190600160a060020a031633146109f2576040805186815261c39660208201528151600080516020613325833981519152929181900390910190a161c396925060009150610afc565b50600084815260208190526040902060026008820154608060020a900460ff166005811115610a1d57fe5b14158015610a45575060016008820154608060020a900460ff166005811115610a4257fe5b14155b15610a82576040805186815261c36460208201528151600080516020613325833981519152929181900390910190a161c364925060009150610afc565b60088101805470ff00000000000000000000000000000000191670030000000000000000000000000000000017905560408051868152600160a060020a038616602082015281517f87f54f5eb3dd119fe71af0915af693e64a5bfd4acaa19a6c944c47cff8eec9e6929181900390910190a1600085925092505b509250929050565b60009081526020819052604090206002015490565b60009081526020819052604090206008015468010000000000000000900463ffffffff1690565b60045481565b60009081526020819052604090206004015490565b62018e7081565b62069f5081565b60006004610b76836112a8565b6005811115610b8157fe5b1492915050565b619c4081565b60009081526020819052604090206005015490565b60045460009081526020819052604090206008015468010000000000000000900463ffffffff1690565b6206b6c081565b60009081526020819052604090205490565b620cd14081565b600090815260208190526040902080546001820154600283015460038401546004850154600886015460058701546006909701549597949693959294919363ffffffff808316949193600160a060020a0390921692608060020a810460ff16926c0100000000000000000000000090910490911690565b60065460009081908190600160a060020a03163314610cb5576040805186815261c39660208201528151600080516020613325833981519152929181900390910190a161c396925060009150610afc565b50600084815260208190526040902060026008820154608060020a900460ff166005811115610ce057fe5b14158015610d08575060036008820154608060020a900460ff166005811115610d0557fe5b14155b15610d45576040805186815261c36460208201528151600080516020613325833981519152929181900390910190a161c364925060009150610afc565b60088101805470ff00000000000000000000000000000000191670050000000000000000000000000000000017905560408051868152600160a060020a038616602082015281517f64297372062dfcb21d6f7385f68d4656e993be2bb674099e3de73128d4911a91929181900390910190a15060009492505050565b60009081526020819052604090206007015490565b600090815260208190526040902060080154640100000000900463ffffffff1690565b60009081526020819052604090206003015490565b6205c49081565b600654600090819081908190600160a060020a03163314610e68576040805187815261c39660208201528151600080516020613325833981519152929181900390910190a161c396935060009250610ffc565b6000868152602081905260409020915060016008830154608060020a900460ff166005811115610e9457fe5b14158015610ebc575060036008830154608060020a900460ff166005811115610eb957fe5b14155b15610ef9576040805187815261c36460208201528151600080516020613325833981519152929181900390910190a161c364935060009250610ffc565b506005810154600090815260208190526040902060046008820154608060020a900460ff166005811115610f2957fe5b14610f66576040805187815261c38260208201528151600080516020613325833981519152929181900390910190a161c382935060009250610ffc565b60088201805470ff00000000000000000000000000000000191670040000000000000000000000000000000017905560055460018301541115610fb157600486905560018201546005555b60408051878152600160a060020a038716602082015281517ff2dbbf0abb1ab1870a5e4d02746747c91d167c855255440b573ba3b5529dc901929181900390910190a1600086935093505b50509250929050565b600654600160a060020a03161580156110265750600160a060020a03811615155b151561103157600080fd5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b62061a8081565b60045460009060075b8361107a83610b19565b63ffffffff1611156110cd575b61109081611e31565b8461109a84610b19565b63ffffffff16031080156110ae5750600081115b156110bc5760001901611087565b6110c68282611e37565b9150611070565b5092915050565b6000806110e087611f0b565b905086516040141561111f5760408051828152614e5c60208201528151600080516020613365833981519152929181900390910190a160009150611141565b61112c81878787876120ae565b6001141561113c57809150611141565b600091505b5095945050505050565b60065460009081908190600160a060020a0316331461119c576040805186815261c39660208201528151600080516020613325833981519152929181900390910190a161c396925060009150610afc565b50600084815260208190526040902060016008820154608060020a900460ff1660058111156111c757fe5b141580156111ef575060026008820154608060020a900460ff1660058111156111ec57fe5b14155b1561122c576040805186815261c36460208201528151600080516020613325833981519152929181900390910190a161c364925060009150610afc565b60088101805470ff00000000000000000000000000000000191670020000000000000000000000000000000017905560408051868152600160a060020a038616602082015281517f09cdaca254aa177f759fe7a0968fe696ee9baf7d2a1d4714ed24b83d1f09518e929181900390910190a15060009492505050565b600090815260208190526040902060080154608060020a900460ff1690565b6040805160208082018b90528183018a9052606082018990526080820188905260a0820187905260e060020a63ffffffff808816820260c085015260c4840187905285160260e4830152825160c881840301815260e8909201928390528151600093918291908401908083835b602083106113535780518252601f199092019160209182019101611334565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209c9b505050505050505050505050565b62035b6081565b60008060006113a06132cf565b6113a986610bd4565b6113bc6113b58b611f0b565b8a8a612280565b146113f6576040805160008152614e4860208201528151600080516020613345833981519152929181900390910190a1614e4893506116e7565b6114038c8c8c8c8a6110d4565b925082156116b6576114168c8487612300565b9150811561144f5760408051848152602081018490528151600080516020613345833981519152929181900390910190a18193506116e7565b6002600084815260200190815260200160002060c06040519081016040529081600082015481526020016001820160009054906101000a9004600160a060020a0316600160a060020a0316600160a060020a031681526020016001820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016002820160009054906101000a9004600160a060020a0316600160a060020a0316600160a060020a031681526020016003820160009054906101000a9004600160a060020a0316600160a060020a0316600160a060020a031681526020016004820160009054906101000a9004600160a060020a0316600160a060020a0316600160a060020a0316815250509050600080876000191660001916815260200190815260200160002060060160009054906101000a9004600160a060020a03168160800190600160a060020a03169081600160a060020a03168152505080600260008581526020019081526020016000206000820151816000015560208201518160010160006101000a815481600160a060020a030219169083600160a060020a0316021790555060408201518160010160146101000a81548163ffffffff021916908363ffffffff16021790555060608201518160020160006101000a815481600160a060020a030219169083600160a060020a0316021790555060808201518160030160006101000a815481600160a060020a030219169083600160a060020a0316021790555060a08201518160040160006101000a815481600160a060020a030219169083600160a060020a031602179055509050506116af836124ed565b93506116e7565b604080516000815261753a60208201528151600080516020613345833981519152929181900390910190a161753a93505b50505098975050505050505050565b60055481565b6006546000908190819081908190600160a060020a0316331461175257604080516000815261c39660208201528151600080516020613325833981519152929181900390910190a161c396945060009350611a8c565b6000888152602081905260409020925060036008840154608060020a900460ff16600581111561177e57fe5b141580156117a6575060046008840154608060020a900460ff1660058111156117a357fe5b14155b156117e3576040805183815261c38260208201528151600080516020613325833981519152929181900390910190a161c382945060009350611a8c565b6117f38e8e8e8e8e8e8e8e6112c7565b60008181526020819052604081209193509091506008820154608060020a900460ff16600581111561182157fe5b1461185e576040805183815261c35a60208201528151600080516020613325833981519152929181900390910190a161c35a945060009350611a8c565b8160016000600360009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002081600019169055508d8160000181600019169055508c81600101819055508b81600201819055508a81600301819055508981600401816000191690555087816005018160001916905550858160060160006101000a815481600160a060020a030219169083600160a060020a03160217905550600360009054906101000a900463ffffffff168160080160046101000a81548163ffffffff021916908363ffffffff1602179055508260080160089054906101000a900463ffffffff166001018160080160086101000a81548163ffffffff021916908363ffffffff160217905550888160080160006101000a81548163ffffffff021916908363ffffffff16021790555060018160080160106101000a81548160ff021916908360058111156119b657fe5b02179055506008808201805463ffffffff808b166c01000000000000000000000000026fffffffff0000000000000000000000001990921691909117909155600785015491850154611a209291640100000000820481169168010000000000000000900416612652565b60078201556003805463ffffffff8082166001011663ffffffff1990911617905560408051838152600160a060020a038816602082015281517f64951c9008bba9f4663c12662e7a9b6412a7c4757869fdac09285564ae923fa1929181900390910190a1600082945094505b505050995099975050505050505050565b6184d081565b60045490565b60045460009081908190819015611abf57600080fd5b8515611aca57600080fd5b611ada8c8c8c8c8c8c8c8c6112c7565b60008181526020819052604081209193509091506008820154608060020a900460ff166005811115611b0857fe5b14611b1257600080fd5b6003805463ffffffff90811660009081526001602081905260409091208590558e845583018d9055600283018c90558282018b905560048084018b9055600584018990556006840180543373ffffffffffffffffffffffffffffffffffffffff1990911617905591546008840180546801000000000000000067ffffffff000000001990911692841664010000000002929092176bffffffff000000000000000019169190911763ffffffff1916918a169190911780825570ff000000000000000000000000000000001916608060020a8302179055506000600782015560088101805463ffffffff8088166c01000000000000000000000000026fffffffff00000000000000000000000019909216919091179091556003805480831660010190921663ffffffff199092169190911790556040805183815233602082015281517f64951c9008bba9f4663c12662e7a9b6412a7c4757869fdac09285564ae923fa1929181900390910190a1600482905560058b90556040805183815233602082015281517ff2dbbf0abb1ab1870a5e4d02746747c91d167c855255440b573ba3b5529dc901929181900390910190a15060009b909a5098505050505050505050565b60009081526020819052604090206001015490565b60035463ffffffff1690565b611cff613304565b611d07613304565b6004548082526000908190611d1b90610dc1565b9150600890505b6000811115611d655763ffffffff8216600090815260016020526040902054838260098110611d4d57fe5b60200201526401000000009091049060001901611d22565b509092915050565b600073__SyscoinMessageLibrary_________________63f9b5d7c0836040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019060200280838360005b83811015611ddc578181015183820152602001611dc4565b505050509050019250505060206040518083038186803b158015611dff57600080fd5b505af4158015611e13573d6000803e3d6000fd5b505050506040513d6020811015611e2957600080fd5b505192915050565b60050a90565b600082815260208181526040822060070154908290829060036004870201908110611e5e57fe5b60f860020a91901a810204826002600487020160208110611e7b57fe5b1a60f860020a0260f860020a9004610100028386600402600101602081101515611ea157fe5b1a60f860020a0260f860020a900462010000028487600402600001602081101515611ec857fe5b1a60f860020a0260f860020a90046301000000020101019050600160008263ffffffff1663ffffffff168152602001908152602001600020549250505092915050565b60006120a8600280846040516020018082805190602001908083835b60208310611f465780518252601f199092019160209182019101611f27565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310611fa95780518252601f199092019160209182019101611f8a565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015611fea573d6000803e3d6000fd5b5050506040513d6020811015611fff57600080fd5b50516040805160208181019390935281518082038401815290820191829052805190928291908401908083835b6020831061204b5780518252601f19909201916020918201910161202c565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af115801561208c573d6000803e3d6000fd5b5050506040513d60208110156120a157600080fd5b50516126b2565b92915050565b6000806120ba83610b69565b15806120cc57506120ca836126d5565b155b156121055760408051888152614e3e60208201528151600080516020613365833981519152929181900390910190a1614e3e9150611141565b604080517fd2db98720000000000000000000000000000000000000000000000000000000081526000602482018190526004820192835286516044830152865173__SyscoinMessageLibrary_________________9363d2db9872938993928291606401906020860190808383885b8381101561218c578181015183820152602001612174565b50505050905090810190601f1680156121b95780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b1580156121d757600080fd5b505af41580156121eb573d6000803e3d6000fd5b505050506040513d602081101561220157600080fd5b5051905080612211888888612280565b1461224a5760408051888152614e5260208201528151600080516020613365833981519152929181900390910190a1614e529150611141565b60408051888152600160208201528151600080516020613365833981519152929181900390910190a15060019695505050505050565b60008381808080805b87518510156122ef5787858151811015156122a057fe5b60209081029091010151935060028906925082600114156122c55750829050846122d2565b8215156122d25750849050825b6122dc828261270d565b9550600289049850600185019450612289565b8596505b5050505050509392505050565b6000806000806000806123116132cf565b61231a8a612782565b929950909750909550935091508115612335578196506122f3565b63ffffffff8316158015906123515750600160a060020a038416155b1561238b576040805160008152614e6660208201528151600080516020613345833981519152929181900390910190a1614e6696506122f3565b600160a060020a038416158015906123a7575063ffffffff8316155b156123e1576040805160008152614e7060208201528151600080516020613345833981519152929181900390910190a1614e7096506122f3565b600160a060020a038416156123f4578397505b94855250600160a060020a03928316602080860191825263ffffffff92831660408088019182529486166060880190815298861660a0880190815260009a8b52600292839052948a208751815592516001840180549251909516740100000000000000000000000000000000000000000277ffffffff00000000000000000000000000000000000000001991881673ffffffffffffffffffffffffffffffffffffffff199384161791909116179093559651968101805497851697831697909717909655608090930151600386018054918416918516919091179055516004909401805494909116939091169290921790915550919050565b60006124f76132cf565b506000828152600260208181526040808420815160c08101835281548082526001830154600160a060020a038082168488018190527401000000000000000000000000000000000000000090920463ffffffff1684870181905297850154811660608501819052600386015482166080860181905260049687015490921660a0860181905287517f31f3017b0000000000000000000000000000000000000000000000000000000081529687018d9052602487019490945260448601929092526064850197909752608484015260a48301959095529151919493926331f3017b9260c48084019382900301818787803b1580156125f357600080fd5b505af1158015612607573d6000803e3d6000fd5b505050506040513d602081101561261d57600080fd5b505160408051868152602081018390528151929350600080516020613345833981519152929081900390910190a19392505050565b6000600581612662868287612856565b9550600190505b6008811080156126845750818481151561267f57fe5b066001145b156126a857612697868260040287612856565b955060059190910290600101612669565b5093949350505050565b600060405160005b6020811015611e29578381601f031a818301536001016126ba565b6000806126e183610b19565b63ffffffff1690508015156126f95760009150612707565b8261270382611067565b1491505b50919050565b600061277b60028061271e866126b2565b612727866126b2565b604051602001808381526020018281526020019250505060405160208183030381529060405260405180828051906020019080838360208310611fa95780518252601f199092019160209182019101611f8a565b9392505050565b600080808080808080806004816127998c83612892565b91506127a58c83612917565b91975090925090506127b78c8261299e565b156127fd576127c58c612a7f565b15156127e1576127ba868487879a509a509a509a509a50612847565b6127ee8c82600201612a9c565b92985096509094509250612833565b6128078c82612b86565b1515612823576127c4868487879a509a509a509a509a50612847565b6128308c82600201612c29565b92505b6000868487878494509a509a509a509a509a505b50505050505091939590929450565b60008060405185815283601c1a8582015383601d1a6001860182015383601e1a6002860182015383601f1a600386018201535195945050505050565b6000806000806128a28686612c5f565b955092508215156128d3576128b78686612c5f565b955092508215156128c457fe5b6128ce8686612c5f565b955092505b606483106128e057600080fd5b5060005b8281101561290d576024850194506128fc8686612c5f565b8101600401955091506001016128e4565b5092949350505050565b600080600080600080600080600061292f8b8b612c5f565b9a509550600a861061294057600080fd5b5060005b85811015612990576129588b8b6040612d1d565b9350801515612965578391505b60088a0199506129758b8b612c5f565b9a509450801515612984578992505b98840198600101612944565b509990985095505050505050565b81516000907f5200000000000000000000000000000000000000000000000000000000000000908490849081106129d157fe5b90602001015160f860020a900460f860020a027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614801561277b575082517f520000000000000000000000000000000000000000000000000000000000000090849060018501908110612a4157fe5b90602001015160f860020a900460f860020a027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614905092915050565b600080612a8f8360006020612d1d565b6174011615159392505050565b6000806000806000806000806000612ab48b8b613040565b9a509050600460ff821614612ac857600080fd5b612ad28b8b61307f565b94508060ff168a019950612ae68b8b613040565b9a509050600860ff821614612afa57600080fd5b612b048b8b61313a565b67ffffffffffffffff1691508060ff168a019950612b228b8b613040565b9a509050601460ff821614612b3657600080fd5b612b408b8b6132c7565b93508060ff168a019950612b548b8b613040565b9a509050601460ff821614612b6857600080fd5b612b728b8b6132c7565b919b919a5093985091965090945050505050565b81516000907f6a0000000000000000000000000000000000000000000000000000000000000090849084908110612bb957fe5b90602001015160f860020a900460f860020a027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614801561277b575082517f510000000000000000000000000000000000000000000000000000000000000090849060018501908110612a4157fe5b6000806000612c388585613040565b94509050601460ff821614612c4c57600080fd5b612c5685856132c7565b95945050505050565b60008060008484815181101515612c7257fe5b90602001015160f860020a900460f860020a0260f860020a9004905060018401935060fd8160ff161015612cae5760ff81169250839150610afc565b8060ff1660fd1415612cd357612cc685856010612d1d565b8460020192509250610afc565b8060ff1660fe1415612cf857612ceb85856020612d1d565b8460040192509250610afc565b8060ff1660ff1415610afc57612d1085856040612d1d565b8460080192509250610afc565b60008160081415612d5a578383815181101515612d3657fe5b90602001015160f860020a900460f860020a0260f860020a900460ff16905061277b565b8160101415612dc6578383600101815181101515612d7457fe5b90602001015160f860020a900460f860020a0260f860020a9004610100028484815181101515612da057fe5b90602001015160f860020a900460f860020a0260f860020a90040161ffff16905061277b565b8160201415612e97578383600301815181101515612de057fe5b90602001015160f860020a900460f860020a0260f860020a90046301000000028484600201815181101515612e1157fe5b90602001015160f860020a900460f860020a0260f860020a900462010000028585600101815181101515612e4157fe5b90602001015160f860020a900460f860020a0260f860020a9004610100028686815181101515612e6d57fe5b90602001015160f860020a900460f860020a0260f860020a900401010163ffffffff16905061277b565b816040141561277b578383600701815181101515612eb157fe5b90602001015160f860020a900460f860020a0260f860020a9004670100000000000000028484600601815181101515612ee657fe5b90602001015160f860020a900460f860020a0260f860020a90046601000000000000028585600501815181101515612f1a57fe5b90602001015160f860020a900460f860020a0260f860020a900465010000000000028686600401815181101515612f4d57fe5b90602001015160f860020a900460f860020a0260f860020a9004640100000000028787600301815181101515612f7f57fe5b90602001015160f860020a900460f860020a0260f860020a90046301000000028888600201815181101515612fb057fe5b90602001015160f860020a900460f860020a0260f860020a900462010000028989600101815181101515612fe057fe5b90602001015160f860020a900460f860020a0260f860020a9004610100028a8a81518110151561300c57fe5b90602001015160f860020a900460f860020a0260f860020a90040101010101010167ffffffffffffffff1690509392505050565b60008083518310151561305257600080fd5b838381518110151561306057fe5b016020015160f860020a90819004810204915050600182019250929050565b6000828281518110151561308f57fe5b90602001015160f860020a900460f860020a0260f860020a900463010000000283836001018151811015156130c057fe5b90602001015160f860020a900460f860020a0260f860020a9004620100000284846002018151811015156130f057fe5b90602001015160f860020a900460f860020a0260f860020a900461010002858560030181518110151561311f57fe5b016020015160f860020a908190048102040101019392505050565b6000828281518110151561314a57fe5b90602001015160f860020a900460f860020a0260f860020a900467010000000000000002838360010181518110151561317f57fe5b90602001015160f860020a900460f860020a0260f860020a900466010000000000000284846002018151811015156131b357fe5b90602001015160f860020a900460f860020a0260f860020a9004650100000000000285856003018151811015156131e657fe5b90602001015160f860020a900460f860020a0260f860020a900464010000000002868660040181518110151561321857fe5b90602001015160f860020a900460f860020a0260f860020a9004630100000002878760050181518110151561324957fe5b90602001015160f860020a900460f860020a0260f860020a90046201000002888860060181518110151561327957fe5b90602001015160f860020a900460f860020a0260f860020a90046101000289896007018151811015156132a857fe5b016020015160f860020a90819004810204010101010101019392505050565b016014015190565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b6101206040519081016040528060099060208202803883395091929150505600a57c1ba4cf2c89b3558cfeeca4339e04551f0fc1a12cf63f1923c2eed8a5be8b4e64138cc499eb1adf9edff9ef69bd45c56ac4bfd307540952e4c9d51eab55c165bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebda165627a7a72305820b4e98c3e5802e0d51eeccb93fa9b089362e1929ab2d84c7bcdae55a4142ade540029";

    public static final String FUNC_QUERYMERKLEROOTHASHESCOST = "queryMerkleRootHashesCost";

    public static final String FUNC_TRUSTEDCLAIMMANAGER = "trustedClaimManager";

    public static final String FUNC_BESTSUPERBLOCK = "bestSuperblock";

    public static final String FUNC_QUERYBLOCKHEADERCOST = "queryBlockHeaderCost";

    public static final String FUNC_MINPROPOSALDEPOSIT = "minProposalDeposit";

    public static final String FUNC_RESPONDBLOCKHEADERCOST = "respondBlockHeaderCost";

    public static final String FUNC_SUPERBLOCKCOST = "superblockCost";

    public static final String FUNC_MINCHALLENGEDEPOSIT = "minChallengeDeposit";

    public static final String FUNC_RESPONDMERKLEROOTHASHESCOST = "respondMerkleRootHashesCost";

    public static final String FUNC_MINREWARD = "minReward";

    public static final String FUNC_VERIFYSUPERBLOCKCOST = "verifySuperblockCost";

    public static final String FUNC_BESTSUPERBLOCKACCUMULATEDWORK = "bestSuperblockAccumulatedWork";

    public static final String FUNC_CHALLENGECOST = "challengeCost";

    public static final String FUNC_SETCLAIMMANAGER = "setClaimManager";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_PROPOSE = "propose";

    public static final String FUNC_CONFIRM = "confirm";

    public static final String FUNC_CHALLENGE = "challenge";

    public static final String FUNC_SEMIAPPROVE = "semiApprove";

    public static final String FUNC_INVALIDATE = "invalidate";

    public static final String FUNC_RELAYTX = "relayTx";

    public static final String FUNC_VERIFYTX = "verifyTx";

    public static final String FUNC_CALCSUPERBLOCKHASH = "calcSuperblockHash";

    public static final String FUNC_GETBESTSUPERBLOCK = "getBestSuperblock";

    public static final String FUNC_GETSUPERBLOCK = "getSuperblock";

    public static final String FUNC_GETSUPERBLOCKHEIGHT = "getSuperblockHeight";

    public static final String FUNC_GETSUPERBLOCKINDEX = "getSuperblockIndex";

    public static final String FUNC_GETSUPERBLOCKANCESTORS = "getSuperblockAncestors";

    public static final String FUNC_GETSUPERBLOCKMERKLEROOT = "getSuperblockMerkleRoot";

    public static final String FUNC_GETSUPERBLOCKTIMESTAMP = "getSuperblockTimestamp";

    public static final String FUNC_GETSUPERBLOCKPREVTIMESTAMP = "getSuperblockPrevTimestamp";

    public static final String FUNC_GETSUPERBLOCKLASTHASH = "getSuperblockLastHash";

    public static final String FUNC_GETSUPERBLOCKPARENTID = "getSuperblockParentId";

    public static final String FUNC_GETSUPERBLOCKACCUMULATEDWORK = "getSuperblockAccumulatedWork";

    public static final String FUNC_GETSUPERBLOCKSTATUS = "getSuperblockStatus";

    public static final String FUNC_GETINDEXNEXTSUPERBLOCK = "getIndexNextSuperblock";

    public static final String FUNC_MAKEMERKLE = "makeMerkle";

    public static final String FUNC_ISAPPROVED = "isApproved";

    public static final String FUNC_GETCHAINHEIGHT = "getChainHeight";

    public static final String FUNC_GETSUPERBLOCKLOCATOR = "getSuperblockLocator";

    public static final String FUNC_GETSUPERBLOCKAT = "getSuperblockAt";

    public static final Event NEWSUPERBLOCK_EVENT = new Event("NewSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event APPROVEDSUPERBLOCK_EVENT = new Event("ApprovedSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event CHALLENGESUPERBLOCK_EVENT = new Event("ChallengeSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SEMIAPPROVEDSUPERBLOCK_EVENT = new Event("SemiApprovedSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event INVALIDSUPERBLOCK_EVENT = new Event("InvalidSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event ERRORSUPERBLOCK_EVENT = new Event("ErrorSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event VERIFYTRANSACTION_EVENT = new Event("VerifyTransaction", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event RELAYTRANSACTION_EVENT = new Event("RelayTransaction", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("32001", "0x6c774f44dfecdcd68ec26c15ac2f9fdd9a34395f");
    }

    @Deprecated
    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Uint256> queryMerkleRootHashesCost() {
        final Function function = new Function(FUNC_QUERYMERKLEROOTHASHESCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Address> trustedClaimManager() {
        final Function function = new Function(FUNC_TRUSTEDCLAIMMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> bestSuperblock() {
        final Function function = new Function(FUNC_BESTSUPERBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> queryBlockHeaderCost() {
        final Function function = new Function(FUNC_QUERYBLOCKHEADERCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minProposalDeposit() {
        final Function function = new Function(FUNC_MINPROPOSALDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> respondBlockHeaderCost() {
        final Function function = new Function(FUNC_RESPONDBLOCKHEADERCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> superblockCost() {
        final Function function = new Function(FUNC_SUPERBLOCKCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minChallengeDeposit() {
        final Function function = new Function(FUNC_MINCHALLENGEDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> respondMerkleRootHashesCost() {
        final Function function = new Function(FUNC_RESPONDMERKLEROOTHASHESCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minReward() {
        final Function function = new Function(FUNC_MINREWARD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> verifySuperblockCost() {
        final Function function = new Function(FUNC_VERIFYSUPERBLOCKCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> bestSuperblockAccumulatedWork() {
        final Function function = new Function(FUNC_BESTSUPERBLOCKACCUMULATEDWORK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> challengeCost() {
        final Function function = new Function(FUNC_CHALLENGECOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public List<NewSuperblockEventResponse> getNewSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(NEWSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<NewSuperblockEventResponse> responses = new ArrayList<NewSuperblockEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            NewSuperblockEventResponse typedResponse = new NewSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = new Bytes32((byte[]) eventValues.getNonIndexedValues().get(0).getValue());
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewSuperblockEventResponse> newSuperblockEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewSuperblockEventResponse>() {
            @Override
            public NewSuperblockEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(NEWSUPERBLOCK_EVENT, log);
                NewSuperblockEventResponse typedResponse = new NewSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = new Bytes32((byte[]) eventValues.getNonIndexedValues().get(0).getValue());
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<NewSuperblockEventResponse> newSuperblockEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWSUPERBLOCK_EVENT));
        return newSuperblockEventObservable(filter);
    }

    public List<ApprovedSuperblockEventResponse> getApprovedSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVEDSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<ApprovedSuperblockEventResponse> responses = new ArrayList<ApprovedSuperblockEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovedSuperblockEventResponse typedResponse = new ApprovedSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = new Bytes32((byte[]) eventValues.getNonIndexedValues().get(0).getValue());
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApprovedSuperblockEventResponse> approvedSuperblockEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, ApprovedSuperblockEventResponse>() {
            @Override
            public ApprovedSuperblockEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVEDSUPERBLOCK_EVENT, log);
                ApprovedSuperblockEventResponse typedResponse = new ApprovedSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = new Bytes32((byte[]) eventValues.getNonIndexedValues().get(0).getValue());
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<ApprovedSuperblockEventResponse> approvedSuperblockEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVEDSUPERBLOCK_EVENT));
        return approvedSuperblockEventObservable(filter);
    }

    public List<ChallengeSuperblockEventResponse> getChallengeSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CHALLENGESUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<ChallengeSuperblockEventResponse> responses = new ArrayList<ChallengeSuperblockEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ChallengeSuperblockEventResponse typedResponse = new ChallengeSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = new Bytes32((byte[]) eventValues.getNonIndexedValues().get(0).getValue());
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ChallengeSuperblockEventResponse> challengeSuperblockEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, ChallengeSuperblockEventResponse>() {
            @Override
            public ChallengeSuperblockEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(CHALLENGESUPERBLOCK_EVENT, log);
                ChallengeSuperblockEventResponse typedResponse = new ChallengeSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = new Bytes32((byte[]) eventValues.getNonIndexedValues().get(0).getValue());
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<ChallengeSuperblockEventResponse> challengeSuperblockEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHALLENGESUPERBLOCK_EVENT));
        return challengeSuperblockEventObservable(filter);
    }

    public List<SemiApprovedSuperblockEventResponse> getSemiApprovedSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SEMIAPPROVEDSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<SemiApprovedSuperblockEventResponse> responses = new ArrayList<SemiApprovedSuperblockEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SemiApprovedSuperblockEventResponse typedResponse = new SemiApprovedSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = new Bytes32((byte[]) eventValues.getNonIndexedValues().get(0).getValue());
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SemiApprovedSuperblockEventResponse> semiApprovedSuperblockEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, SemiApprovedSuperblockEventResponse>() {
            @Override
            public SemiApprovedSuperblockEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SEMIAPPROVEDSUPERBLOCK_EVENT, log);
                SemiApprovedSuperblockEventResponse typedResponse = new SemiApprovedSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = new Bytes32((byte[]) eventValues.getNonIndexedValues().get(0).getValue());
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<SemiApprovedSuperblockEventResponse> semiApprovedSuperblockEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SEMIAPPROVEDSUPERBLOCK_EVENT));
        return semiApprovedSuperblockEventObservable(filter);
    }

    public List<InvalidSuperblockEventResponse> getInvalidSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(INVALIDSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<InvalidSuperblockEventResponse> responses = new ArrayList<InvalidSuperblockEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            InvalidSuperblockEventResponse typedResponse = new InvalidSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = new Bytes32((byte[]) eventValues.getNonIndexedValues().get(0).getValue());
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<InvalidSuperblockEventResponse> invalidSuperblockEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, InvalidSuperblockEventResponse>() {
            @Override
            public InvalidSuperblockEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(INVALIDSUPERBLOCK_EVENT, log);
                InvalidSuperblockEventResponse typedResponse = new InvalidSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = new Bytes32((byte[]) eventValues.getNonIndexedValues().get(0).getValue());
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<InvalidSuperblockEventResponse> invalidSuperblockEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVALIDSUPERBLOCK_EVENT));
        return invalidSuperblockEventObservable(filter);
    }

    public List<ErrorSuperblockEventResponse> getErrorSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ERRORSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<ErrorSuperblockEventResponse> responses = new ArrayList<ErrorSuperblockEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ErrorSuperblockEventResponse typedResponse = new ErrorSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = new Bytes32((byte[]) eventValues.getNonIndexedValues().get(0).getValue());
            typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ErrorSuperblockEventResponse> errorSuperblockEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, ErrorSuperblockEventResponse>() {
            @Override
            public ErrorSuperblockEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ERRORSUPERBLOCK_EVENT, log);
                ErrorSuperblockEventResponse typedResponse = new ErrorSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = new Bytes32((byte[]) eventValues.getNonIndexedValues().get(0).getValue());
                typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<ErrorSuperblockEventResponse> errorSuperblockEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ERRORSUPERBLOCK_EVENT));
        return errorSuperblockEventObservable(filter);
    }

    public List<VerifyTransactionEventResponse> getVerifyTransactionEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(VERIFYTRANSACTION_EVENT, transactionReceipt);
        ArrayList<VerifyTransactionEventResponse> responses = new ArrayList<VerifyTransactionEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            VerifyTransactionEventResponse typedResponse = new VerifyTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = new Bytes32((byte[]) eventValues.getNonIndexedValues().get(0).getValue());
            typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<VerifyTransactionEventResponse> verifyTransactionEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, VerifyTransactionEventResponse>() {
            @Override
            public VerifyTransactionEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(VERIFYTRANSACTION_EVENT, log);
                VerifyTransactionEventResponse typedResponse = new VerifyTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = new Bytes32((byte[]) eventValues.getNonIndexedValues().get(0).getValue());
                typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<VerifyTransactionEventResponse> verifyTransactionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VERIFYTRANSACTION_EVENT));
        return verifyTransactionEventObservable(filter);
    }

    public List<RelayTransactionEventResponse> getRelayTransactionEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(RELAYTRANSACTION_EVENT, transactionReceipt);
        ArrayList<RelayTransactionEventResponse> responses = new ArrayList<RelayTransactionEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RelayTransactionEventResponse typedResponse = new RelayTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = new Bytes32((byte[]) eventValues.getNonIndexedValues().get(0).getValue());
            typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RelayTransactionEventResponse> relayTransactionEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, RelayTransactionEventResponse>() {
            @Override
            public RelayTransactionEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(RELAYTRANSACTION_EVENT, log);
                RelayTransactionEventResponse typedResponse = new RelayTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = new Bytes32((byte[]) eventValues.getNonIndexedValues().get(0).getValue());
                typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Observable<RelayTransactionEventResponse> relayTransactionEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RELAYTRANSACTION_EVENT));
        return relayTransactionEventObservable(filter);
    }

    public RemoteCall<TransactionReceipt> setClaimManager(Address _claimManager) {
        final Function function = new Function(
                FUNC_SETCLAIMMANAGER, 
                Arrays.<Type>asList(_claimManager), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> initialize(Bytes32 _blocksMerkleRoot, Uint256 _accumulatedWork, Uint256 _timestamp, Uint256 _prevTimestamp, Bytes32 _lastHash, Uint32 _lastBits, Bytes32 _parentId, Uint32 _blockHeight) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(_blocksMerkleRoot, _accumulatedWork, _timestamp, _prevTimestamp, _lastHash, _lastBits, _parentId, _blockHeight), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> propose(Bytes32 _blocksMerkleRoot, Uint256 _accumulatedWork, Uint256 _timestamp, Uint256 _prevTimestamp, Bytes32 _lastHash, Uint32 _lastBits, Bytes32 _parentId, Uint32 _blockHeight, Address submitter) {
        final Function function = new Function(
                FUNC_PROPOSE, 
                Arrays.<Type>asList(_blocksMerkleRoot, _accumulatedWork, _timestamp, _prevTimestamp, _lastHash, _lastBits, _parentId, _blockHeight, submitter), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> confirm(Bytes32 _superblockHash, Address _validator) {
        final Function function = new Function(
                FUNC_CONFIRM, 
                Arrays.<Type>asList(_superblockHash, _validator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> challenge(Bytes32 _superblockHash, Address _challenger) {
        final Function function = new Function(
                FUNC_CHALLENGE, 
                Arrays.<Type>asList(_superblockHash, _challenger), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> semiApprove(Bytes32 _superblockHash, Address _validator) {
        final Function function = new Function(
                FUNC_SEMIAPPROVE, 
                Arrays.<Type>asList(_superblockHash, _validator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> invalidate(Bytes32 _superblockHash, Address _validator) {
        final Function function = new Function(
                FUNC_INVALIDATE, 
                Arrays.<Type>asList(_superblockHash, _validator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> relayTx(DynamicBytes _txBytes, Uint256 _txIndex, DynamicArray<Uint256> _txSiblings, DynamicBytes _syscoinBlockHeader, Uint256 _syscoinBlockIndex, DynamicArray<Uint256> _syscoinBlockSiblings, Bytes32 _superblockHash, Address _untrustedTargetContract) {
        final Function function = new Function(
                FUNC_RELAYTX, 
                Arrays.<Type>asList(_txBytes, _txIndex, _txSiblings, _syscoinBlockHeader, _syscoinBlockIndex, _syscoinBlockSiblings, _superblockHash, _untrustedTargetContract), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> verifyTx(DynamicBytes _txBytes, Uint256 _txIndex, DynamicArray<Uint256> _siblings, DynamicBytes _txBlockHeaderBytes, Bytes32 _txsuperblockHash) {
        final Function function = new Function(
                FUNC_VERIFYTX, 
                Arrays.<Type>asList(_txBytes, _txIndex, _siblings, _txBlockHeaderBytes, _txsuperblockHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Bytes32> calcSuperblockHash(Bytes32 _blocksMerkleRoot, Uint256 _accumulatedWork, Uint256 _timestamp, Uint256 _prevTimestamp, Bytes32 _lastHash, Uint32 _lastBits, Bytes32 _parentId, Uint32 _blockHeight) {
        final Function function = new Function(FUNC_CALCSUPERBLOCKHASH, 
                Arrays.<Type>asList(_blocksMerkleRoot, _accumulatedWork, _timestamp, _prevTimestamp, _lastHash, _lastBits, _parentId, _blockHeight), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getBestSuperblock() {
        final Function function = new Function(FUNC_GETBESTSUPERBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple10<Bytes32, Uint256, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32>> getSuperblock(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCK, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint32>() {}));
        return new RemoteCall<Tuple10<Bytes32, Uint256, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32>>(
                new Callable<Tuple10<Bytes32, Uint256, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32>>() {
                    @Override
                    public Tuple10<Bytes32, Uint256, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple10<Bytes32, Uint256, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32>(
                                (Bytes32) results.get(0), 
                                (Uint256) results.get(1), 
                                (Uint256) results.get(2), 
                                (Uint256) results.get(3), 
                                (Bytes32) results.get(4), 
                                (Uint32) results.get(5), 
                                (Bytes32) results.get(6), 
                                (Address) results.get(7), 
                                (Uint8) results.get(8), 
                                (Uint32) results.get(9));
                    }
                });
    }

    public RemoteCall<Uint32> getSuperblockHeight(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKHEIGHT, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint32> getSuperblockIndex(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKINDEX, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSuperblockAncestors(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKANCESTORS, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSuperblockMerkleRoot(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKMERKLEROOT, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getSuperblockTimestamp(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKTIMESTAMP, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getSuperblockPrevTimestamp(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKPREVTIMESTAMP, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSuperblockLastHash(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKLASTHASH, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSuperblockParentId(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKPARENTID, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getSuperblockAccumulatedWork(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKACCUMULATEDWORK, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint8> getSuperblockStatus(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKSTATUS, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint32> getIndexNextSuperblock() {
        final Function function = new Function(FUNC_GETINDEXNEXTSUPERBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> makeMerkle(DynamicArray<Bytes32> hashes) {
        final Function function = new Function(FUNC_MAKEMERKLE, 
                Arrays.<Type>asList(hashes), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> isApproved(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_ISAPPROVED, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getChainHeight() {
        final Function function = new Function(FUNC_GETCHAINHEIGHT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<StaticArray9<Bytes32>> getSuperblockLocator() {
        final Function function = new Function(FUNC_GETSUPERBLOCKLOCATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray9<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSuperblockAt(Uint256 _height) {
        final Function function = new Function(FUNC_GETSUPERBLOCKAT, 
                Arrays.<Type>asList(_height), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    @Deprecated
    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SyscoinSuperblocks(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SyscoinSuperblocks(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SyscoinSuperblocks(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SyscoinSuperblocks(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class NewSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address who;
    }

    public static class ApprovedSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address who;
    }

    public static class ChallengeSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address who;
    }

    public static class SemiApprovedSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address who;
    }

    public static class InvalidSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address who;
    }

    public static class ErrorSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Uint256 err;
    }

    public static class VerifyTransactionEventResponse {
        public Log log;

        public Bytes32 txHash;

        public Uint256 returnCode;
    }

    public static class RelayTransactionEventResponse {
        public Log log;

        public Bytes32 txHash;

        public Uint256 returnCode;
    }
}
