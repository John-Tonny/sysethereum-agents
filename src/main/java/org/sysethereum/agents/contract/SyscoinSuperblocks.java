package org.sysethereum.agents.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple9;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.4.
 */
@SuppressWarnings("rawtypes")
public class SyscoinSuperblocks extends Contract {
    private static final String BINARY = "0x608060405234801561001057600080fd5b506126ca806100206000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806374205786116100c3578063c1f67ab31161007c578063c1f67ab3146106f8578063c8bd776814610724578063cae0581e14610963578063ed860976146109a4578063f06d520d146109e5578063f09a4016146109ed5761014d565b806374205786146105bc578063828fa8b4146105e857806395b45ee7146106295780639e20c80314610655578063a76a9b0f146106be578063c0dde98b146106db5761014d565b8063455e616611610115578063455e61661461044657806355e018ce1461044e5780635b5728121461046b5780635ec0aedd146104735780636823c56b1461047b5780636e5b70711461051f5761014d565b8063155ee89414610152578063244430381461017657806327426f75146103c75780632da8cffd146103f35780632e40019114610410575b600080fd5b61015a610a1d565b604080516001600160a01b039092168252519081900360200190f35b6103b5600480360360e081101561018c57600080fd5b810190602081018135600160201b8111156101a657600080fd5b8201836020820111156101b857600080fd5b803590602001918460018302840111600160201b831117156101d957600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092958435959094909350604081019250602001359050600160201b81111561023357600080fd5b82018360208201111561024557600080fd5b803590602001918460208302840111600160201b8311171561026657600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156102b557600080fd5b8201836020820111156102c757600080fd5b803590602001918460018302840111600160201b831117156102e857600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092958435959094909350604081019250602001359050600160201b81111561034257600080fd5b82018360208201111561035457600080fd5b803590602001918460208302840111600160201b8311171561037557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505091359250610a2c915050565b60408051918252519081900360200190f35b6103b5600480360360408110156103dd57600080fd5b50803590602001356001600160a01b0316610bbc565b6103b56004803603602081101561040957600080fd5b5035610cf4565b61042d6004803603602081101561042657600080fd5b5035610d09565b6040805163ffffffff9092168252519081900360200190f35b6103b5610d2b565b6103b56004803603602081101561046457600080fd5b5035610d37565b6103b5610d4c565b61015a610d71565b6103b56004803603602081101561049157600080fd5b810190602081018135600160201b8111156104ab57600080fd5b8201836020820111156104bd57600080fd5b803590602001918460018302840111600160201b831117156104de57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610d80945050505050565b61053c6004803603602081101561053557600080fd5b5035610d98565b604051808a81526020018981526020018881526020018781526020018663ffffffff1663ffffffff168152602001858152602001846001600160a01b03166001600160a01b0316815260200183600581111561059457fe5b60ff16815263ffffffff90921660208301525060408051918290030198509650505050505050f35b6103b5600480360360408110156105d257600080fd5b50803590602001356001600160a01b0316610dfd565b6103b5600480360360c08110156105fe57600080fd5b5080359060208101359060408101359060608101359063ffffffff6080820135169060a00135610f33565b6103b56004803603604081101561063f57600080fd5b50803590602001356001600160a01b0316610f8b565b6106a5600480360360e081101561066b57600080fd5b50803590602081013590604081013590606081013590608081013563ffffffff169060a08101359060c001356001600160a01b0316611185565b6040805192835260208301919091528051918290030190f35b6103b5600480360360208110156106d457600080fd5b5035611421565b6103b5600480360360208110156106f157600080fd5b5035611436565b6103b56004803603604081101561070e57600080fd5b50803590602001356001600160a01b031661146a565b6103b5600480360360e081101561073a57600080fd5b810190602081018135600160201b81111561075457600080fd5b82018360208201111561076657600080fd5b803590602001918460018302840111600160201b8311171561078757600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092958435959094909350604081019250602001359050600160201b8111156107e157600080fd5b8201836020820111156107f357600080fd5b803590602001918460208302840111600160201b8311171561081457600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561086357600080fd5b82018360208201111561087557600080fd5b803590602001918460018302840111600160201b8311171561089657600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092958435959094909350604081019250602001359050600160201b8111156108f057600080fd5b82018360208201111561090257600080fd5b803590602001918460208302840111600160201b8311171561092357600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050913592506115ed915050565b6109806004803603602081101561097957600080fd5b50356116cb565b6040518082600581111561099057fe5b60ff16815260200191505060405180910390f35b6106a5600480360360c08110156109ba57600080fd5b5080359060208101359060408101359060608101359063ffffffff6080820135169060a001356116ea565b6103b5611843565b610a1b60048036036040811015610a0357600080fd5b506001600160a01b0381358116916020013516611849565b005b6036546001600160a01b031681565b600080610a3e868686868d8d8d611974565b90508015610b6d57600080600080600080610a588f6119bc565b939a50919850929650919450925090508315610ab857604080518881526020810186905281517f4e64138cc499eb1adf9edff9ef69bd45c56ac4bfd307540952e4c9d51eab55c1929181900390910190a183975050505050505050610bb1565b60355460008a8152603360205260408082206005015481516315eade2b60e31b8152600481018c9052602481018b90526001600160a01b038a811660448301529182166064820152868216608482015263ffffffff881660a482015260ff861660c4820152915193169263af56f1589260e48084019391929182900301818387803b158015610b4657600080fd5b505af1158015610b5a573d6000803e3d6000fd5b5050505085975050505050505050610bb1565b604080516000815261753a602082015281517f4e64138cc499eb1adf9edff9ef69bd45c56ac4bfd307540952e4c9d51eab55c1929181900390910190a161753a9150505b979650505050505050565b6036546000906001600160a01b03163314610c04576040805184815261c39660208201528151600080516020612648833981519152929181900390910190a15061c396610cee565b60008381526033602052604090206002600582810154600160e01b900460ff1690811115610c2e57fe5b14158015610c5657506001600582810154600160e01b900460ff1690811115610c5357fe5b14155b15610c90576040805185815261c36460208201528151600080516020612648833981519152929181900390910190a161c364915050610cee565b60058101805460ff60e01b1916600360e01b179055604080518581526001600160a01b038516602082015281517f87f54f5eb3dd119fe71af0915af693e64a5bfd4acaa19a6c944c47cff8eec9e6929181900390910190a160009150505b92915050565b60009081526033602052604090206001015490565b600090815260336020526040902060050154600160c01b900463ffffffff1690565b6729a2241af62c000081565b60009081526033602052604090206004015490565b603454600090815260336020526040902060050154600160c01b900463ffffffff1690565b6035546001600160a01b031681565b6044810151600090610d9181611a53565b9392505050565b600090815260336020526040902080546001820154600283015460038401546005850154600490950154939592949193909263ffffffff600160a01b84048116936001600160a01b0381169260ff600160e01b83041692600160c01b90920490911690565b6036546000906001600160a01b03163314610e45576040805184815261c39660208201528151600080516020612648833981519152929181900390910190a15061c396610cee565b60008381526033602052604090206002600582810154600160e01b900460ff1690811115610e6f57fe5b14158015610e9757506003600582810154600160e01b900460ff1690811115610e9457fe5b14155b15610ed1576040805185815261c36460208201528151600080516020612648833981519152929181900390910190a161c364915050610cee565b60058101805460ff60e01b1916600560e01b179055604080518581526001600160a01b038516602082015281517f64297372062dfcb21d6f7385f68d4656e993be2bb674099e3de73128d4911a91929181900390910190a15060009392505050565b60408051602080820198909852808201969096526060860194909452608085019290925260e01b6001600160e01b03191660a084015260a4808401919091528151808403909101815260c49092019052805191012090565b6036546000906001600160a01b03163314610fd3576040805184815261c39660208201528151600080516020612648833981519152929181900390910190a15061c396610cee565b60008381526033602052604090206001600582810154600160e01b900460ff1690811115610ffd57fe5b1415801561102557506003600582810154600160e01b900460ff169081111561102257fe5b14155b1561105f576040805185815261c36460208201528151600080516020612648833981519152929181900390910190a161c364915050610cee565b611067610d4c565b6005820154600160c01b900463ffffffff16116110b3576040805185815261c3fa60208201528151600080516020612648833981519152929181900390910190a161c3fa915050610cee565b600480820154600090815260336020526040902090600582810154600160e01b900460ff16908111156110e257fe5b1461111d576040805186815261c37860208201528151600080516020612648833981519152929181900390910190a161c37892505050610cee565b60058201805460ff60e01b1916600160e21b1790556034859055604080518681526001600160a01b038616602082015281517ff2dbbf0abb1ab1870a5e4d02746747c91d167c855255440b573ba3b5529dc901929181900390910190a1506000949350505050565b60365460009081906001600160a01b031633146111d457604080516000815261c39660208201528151600080516020612648833981519152929181900390910190a15061c39690506000611415565b60008481526033602052604090206003600582810154600160e01b900460ff16908111156111fe57fe5b1415801561122657506004600582810154600160e01b900460ff169081111561122357fe5b14155b1561129f576000805160206126488339815191528582600501601c9054906101000a900460ff16600581111561125857fe5b6040805192835261c3789190910160208301528051918290030190a1600581810154600160e01b900460ff169081111561128e57fe5b61c378019250600091506114159050565b6112a7610d4c565b6005820154600160c01b900463ffffffff1610156112f8576040805186815261c3fa60208201528151600080516020612648833981519152929181900390910190a15061c3fa915060009050611415565b60006113088b8b8b8b8b8b610f33565b6000818152603360205260408120919250600582810154600160e01b900460ff169081111561133357fe5b14156113a4578b815560018082018c9055600282018b9055600382018a905560048201889055600580850154908301805463ffffffff8c8116600160a01b0263ffffffff60a01b19600160c01b95869004831690960190911690930263ffffffff60c01b1990911617929092161790555b60058101805460ff60e01b1916600160e01b176001600160a01b0319166001600160a01b03881690811790915560408051848152602081019290925280517f64951c9008bba9f4663c12662e7a9b6412a7c4757869fdac09285564ae923fa19281900390910190a150600093509150505b97509795505050505050565b60009081526033602052604090206002015490565b6034546000905b8261144782610d09565b63ffffffff161115610cee5760009081526033602052604090206004015461143d565b6036546000906001600160a01b031633146114b2576040805184815261c39660208201528151600080516020612648833981519152929181900390910190a15061c396610cee565b60008381526033602052604090206001600582810154600160e01b900460ff16908111156114dc57fe5b1415801561150457506002600582810154600160e01b900460ff169081111561150157fe5b14155b1561153e576040805185815261c36460208201528151600080516020612648833981519152929181900390910190a161c364915050610cee565b60058101546001600160a01b038481169116141561158b576040805185815261c38760208201528151600080516020612648833981519152929181900390910190a161c387915050610cee565b60058101805460ff60e01b1916600160e11b179055604080518581526001600160a01b038516602082015281517f09cdaca254aa177f759fe7a0968fe696ee9baf7d2a1d4714ed24b83d1f09518e929181900390910190a15060009392505050565b6000806115ff868686868d8d8d611974565b905080156116865760008060355460408051636cde8d6f60e01b815263ffffffff8516600482015233602482015290516001600160a01b0390921691636cde8d6f9160448082019260009290919082900301818387803b15801561166257600080fd5b505af1158015611676573d6000803e3d6000fd5b5050505060009350505050610bb1565b60408051617544815290517f52fd0c7e41cb237ece28ba61808cab7bb72873b2dba5b827c5b65bb092102d379181900360200190a15061754498975050505050505050565b600090815260336020526040902060050154600160e01b900460ff1690565b6034546000908190156116fc57600080fd5b821561170757600080fd5b6000611717898989898989610f33565b6000818152603360205260408120919250600582810154600160e01b900460ff169081111561174257fe5b1461174c57600080fd5b89815560018101899055600281018890556003810187905560048101859055600581018054600160c01b336001600160a01b0319909216821763ffffffff60c01b19161763ffffffff60a01b1916600160a01b63ffffffff8a16021760ff60e01b1916600160e21b1790915560408051848152602081019290925280517f64951c9008bba9f4663c12662e7a9b6412a7c4757869fdac09285564ae923fa19281900390910190a160348290556040805183815233602082015281517ff2dbbf0abb1ab1870a5e4d02746747c91d167c855255440b573ba3b5529dc901929181900390910190a1506000999098509650505050505050565b60345490565b600054610100900460ff16806118625750611862611b7d565b80611870575060005460ff16155b6118ab5760405162461bcd60e51b815260040180806020018281038252602e815260200180612668602e913960400191505060405180910390fd5b600054610100900460ff161580156118d6576000805460ff1961ff0019909116610100171660011790555b6035546001600160a01b03161580156118f757506001600160a01b03831615155b61190057600080fd5b603580546001600160a01b0319166001600160a01b03858116919091179091556036541615801561193957506001600160a01b03821615155b61194257600080fd5b603680546001600160a01b0319166001600160a01b038416179055801561196f576000805461ff00191690555b505050565b60008481526033602052604081205461199661198f8a611b83565b8989611d1c565b146119a357506000610bb1565b6119b08484848b89611f2b565b98975050505050505050565b60008080808080808080808080806119d48e82611fb4565b935063ffffffff841661740714611a0157506127ba9b50949950919750919550919350909150611a4a9050565b611a0c8e6004611ff0565b9050611a188e82612072565b809750819650829a50839950849b505050505050600087868885878595509c509c509c509c509c509c50505050505050505b91939550919395565b60405160009060ff8316815382601e1a600182015382601d1a600282015382601c1a600382015382601b1a600482015382601a1a60058201538260191a60068201538260181a60078201538260171a60088201538260161a60098201538260151a600a8201538260141a600b8201538260131a600c8201538260121a600d8201538260111a600e8201538260101a600f82015382600f1a601082015382600e1a601182015382600d1a601282015382600c1a601382015382600b1a601482015382600a1a60158201538260091a60168201538260081a60178201538260071a60188201538260061a60198201538260051a601a8201538260041a601b8201538260031a601c8201538260021a601d8201538260011a601e8201538260001a601f8201535192915050565b303b1590565b6000610cee600280846040516020018082805190602001908083835b60208310611bbe5780518252601f199092019160209182019101611b9f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310611c215780518252601f199092019160209182019101611c02565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015611c60573d6000803e3d6000fd5b5050506040513d6020811015611c7557600080fd5b50516040805160208181019390935281518082038401815290820191829052805190928291908401908083835b60208310611cc15780518252601f199092019160209182019101611ca2565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015611d00573d6000803e3d6000fd5b5050506040513d6020811015611d1557600080fd5b5051611a53565b8051600090815b81811015611d6657611d47848281518110611d3a57fe5b6020026020010151611a53565b848281518110611d5357fe5b6020908102919091010152600101611d23565b50600080611d7387611a53565b90505b82821015611f22576000858381518110611d8c57fe5b6020026020010151905060008060028981611da357fe5b0660011415611db6575081905082611dbc565b50829050815b600280838360405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310611e165780518252601f199092019160209182019101611df7565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015611e55573d6000803e3d6000fd5b5050506040513d6020811015611e6a57600080fd5b50516040805160208181019390935281518082038401815290820191829052805190928291908401908083835b60208310611eb65780518252601f199092019160209182019101611e97565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015611ef5573d6000803e3d6000fd5b5050506040513d6020811015611f0a57600080fd5b50519350600289049850600185019450505050611d76565b610bb181611a53565b600080611f3787611b83565b9050865160401415611f895760408051828152614e5c602082015281517f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd929181900390910190a16000915050611fab565b611f968187878787612116565b60011415611fa5579050611fab565b60009150505b95945050505050565b6000816020840101516040518160031a60008201538160021a60018201538160011a60028201538160001a60038201535160e01c949350505050565b6000806000611fff85856121dc565b945091508161202f5761201285856121dc565b945091508161202057600080fd5b61202a85856121dc565b945091505b6064821061203c57600080fd5b60005b828110156120685760248501945061205786866121dc565b81016004019550915060010161203f565b5092949350505050565b600080808080808080808080806120898e8e6121dc565b9d509050600a811061209a57600080fd5b60005b818110156120ff5760088e019d506120b58f8f6121dc565b9e5097506120c38f8f61228f565b6120d4579c87019c600096506120f7565b60018e019d506120e48f8f6122be565b939a5090985090965090945092506120ff565b60010161209d565b50949d929c50929a50919850909650945050505050565b6000612121826123e9565b61216a5760408051878152614e3e602082015281517f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd929181900390910190a150614e3e611fab565b600061217584610d80565b905080612183888888611d1c565b146121cf5760408051888152614e52602082015281517f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd929181900390910190a1614e52915050611fab565b5060019695505050505050565b60008060008484815181106121ed57fe5b01602001516001949094019360f81c905060fd8110156122145760ff169150829050612288565b8060ff1660fd141561223a5761222c85856010612408565b846002019250925050612288565b8060ff1660fe14156122605761225285856020612408565b846004019250925050612288565b8060ff1660ff14156122865761227885856040612408565b846008019250925050612288565b505b9250929050565b8151600090603560f91b908490849081106122a657fe5b01602001516001600160f81b03191614905092915050565b60008060008060008060008060008060006122d98d8d61244a565b9c509050600460ff8216146122ed57600080fd5b6122f78d8d61247c565b95508060ff168c019b5061230b8d8d61244a565b9c509050600860ff82161461231f57600080fd5b6123298d8d61250b565b67ffffffffffffffff1692508060ff168c019b506123478d8d61244a565b9c509050601460ff82161461235b57600080fd5b6123658d8d61263f565b94508060ff168c019b506123798d8d61244a565b9c509050600160ff82161461238d57600080fd5b8c8c8151811061239957fe5b016020015160ff82169c909c019b60f81c91506123b68d8d61244a565b9c509050601460ff8216146123ca57600080fd5b6123d48d8d61263f565b929d949c50949a509850965090945050505050565b600060046123f6836116cb565b600581111561240157fe5b1492915050565b6000805b60088304811015612442578060080260020a858286018151811061242c57fe5b016020015160f81c02919091019060010161240c565b509392505050565b6000808351831061245a57600080fd5b83838151811061246657fe5b016020015160f81c915050600182019250929050565b600082828151811061248a57fe5b602001015160f81c60f81b60f81c60ff166301000000028383600101815181106124b057fe5b602001015160f81c60f81b60f81c60ff1662010000028484600201815181106124d557fe5b602001015160f81c60f81b60f81c60ff16610100028585600301815181106124f957fe5b016020015160f81c0101019392505050565b600082828151811061251957fe5b602001015160f81c60f81b60f81c60ff166701000000000000000283836001018151811061254357fe5b602001015160f81c60f81b60f81c60ff1666010000000000000284846002018151811061256c57fe5b602001015160f81c60f81b60f81c60ff16650100000000000285856003018151811061259457fe5b602001015160f81c60f81b60f81c60ff16600160201b028686600401815181106125ba57fe5b602001015160f81c60f81b60f81c60ff166301000000028787600501815181106125e057fe5b602001015160f81c60f81b60f81c60ff16620100000288886006018151811061260557fe5b602001015160f81c60f81b60f81c60ff166101000289896007018151811061262957fe5b016020015160f81c010101010101019392505050565b01601401519056fea57c1ba4cf2c89b3558cfeeca4339e04551f0fc1a12cf63f1923c2eed8a5be8b436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564a265627a7a72315820d4847638e91c81f1ab3feb634f903bd5a4f3a1c82a18c2b2703916da9bfcbb8364736f6c634300050d0032";

    public static final String FUNC_MINPROPOSALDEPOSIT = "minProposalDeposit";

    public static final String FUNC_SYSCOINERC20MANAGER = "syscoinERC20Manager";

    public static final String FUNC_TRUSTEDCLAIMMANAGER = "trustedClaimManager";

    public static final String FUNC_INIT = "init";

    public static final String FUNC_GETHEADERMERKLEROOT = "getHeaderMerkleRoot";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_PROPOSE = "propose";

    public static final String FUNC_CONFIRM = "confirm";

    public static final String FUNC_CHALLENGE = "challenge";

    public static final String FUNC_SEMIAPPROVE = "semiApprove";

    public static final String FUNC_INVALIDATE = "invalidate";

    public static final String FUNC_RELAYTX = "relayTx";

    public static final String FUNC_CHALLENGECANCELTRANSFER = "challengeCancelTransfer";

    public static final String FUNC_CALCSUPERBLOCKHASH = "calcSuperblockHash";

    public static final String FUNC_GETBESTSUPERBLOCK = "getBestSuperblock";

    public static final String FUNC_GETSUPERBLOCK = "getSuperblock";

    public static final String FUNC_GETSUPERBLOCKHEIGHT = "getSuperblockHeight";

    public static final String FUNC_GETSUPERBLOCKTIMESTAMP = "getSuperblockTimestamp";

    public static final String FUNC_GETSUPERBLOCKMEDIANTIMESTAMP = "getSuperblockMedianTimestamp";

    public static final String FUNC_GETSUPERBLOCKPARENTID = "getSuperblockParentId";

    public static final String FUNC_GETSUPERBLOCKSTATUS = "getSuperblockStatus";

    public static final String FUNC_GETCHAINHEIGHT = "getChainHeight";

    public static final String FUNC_GETSUPERBLOCKAT = "getSuperblockAt";

    public static final Event APPROVEDSUPERBLOCK_EVENT = new Event("ApprovedSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event CHALLENGECANCELTRANSFERREQUEST_EVENT = new Event("ChallengeCancelTransferRequest", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event CHALLENGESUPERBLOCK_EVENT = new Event("ChallengeSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event ERRORSUPERBLOCK_EVENT = new Event("ErrorSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event INVALIDSUPERBLOCK_EVENT = new Event("InvalidSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event NEWSUPERBLOCK_EVENT = new Event("NewSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event RELAYTRANSACTION_EVENT = new Event("RelayTransaction", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SEMIAPPROVEDSUPERBLOCK_EVENT = new Event("SemiApprovedSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event VERIFYTRANSACTION_EVENT = new Event("VerifyTransaction", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("4", "0xd745BC855e72e8535a929B13Aaa630894d43A2bd");
    }

    @Deprecated
    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovedSuperblockEventResponse> getApprovedSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVEDSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<ApprovedSuperblockEventResponse> responses = new ArrayList<ApprovedSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovedSuperblockEventResponse typedResponse = new ApprovedSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovedSuperblockEventResponse> approvedSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovedSuperblockEventResponse>() {
            @Override
            public ApprovedSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVEDSUPERBLOCK_EVENT, log);
                ApprovedSuperblockEventResponse typedResponse = new ApprovedSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovedSuperblockEventResponse> approvedSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVEDSUPERBLOCK_EVENT));
        return approvedSuperblockEventFlowable(filter);
    }

    public List<ChallengeCancelTransferRequestEventResponse> getChallengeCancelTransferRequestEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHALLENGECANCELTRANSFERREQUEST_EVENT, transactionReceipt);
        ArrayList<ChallengeCancelTransferRequestEventResponse> responses = new ArrayList<ChallengeCancelTransferRequestEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChallengeCancelTransferRequestEventResponse typedResponse = new ChallengeCancelTransferRequestEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ChallengeCancelTransferRequestEventResponse> challengeCancelTransferRequestEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ChallengeCancelTransferRequestEventResponse>() {
            @Override
            public ChallengeCancelTransferRequestEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHALLENGECANCELTRANSFERREQUEST_EVENT, log);
                ChallengeCancelTransferRequestEventResponse typedResponse = new ChallengeCancelTransferRequestEventResponse();
                typedResponse.log = log;
                typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<ChallengeCancelTransferRequestEventResponse> challengeCancelTransferRequestEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHALLENGECANCELTRANSFERREQUEST_EVENT));
        return challengeCancelTransferRequestEventFlowable(filter);
    }

    public List<ChallengeSuperblockEventResponse> getChallengeSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHALLENGESUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<ChallengeSuperblockEventResponse> responses = new ArrayList<ChallengeSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChallengeSuperblockEventResponse typedResponse = new ChallengeSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ChallengeSuperblockEventResponse> challengeSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ChallengeSuperblockEventResponse>() {
            @Override
            public ChallengeSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHALLENGESUPERBLOCK_EVENT, log);
                ChallengeSuperblockEventResponse typedResponse = new ChallengeSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ChallengeSuperblockEventResponse> challengeSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHALLENGESUPERBLOCK_EVENT));
        return challengeSuperblockEventFlowable(filter);
    }

    public List<ErrorSuperblockEventResponse> getErrorSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ERRORSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<ErrorSuperblockEventResponse> responses = new ArrayList<ErrorSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorSuperblockEventResponse typedResponse = new ErrorSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ErrorSuperblockEventResponse> errorSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ErrorSuperblockEventResponse>() {
            @Override
            public ErrorSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ERRORSUPERBLOCK_EVENT, log);
                ErrorSuperblockEventResponse typedResponse = new ErrorSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ErrorSuperblockEventResponse> errorSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ERRORSUPERBLOCK_EVENT));
        return errorSuperblockEventFlowable(filter);
    }

    public List<InvalidSuperblockEventResponse> getInvalidSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INVALIDSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<InvalidSuperblockEventResponse> responses = new ArrayList<InvalidSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvalidSuperblockEventResponse typedResponse = new InvalidSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<InvalidSuperblockEventResponse> invalidSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, InvalidSuperblockEventResponse>() {
            @Override
            public InvalidSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(INVALIDSUPERBLOCK_EVENT, log);
                InvalidSuperblockEventResponse typedResponse = new InvalidSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<InvalidSuperblockEventResponse> invalidSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVALIDSUPERBLOCK_EVENT));
        return invalidSuperblockEventFlowable(filter);
    }

    public List<NewSuperblockEventResponse> getNewSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<NewSuperblockEventResponse> responses = new ArrayList<NewSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewSuperblockEventResponse typedResponse = new NewSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewSuperblockEventResponse> newSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewSuperblockEventResponse>() {
            @Override
            public NewSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWSUPERBLOCK_EVENT, log);
                NewSuperblockEventResponse typedResponse = new NewSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<NewSuperblockEventResponse> newSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWSUPERBLOCK_EVENT));
        return newSuperblockEventFlowable(filter);
    }

    public List<RelayTransactionEventResponse> getRelayTransactionEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RELAYTRANSACTION_EVENT, transactionReceipt);
        ArrayList<RelayTransactionEventResponse> responses = new ArrayList<RelayTransactionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RelayTransactionEventResponse typedResponse = new RelayTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RelayTransactionEventResponse> relayTransactionEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RelayTransactionEventResponse>() {
            @Override
            public RelayTransactionEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RELAYTRANSACTION_EVENT, log);
                RelayTransactionEventResponse typedResponse = new RelayTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<RelayTransactionEventResponse> relayTransactionEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RELAYTRANSACTION_EVENT));
        return relayTransactionEventFlowable(filter);
    }

    public List<SemiApprovedSuperblockEventResponse> getSemiApprovedSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SEMIAPPROVEDSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<SemiApprovedSuperblockEventResponse> responses = new ArrayList<SemiApprovedSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SemiApprovedSuperblockEventResponse typedResponse = new SemiApprovedSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SemiApprovedSuperblockEventResponse> semiApprovedSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SemiApprovedSuperblockEventResponse>() {
            @Override
            public SemiApprovedSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SEMIAPPROVEDSUPERBLOCK_EVENT, log);
                SemiApprovedSuperblockEventResponse typedResponse = new SemiApprovedSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SemiApprovedSuperblockEventResponse> semiApprovedSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SEMIAPPROVEDSUPERBLOCK_EVENT));
        return semiApprovedSuperblockEventFlowable(filter);
    }

    public List<VerifyTransactionEventResponse> getVerifyTransactionEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VERIFYTRANSACTION_EVENT, transactionReceipt);
        ArrayList<VerifyTransactionEventResponse> responses = new ArrayList<VerifyTransactionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VerifyTransactionEventResponse typedResponse = new VerifyTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VerifyTransactionEventResponse> verifyTransactionEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, VerifyTransactionEventResponse>() {
            @Override
            public VerifyTransactionEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VERIFYTRANSACTION_EVENT, log);
                VerifyTransactionEventResponse typedResponse = new VerifyTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<VerifyTransactionEventResponse> verifyTransactionEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VERIFYTRANSACTION_EVENT));
        return verifyTransactionEventFlowable(filter);
    }

    public RemoteFunctionCall<Uint256> minProposalDeposit() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MINPROPOSALDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> syscoinERC20Manager() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYSCOINERC20MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> trustedClaimManager() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TRUSTEDCLAIMMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> init(Address _syscoinERC20Manager, Address _claimManager) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INIT, 
                Arrays.<Type>asList(_syscoinERC20Manager, _claimManager), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Uint256> getHeaderMerkleRoot(DynamicBytes _blockHeader) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETHEADERMERKLEROOT, 
                Arrays.<Type>asList(_blockHeader), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(Bytes32 _blocksMerkleRoot, Uint256 _timestamp, Uint256 _mtpTimestamp, Bytes32 _lastHash, Uint32 _lastBits, Bytes32 _parentId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(_blocksMerkleRoot, _timestamp, _mtpTimestamp, _lastHash, _lastBits, _parentId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> propose(Bytes32 _blocksMerkleRoot, Uint256 _timestamp, Uint256 _mtpTimestamp, Bytes32 _lastHash, Uint32 _lastBits, Bytes32 _parentId, Address submitter) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PROPOSE, 
                Arrays.<Type>asList(_blocksMerkleRoot, _timestamp, _mtpTimestamp, _lastHash, _lastBits, _parentId, submitter), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> confirm(Bytes32 _superblockHash, Address _validator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CONFIRM, 
                Arrays.<Type>asList(_superblockHash, _validator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> challenge(Bytes32 _superblockHash, Address _challenger) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHALLENGE, 
                Arrays.<Type>asList(_superblockHash, _challenger), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> semiApprove(Bytes32 _superblockHash, Address _validator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SEMIAPPROVE, 
                Arrays.<Type>asList(_superblockHash, _validator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> invalidate(Bytes32 _superblockHash, Address _validator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INVALIDATE, 
                Arrays.<Type>asList(_superblockHash, _validator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> relayTx(DynamicBytes _txBytes, Uint256 _txIndex, DynamicArray<Uint256> _txSiblings, DynamicBytes _syscoinBlockHeader, Uint256 _syscoinBlockIndex, DynamicArray<Uint256> _syscoinBlockSiblings, Bytes32 _superblockHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RELAYTX, 
                Arrays.<Type>asList(_txBytes, _txIndex, _txSiblings, _syscoinBlockHeader, _syscoinBlockIndex, _syscoinBlockSiblings, _superblockHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> challengeCancelTransfer(DynamicBytes _txBytes, Uint256 _txIndex, DynamicArray<Uint256> _txSiblings, DynamicBytes _syscoinBlockHeader, Uint256 _syscoinBlockIndex, DynamicArray<Uint256> _syscoinBlockSiblings, Bytes32 _superblockHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHALLENGECANCELTRANSFER, 
                Arrays.<Type>asList(_txBytes, _txIndex, _txSiblings, _syscoinBlockHeader, _syscoinBlockIndex, _syscoinBlockSiblings, _superblockHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bytes32> calcSuperblockHash(Bytes32 _blocksMerkleRoot, Uint256 _timestamp, Uint256 _mtpTimestamp, Bytes32 _lastHash, Uint32 _lastBits, Bytes32 _parentId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CALCSUPERBLOCKHASH, 
                Arrays.<Type>asList(_blocksMerkleRoot, _timestamp, _mtpTimestamp, _lastHash, _lastBits, _parentId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bytes32> getBestSuperblock() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETBESTSUPERBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Tuple9<Bytes32, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32>> getSuperblock(Bytes32 superblockHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSUPERBLOCK, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint32>() {}));
        return new RemoteFunctionCall<Tuple9<Bytes32, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32>>(function,
                new Callable<Tuple9<Bytes32, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32>>() {
                    @Override
                    public Tuple9<Bytes32, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple9<Bytes32, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32>(
                                (Bytes32) results.get(0), 
                                (Uint256) results.get(1), 
                                (Uint256) results.get(2), 
                                (Bytes32) results.get(3), 
                                (Uint32) results.get(4), 
                                (Bytes32) results.get(5), 
                                (Address) results.get(6), 
                                (Uint8) results.get(7), 
                                (Uint32) results.get(8));
                    }
                });
    }

    public RemoteFunctionCall<Uint32> getSuperblockHeight(Bytes32 superblockHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSUPERBLOCKHEIGHT, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> getSuperblockTimestamp(Bytes32 _superblockHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSUPERBLOCKTIMESTAMP, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> getSuperblockMedianTimestamp(Bytes32 _superblockHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSUPERBLOCKMEDIANTIMESTAMP, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bytes32> getSuperblockParentId(Bytes32 _superblockHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSUPERBLOCKPARENTID, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint8> getSuperblockStatus(Bytes32 _superblockHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSUPERBLOCKSTATUS, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> getChainHeight() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCHAINHEIGHT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bytes32> getSuperblockAt(Uint256 _height) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSUPERBLOCKAT, 
                Arrays.<Type>asList(_height), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    @Deprecated
    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SyscoinSuperblocks(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SyscoinSuperblocks(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SyscoinSuperblocks(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SyscoinSuperblocks(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class ApprovedSuperblockEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Address who;
    }

    public static class ChallengeCancelTransferRequestEventResponse extends BaseEventResponse {
        public Uint256 returnCode;
    }

    public static class ChallengeSuperblockEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Address who;
    }

    public static class ErrorSuperblockEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Uint256 err;
    }

    public static class InvalidSuperblockEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Address who;
    }

    public static class NewSuperblockEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Address who;
    }

    public static class RelayTransactionEventResponse extends BaseEventResponse {
        public Bytes32 txHash;

        public Uint256 returnCode;
    }

    public static class SemiApprovedSuperblockEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Address who;
    }

    public static class VerifyTransactionEventResponse extends BaseEventResponse {
        public Bytes32 txHash;

        public Uint256 returnCode;
    }
}
