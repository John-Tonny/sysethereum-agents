package org.sysethereum.agents.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.StaticArray9;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.3.0.
 */
public class SyscoinSuperblocks extends Contract {
    private static final String BINARY = "0x608060405234801561001057600080fd5b50612a03806100206000396000f3fe608060405234801561001057600080fd5b50600436106102485760003560e01c806387a4d3821161013b578063cc32b477116100b8578063f06d520d1161007c578063f06d520d14610a90578063f2854e3414610a98578063f32007e914610ab5578063f6f3238a14610abd578063f9b5d7c014610afe57610248565b8063cc32b477146107f7578063d035c4031461082c578063d095090a14610834578063df22235714610a80578063eda1970b14610a8857610248565b8063ba16d600116100ff578063ba16d600146105b0578063c0dde98b146105b8578063c11818a1146105d5578063c1f67ab31461078a578063cae0581e146107b657610248565b806387a4d382146104f357806390b6f6991461051057806395b45ee714610518578063b6da214414610544578063b8558d121461056c57610248565b806348aefc32116101c9578063642ed9881161018d578063642ed988146104085780636ca640a1146104255780636e5b70711461042d57806374205786146104aa5780637b34dcd9146104d657610248565b806348aefc32146103b657806349e6d8c1146103d357806355e018ce146103db5780635b572812146103f857806361bd8d661461040057610248565b80632da8cffd116102105780632da8cffd146103365780632e400191146103535780633288816a146103895780633ce90e8f14610391578063455e6166146103ae57610248565b806302e5de0c1461024d578063155ee8941461027e5780631797e5e9146102a257806327426f75146102bc578063282c141114610301575b600080fd5b61026a6004803603602081101561026357600080fd5b5035610b9f565b604080519115158252519081900360200190f35b610286610bc1565b604080516001600160a01b039092168252519081900360200190f35b6102aa610bd0565b60408051918252519081900360200190f35b6102e8600480360360408110156102d257600080fd5b50803590602001356001600160a01b0316610bd6565b6040805192835260208301919091528051918290030190f35b6102e8600480360360a081101561031757600080fd5b5080359060208101359060408101359060608101359060800135610d21565b6102aa6004803603602081101561034c57600080fd5b5035610ec5565b6103706004803603602081101561036957600080fd5b5035610eda565b6040805163ffffffff9092168252519081900360200190f35b6102aa610efc565b6102aa600480360360208110156103a757600080fd5b5035610f02565b6102aa610f17565b61026a600480360360208110156103cc57600080fd5b5035610f23565b6102aa610f2c565b6102aa600480360360208110156103f157600080fd5b5035610f32565b6102aa610f47565b6102aa610f6c565b6102aa6004803603602081101561041e57600080fd5b5035610f73565b6102aa610f85565b61044a6004803603602081101561044357600080fd5b5035610f91565b60405180888152602001878152602001868152602001858152602001848152602001836001600160a01b03166001600160a01b0316815260200182600581111561049057fe5b60ff16815260200197505050505050505060405180910390f35b6102e8600480360360408110156104c057600080fd5b50803590602001356001600160a01b0316610fe1565b6102aa600480360360208110156104ec57600080fd5b5035611126565b6103706004803603602081101561050957600080fd5b503561113b565b6102aa611156565b6102aa6004803603604081101561052e57600080fd5b50803590602001356001600160a01b031661115d565b61056a6004803603602081101561055a57600080fd5b50356001600160a01b0316611321565b005b6102e8600480360360c081101561058257600080fd5b5080359060208101359060408101359060608101359060808101359060a001356001600160a01b031661136d565b6102aa6115cf565b6102aa600480360360208110156105ce57600080fd5b50356115db565b6102aa600480360360a08110156105eb57600080fd5b810190602081018135600160201b81111561060557600080fd5b82018360208201111561061757600080fd5b803590602001918460018302840111600160201b8311171561063857600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092958435959094909350604081019250602001359050600160201b81111561069257600080fd5b8201836020820111156106a457600080fd5b803590602001918460208302840111600160201b831117156106c557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561071457600080fd5b82018360208201111561072657600080fd5b803590602001918460018302840111600160201b8311171561074757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505091359250611648915050565b6102aa600480360360408110156107a057600080fd5b50803590602001356001600160a01b03166116bf565b6107d3600480360360208110156107cc57600080fd5b5035611847565b604051808260058111156107e357fe5b60ff16815260200191505060405180910390f35b6102aa600480360360a081101561080d57600080fd5b5080359060208101359060408101359060608101359060800135611866565b6102aa6118ac565b6102aa600480360361010081101561084b57600080fd5b810190602081018135600160201b81111561086557600080fd5b82018360208201111561087757600080fd5b803590602001918460018302840111600160201b8311171561089857600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092958435959094909350604081019250602001359050600160201b8111156108f257600080fd5b82018360208201111561090457600080fd5b803590602001918460208302840111600160201b8311171561092557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561097457600080fd5b82018360208201111561098657600080fd5b803590602001918460018302840111600160201b831117156109a757600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092958435959094909350604081019250602001359050600160201b811115610a0157600080fd5b820183602082011115610a1357600080fd5b803590602001918460208302840111600160201b83111715610a3457600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050823593505050602001356001600160a01b03166118b3565b6102aa611a4f565b6102aa611a55565b6102aa611a5b565b6102aa60048036036020811015610aae57600080fd5b5035611a61565b610370611a76565b610ac5611a82565b604051808261012080838360005b83811015610aeb578181015183820152602001610ad3565b5050505090500191505060405180910390f35b6102aa60048036036020811015610b1457600080fd5b810190602081018135600160201b811115610b2e57600080fd5b820183602082011115610b4057600080fd5b803590602001918460208302840111600160201b83111715610b6157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611af4945050505050565b600060035b610bad83611847565b6005811115610bb857fe5b1490505b919050565b6006546001600160a01b031681565b619c4081565b60065460009081906001600160a01b03163314610c24576040805185815261c3966020820152815160008051602061296f833981519152929181900390910190a15061c39690506000610d1a565b600084815260208190526040902060026007820154600160401b900460ff166005811115610c4e57fe5b14158015610c76575060016007820154600160401b900460ff166005811115610c7357fe5b14155b15610cb4576040805186815261c3646020820152815160008051602061296f833981519152929181900390910190a15061c364915060009050610d1a565b60078101805460ff60401b191668030000000000000000179055604080518681526001600160a01b038616602082015281517f87f54f5eb3dd119fe71af0915af693e64a5bfd4acaa19a6c944c47cff8eec9e6929181900390910190a160008592509250505b9250929050565b600454600090819015610d3357600080fd5b8215610d3e57600080fd5b6000610d4d8888888888611866565b60008181526020819052604081209192506007820154600160401b900460ff166005811115610d7857fe5b14610d8257600080fd5b6003805463ffffffff90811660009081526001602081905260409091208590558b845583018a9055600283018990558282018890556004808401889055600584018054336001600160a01b03199091161790559154600784018054600160201b9290931663ffffffff199093169290921767ffffffff0000000019161780825560ff60401b1916600160401b830217905550600060068201556003805463ffffffff8082166001011663ffffffff199091161790556040805183815233602082015281517f64951c9008bba9f4663c12662e7a9b6412a7c4757869fdac09285564ae923fa1929181900390910190a1600482905560058890556040805183815233602082015281517ff2dbbf0abb1ab1870a5e4d02746747c91d167c855255440b573ba3b5529dc901929181900390910190a15060009890975095505050505050565b60009081526020819052604090206002015490565b600090815260208190526040902060070154600160201b900463ffffffff1690565b60045481565b60009081526020819052604090206003015490565b670de0b6b3a76484d081565b60006004610ba4565b60055490565b60009081526020819052604090206004015490565b600454600090815260208190526040902060070154600160201b900463ffffffff1690565b6206b6c081565b60009081526020819052604090205490565b670de0b6b3a76ab6c081565b6000908152602081905260409020805460018201546002830154600384015460048501546005860154600790960154949693959294919390926001600160a01b031691600160401b900460ff1690565b60065460009081906001600160a01b0316331461102f576040805185815261c3966020820152815160008051602061296f833981519152929181900390910190a15061c39690506000610d1a565b600084815260208190526040902060026007820154600160401b900460ff16600581111561105957fe5b14158015611081575060036007820154600160401b900460ff16600581111561107e57fe5b14155b156110bf576040805186815261c3646020820152815160008051602061296f833981519152929181900390910190a15061c364915060009050610d1a565b60078101805460ff60401b191668050000000000000000179055604080518681526001600160a01b038616602082015281517f64297372062dfcb21d6f7385f68d4656e993be2bb674099e3de73128d4911a91929181900390910190a15060009492505050565b60009081526020819052604090206006015490565b60009081526020819052604090206007015463ffffffff1690565b6205c49081565b6006546000906001600160a01b031633146111a5576040805184815261c3966020820152815160008051602061296f833981519152929181900390910190a15061c39661131b565b600083815260208190526040902060016007820154600160401b900460ff1660058111156111cf57fe5b141580156111f7575060036007820154600160401b900460ff1660058111156111f457fe5b14155b15611231576040805185815261c3646020820152815160008051602061296f833981519152929181900390910190a161c36491505061131b565b6004808201546000908152602081905260409020906007820154600160401b900460ff16600581111561126057fe5b1461129b576040805186815261c3826020820152815160008051602061296f833981519152929181900390910190a161c3829250505061131b565b60078201805460ff60401b191668040000000000000000179055600554600183015411156112d157600485905560018201546005555b604080518681526001600160a01b038616602082015281517ff2dbbf0abb1ab1870a5e4d02746747c91d167c855255440b573ba3b5529dc901929181900390910190a16000925050505b92915050565b6006546001600160a01b031615801561134257506001600160a01b03811615155b61134b57600080fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b60065460009081906001600160a01b031633146113bc57604080516000815261c3966020820152815160008051602061296f833981519152929181900390910190a15061c396905060006115c4565b600084815260208190526040902060036007820154600160401b900460ff1660058111156113e657fe5b1415801561140e575060046007820154600160401b900460ff16600581111561140b57fe5b14155b1561144d57604080516000815261c3826020820152815160008051602061296f833981519152929181900390910190a15061c3829150600090506115c4565b600061145c8a8a8a8a8a611866565b60008181526020819052604081209192506007820154600160401b900460ff16600581111561148757fe5b141561154b576003805463ffffffff90811660009081526001602081905260409091208590558d84558381018d9055600284018c90558383018b9055600484018a905591546007808501805463ffffffff1916928416929092178083559087018054600160201b9081900485169095018416850267ffffffff000000001990921691909117909155600686015490546115299391928181169290910416611bb5565b60068201556003805463ffffffff8082166001011663ffffffff199091161790555b60078101805460ff60401b1916600160401b1790556005810180546001600160a01b0319166001600160a01b03881690811790915560408051848152602081019290925280517f64951c9008bba9f4663c12662e7a9b6412a7c4757869fdac09285564ae923fa19281900390910190a150600093509150505b965096945050505050565b670de0b6b3a764000081565b60045460009060075b836115ee83610eda565b63ffffffff161115611641575b61160481611c13565b8461160e84610eda565b63ffffffff16031080156116225750600081115b1561163057600019016115fb565b61163a8282611c19565b91506115e4565b5092915050565b60008061165487611cbe565b90508651604014156116945760408051828152614e5c602082015281516000805160206129af833981519152929181900390910190a160009150506116b6565b6116a18187878787611e57565b600114156116b05790506116b6565b60009150505b95945050505050565b6006546000906001600160a01b03163314611707576040805184815261c3966020820152815160008051602061296f833981519152929181900390910190a15061c39661131b565b600083815260208190526040902060016007820154600160401b900460ff16600581111561173157fe5b14158015611759575060026007820154600160401b900460ff16600581111561175657fe5b14155b15611793576040805185815261c3646020820152815160008051602061296f833981519152929181900390910190a161c36491505061131b565b60058101546001600160a01b03848116911614156117e0576040805185815261c3876020820152815160008051602061296f833981519152929181900390910190a161c38791505061131b565b60078101805460ff60401b191668020000000000000000179055604080518581526001600160a01b038516602082015281517f09cdaca254aa177f759fe7a0968fe696ee9baf7d2a1d4714ed24b83d1f09518e929181900390910190a15060009392505050565b600090815260208190526040902060070154600160401b900460ff1690565b60408051602080820197909752808201959095526060850193909352608084019190915260a0808401919091528151808403909101815260c09092019052805191012090565b62035b6081565b60006118be83610f73565b6118d16118ca88611cbe565b8787612009565b1461190a576040805160008152614e486020820152815160008051602061298f833981519152929181900390910190a150614e48611a43565b60006119198a8a8a8a88611648565b90508015611a1157600061192e8b8386612089565b9050801561196957604080516000815260208101839052815160008051602061298f833981519152929181900390910190a19150611a439050565b6000828152600260208181526040808420898552848352908420600501548184018054958890529390925260018101805463ffffffff600160a01b6001600160a01b03198381166001600160a01b03948516178281049390931690910263ffffffff60a01b199092169190911790925594811692851692909217808316908516179092556003820180549182169190931617909155611a0783612166565b9350505050611a43565b604080516000815261753a6020820152815160008051602061298f833981519152929181900390910190a161753a9150505b98975050505050505050565b60055481565b6184d081565b60045490565b60009081526020819052604090206001015490565b60035463ffffffff1690565b611a8a612921565b611a92612921565b600454808252600090611aa490611126565b905060085b8015611aec5763ffffffff8216600090815260016020526040902054838260098110611ad157fe5b602090810291909101919091529190911c9060001901611aa9565b509091505090565b600073__SyscoinMessageLibrary_________________63f9b5d7c0836040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019060200280838360005b83811015611b60578181015183820152602001611b48565b505050509050019250505060206040518083038186803b158015611b8357600080fd5b505af4158015611b97573d6000803e3d6000fd5b505050506040513d6020811015611bad57600080fd5b505192915050565b60006005611bc4858386612256565b945060015b600881108015611be25750818481611bdd57fe5b066001145b15611c0657611bf5868260040287612256565b955060059190910290600101611bc9565b85925050505b9392505050565b60050a90565b600082815260208181526040822060060154908290829060036004870201908110611c4057fe5b1a826002600487020160208110611c5357fe5b1a61010002836004870260010160208110611c6a57fe5b1a6201000002846004880260208110611c7f57fe5b1a60f81b60f81c60ff166301000000020101019050600160008263ffffffff1663ffffffff168152602001908152602001600020549250505092915050565b600061131b600280846040516020018082805190602001908083835b60208310611cf95780518252601f199092019160209182019101611cda565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310611d5c5780518252601f199092019160209182019101611d3d565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015611d9b573d6000803e3d6000fd5b5050506040513d6020811015611db057600080fd5b50516040805160208181019390935281518082038401815290820191829052805190928291908401908083835b60208310611dfc5780518252601f199092019160209182019101611ddd565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015611e3b573d6000803e3d6000fd5b5050506040513d6020811015611e5057600080fd5b5051612292565b6000611e6282610f23565b1580611e745750611e72826122b5565b155b15611eac5760408051878152614e3e602082015281516000805160206129af833981519152929181900390910190a150614e3e6116b6565b600073__SyscoinMessageLibrary_________________636823c56b856040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611f15578181015183820152602001611efd565b50505050905090810190601f168015611f425780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b158015611f5f57600080fd5b505af4158015611f73573d6000803e3d6000fd5b505050506040513d6020811015611f8957600080fd5b5051905080611f99888888612009565b14611fd35760408051888152614e52602082015281516000805160206129af833981519152929181900390910190a1614e529150506116b6565b604080518881526001602082015281516000805160206129af833981519152929181900390910190a15060019695505050505050565b600083815b835181101561208057600084828151811061202557fe5b6020026020010151905060006002878161203b57fe5b069050600080826001141561205457508290508461205f565b8261205f5750849050825b61206982826122ea565b95506002890498506001850194505050505061200e565b50949350505050565b600080600080600061209a88612358565b91965094509250905080156120b4579350611c0c92505050565b6120bc612940565b938452506001600160a01b03918216602080850191825263ffffffff92831660408087019182528886166080880190815260008b81526002948590529182208851815594516001860180549451909716600160a01b0263ffffffff60a01b199189166001600160a01b031995861617919091161790955560609096015191830180549286169282169290921790915591516003909101805491909316911617905590509392505050565b600081815260026020818152604080842060038101548154600183015495830154845163373ff92b60e11b8152600481018a905260248101929092526001600160a01b038088166044840152600160a01b90970463ffffffff16606483015286166084820152925191948694911692636e7ff2569260a4808301939282900301818787803b1580156121f757600080fd5b505af115801561220b573d6000803e3d6000fd5b505050506040513d602081101561222157600080fd5b50516040805186815260208101839052815192935060008051602061298f833981519152929081900390910190a19392505050565b60008060405185815283601c1a8582015383601d1a6001860182015383601e1a6002860182015383601f1a600386018201535195945050505050565b600060405160005b6020811015611bad578381601f031a8183015360010161229a565b6000806122c183610eda565b63ffffffff169050806122d8576000915050610bbc565b826122e2826115db565b149392505050565b6000611c0c6002806122fb86612292565b61230486612292565b604051602001808381526020018281526020019250505060405160208183030381529060405260405180828051906020019080838360208310611d5c5780518252601f199092019160209182019101611d3d565b6000808080808080808061236c8a826123c0565b915063ffffffff82166174071461239157506127ba9750929550935091506123b99050565b61239c8a600461244f565b90506123a88a826124ce565b60009b509199509750955050505050505b9193509193565b60008282600301815181106123d157fe5b602001015160f81c60f81b60f81c60ff166301000000028383600201815181106123f757fe5b602001015160f81c60f81b60f81c60ff16620100000284846001018151811061241c57fe5b602001015160f81c60f81b60f81c60ff166101000285858151811061243d57fe5b016020015160f81c0101019392505050565b600080600061245e8585612562565b945091508161248b576124718585612562565b945091508161247c57fe5b6124868585612562565b945091505b6064821061249857600080fd5b60005b828110156124c4576024850194506124b38686612562565b81016004019550915060010161249b565b5092949350505050565b6000808080808080806124e18a8a612562565b99509050600a81106124f257600080fd5b60005b818110156125515760088a01995061250d8b8b612562565b9a50955061251b8b8b612614565b61252c579885019860009450612549565b60018a01995061253c8b8b612643565b9196509094509250612551565b6001016124f5565b509296509450925050509250925092565b600080600084848151811061257357fe5b01602001516001949094019360f81c905060fd81101561259a5760ff169150829050610d1a565b8060ff1660fd14156125c0576125b2858560106126f4565b846002019250925050610d1a565b8060ff1660fe14156125e6576125d8858560206126f4565b846004019250925050610d1a565b8060ff1660ff141561260c576125fe858560406126f4565b846008019250925050610d1a565b509250929050565b8151600090603560f91b9084908490811061262b57fe5b01602001516001600160f81b03191614905092915050565b60008060008060008060006126588989612736565b98509050600460ff82161461266c57600080fd5b6126768989612768565b93508060ff168801975061268a8989612736565b98509050600860ff82161461269e57600080fd5b6126a889896127e5565b67ffffffffffffffff1691508060ff16880197506126c68989612736565b98509050601460ff8216146126da57600080fd5b6126e48989612919565b9199919850929650945050505050565b6000805b6008830481101561272e578060080260020a858286018151811061271857fe5b016020015160f81c0291909101906001016126f8565b509392505050565b6000808351831061274657600080fd5b83838151811061275257fe5b016020015160f81c915050600182019250929050565b600082828151811061277657fe5b602001015160f81c60f81b60f81c60ff1663010000000283836001018151811061279c57fe5b602001015160f81c60f81b60f81c60ff1662010000028484600201815181106127c157fe5b602001015160f81c60f81b60f81c60ff166101000285856003018151811061243d57fe5b60008282815181106127f357fe5b602001015160f81c60f81b60f81c60ff166701000000000000000283836001018151811061281d57fe5b602001015160f81c60f81b60f81c60ff1666010000000000000284846002018151811061284657fe5b602001015160f81c60f81b60f81c60ff16650100000000000285856003018151811061286e57fe5b602001015160f81c60f81b60f81c60ff16600160201b0286866004018151811061289457fe5b602001015160f81c60f81b60f81c60ff166301000000028787600501815181106128ba57fe5b602001015160f81c60f81b60f81c60ff1662010000028888600601815181106128df57fe5b602001015160f81c60f81b60f81c60ff166101000289896007018151811061290357fe5b016020015160f81c010101010101019392505050565b016014015190565b6040518061012001604052806009906020820280388339509192915050565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091529056fea57c1ba4cf2c89b3558cfeeca4339e04551f0fc1a12cf63f1923c2eed8a5be8b4e64138cc499eb1adf9edff9ef69bd45c56ac4bfd307540952e4c9d51eab55c165bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebda265627a7a7230582071dcf05441d5624e421305662624b6f26952e0b7e6122e0a3888f794ceb346c364736f6c634300050a0032";

    public static final String FUNC_TRUSTEDCLAIMMANAGER = "trustedClaimManager";

    public static final String FUNC_RESPONDLASTBLOCKHEADERCOST = "respondLastBlockHeaderCost";

    public static final String FUNC_BESTSUPERBLOCK = "bestSuperblock";

    public static final String FUNC_MINPROPOSALDEPOSIT = "minProposalDeposit";

    public static final String FUNC_SUPERBLOCKCOST = "superblockCost";

    public static final String FUNC_MINCHALLENGEDEPOSIT = "minChallengeDeposit";

    public static final String FUNC_RESPONDMERKLEROOTHASHESCOST = "respondMerkleRootHashesCost";

    public static final String FUNC_MINREWARD = "minReward";

    public static final String FUNC_VERIFYSUPERBLOCKCOST = "verifySuperblockCost";

    public static final String FUNC_BESTSUPERBLOCKACCUMULATEDWORK = "bestSuperblockAccumulatedWork";

    public static final String FUNC_CHALLENGECOST = "challengeCost";

    public static final String FUNC_SETCLAIMMANAGER = "setClaimManager";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_PROPOSE = "propose";

    public static final String FUNC_CONFIRM = "confirm";

    public static final String FUNC_CHALLENGE = "challenge";

    public static final String FUNC_SEMIAPPROVE = "semiApprove";

    public static final String FUNC_INVALIDATE = "invalidate";

    public static final String FUNC_RELAYTX = "relayTx";

    public static final String FUNC_VERIFYTX = "verifyTx";

    public static final String FUNC_CALCSUPERBLOCKHASH = "calcSuperblockHash";

    public static final String FUNC_GETBESTSUPERBLOCK = "getBestSuperblock";

    public static final String FUNC_GETBESTSUPERBLOCKACCUMULATEDWORK = "getBestSuperblockAccumulatedWork";

    public static final String FUNC_GETSUPERBLOCK = "getSuperblock";

    public static final String FUNC_GETSUPERBLOCKHEIGHT = "getSuperblockHeight";

    public static final String FUNC_GETSUPERBLOCKINDEX = "getSuperblockIndex";

    public static final String FUNC_GETSUPERBLOCKANCESTORS = "getSuperblockAncestors";

    public static final String FUNC_GETSUPERBLOCKMERKLEROOT = "getSuperblockMerkleRoot";

    public static final String FUNC_GETSUPERBLOCKTIMESTAMP = "getSuperblockTimestamp";

    public static final String FUNC_GETSUPERBLOCKLASTHASH = "getSuperblockLastHash";

    public static final String FUNC_GETSUPERBLOCKPARENTID = "getSuperblockParentId";

    public static final String FUNC_GETSUPERBLOCKACCUMULATEDWORK = "getSuperblockAccumulatedWork";

    public static final String FUNC_GETSUPERBLOCKSTATUS = "getSuperblockStatus";

    public static final String FUNC_GETINDEXNEXTSUPERBLOCK = "getIndexNextSuperblock";

    public static final String FUNC_MAKEMERKLE = "makeMerkle";

    public static final String FUNC_ISAPPROVED = "isApproved";

    public static final String FUNC_ISSEMIAPPROVED = "isSemiApproved";

    public static final String FUNC_GETCHAINHEIGHT = "getChainHeight";

    public static final String FUNC_GETSUPERBLOCKLOCATOR = "getSuperblockLocator";

    public static final String FUNC_GETSUPERBLOCKAT = "getSuperblockAt";

    public static final Event NEWSUPERBLOCK_EVENT = new Event("NewSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event APPROVEDSUPERBLOCK_EVENT = new Event("ApprovedSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event CHALLENGESUPERBLOCK_EVENT = new Event("ChallengeSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SEMIAPPROVEDSUPERBLOCK_EVENT = new Event("SemiApprovedSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event INVALIDSUPERBLOCK_EVENT = new Event("InvalidSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event ERRORSUPERBLOCK_EVENT = new Event("ErrorSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event VERIFYTRANSACTION_EVENT = new Event("VerifyTransaction", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event RELAYTRANSACTION_EVENT = new Event("RelayTransaction", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("4", "0x618Ac1BA7a9F6A069bA30D3Cf9c894c5742bCfc8");
    }

    @Deprecated
    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Address> trustedClaimManager() {
        final Function function = new Function(FUNC_TRUSTEDCLAIMMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> respondLastBlockHeaderCost() {
        final Function function = new Function(FUNC_RESPONDLASTBLOCKHEADERCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> bestSuperblock() {
        final Function function = new Function(FUNC_BESTSUPERBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minProposalDeposit() {
        final Function function = new Function(FUNC_MINPROPOSALDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> superblockCost() {
        final Function function = new Function(FUNC_SUPERBLOCKCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minChallengeDeposit() {
        final Function function = new Function(FUNC_MINCHALLENGEDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> respondMerkleRootHashesCost() {
        final Function function = new Function(FUNC_RESPONDMERKLEROOTHASHESCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minReward() {
        final Function function = new Function(FUNC_MINREWARD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> verifySuperblockCost() {
        final Function function = new Function(FUNC_VERIFYSUPERBLOCKCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> bestSuperblockAccumulatedWork() {
        final Function function = new Function(FUNC_BESTSUPERBLOCKACCUMULATEDWORK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> challengeCost() {
        final Function function = new Function(FUNC_CHALLENGECOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public List<NewSuperblockEventResponse> getNewSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<NewSuperblockEventResponse> responses = new ArrayList<NewSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewSuperblockEventResponse typedResponse = new NewSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewSuperblockEventResponse> newSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewSuperblockEventResponse>() {
            @Override
            public NewSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWSUPERBLOCK_EVENT, log);
                NewSuperblockEventResponse typedResponse = new NewSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<NewSuperblockEventResponse> newSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWSUPERBLOCK_EVENT));
        return newSuperblockEventFlowable(filter);
    }

    public List<ApprovedSuperblockEventResponse> getApprovedSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVEDSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<ApprovedSuperblockEventResponse> responses = new ArrayList<ApprovedSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovedSuperblockEventResponse typedResponse = new ApprovedSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovedSuperblockEventResponse> approvedSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ApprovedSuperblockEventResponse>() {
            @Override
            public ApprovedSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVEDSUPERBLOCK_EVENT, log);
                ApprovedSuperblockEventResponse typedResponse = new ApprovedSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovedSuperblockEventResponse> approvedSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVEDSUPERBLOCK_EVENT));
        return approvedSuperblockEventFlowable(filter);
    }

    public List<ChallengeSuperblockEventResponse> getChallengeSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHALLENGESUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<ChallengeSuperblockEventResponse> responses = new ArrayList<ChallengeSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChallengeSuperblockEventResponse typedResponse = new ChallengeSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ChallengeSuperblockEventResponse> challengeSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ChallengeSuperblockEventResponse>() {
            @Override
            public ChallengeSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHALLENGESUPERBLOCK_EVENT, log);
                ChallengeSuperblockEventResponse typedResponse = new ChallengeSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ChallengeSuperblockEventResponse> challengeSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHALLENGESUPERBLOCK_EVENT));
        return challengeSuperblockEventFlowable(filter);
    }

    public List<SemiApprovedSuperblockEventResponse> getSemiApprovedSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SEMIAPPROVEDSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<SemiApprovedSuperblockEventResponse> responses = new ArrayList<SemiApprovedSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SemiApprovedSuperblockEventResponse typedResponse = new SemiApprovedSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SemiApprovedSuperblockEventResponse> semiApprovedSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SemiApprovedSuperblockEventResponse>() {
            @Override
            public SemiApprovedSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SEMIAPPROVEDSUPERBLOCK_EVENT, log);
                SemiApprovedSuperblockEventResponse typedResponse = new SemiApprovedSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SemiApprovedSuperblockEventResponse> semiApprovedSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SEMIAPPROVEDSUPERBLOCK_EVENT));
        return semiApprovedSuperblockEventFlowable(filter);
    }

    public List<InvalidSuperblockEventResponse> getInvalidSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INVALIDSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<InvalidSuperblockEventResponse> responses = new ArrayList<InvalidSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvalidSuperblockEventResponse typedResponse = new InvalidSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<InvalidSuperblockEventResponse> invalidSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, InvalidSuperblockEventResponse>() {
            @Override
            public InvalidSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(INVALIDSUPERBLOCK_EVENT, log);
                InvalidSuperblockEventResponse typedResponse = new InvalidSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<InvalidSuperblockEventResponse> invalidSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVALIDSUPERBLOCK_EVENT));
        return invalidSuperblockEventFlowable(filter);
    }

    public List<ErrorSuperblockEventResponse> getErrorSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ERRORSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<ErrorSuperblockEventResponse> responses = new ArrayList<ErrorSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorSuperblockEventResponse typedResponse = new ErrorSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ErrorSuperblockEventResponse> errorSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ErrorSuperblockEventResponse>() {
            @Override
            public ErrorSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ERRORSUPERBLOCK_EVENT, log);
                ErrorSuperblockEventResponse typedResponse = new ErrorSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ErrorSuperblockEventResponse> errorSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ERRORSUPERBLOCK_EVENT));
        return errorSuperblockEventFlowable(filter);
    }

    public List<VerifyTransactionEventResponse> getVerifyTransactionEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VERIFYTRANSACTION_EVENT, transactionReceipt);
        ArrayList<VerifyTransactionEventResponse> responses = new ArrayList<VerifyTransactionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VerifyTransactionEventResponse typedResponse = new VerifyTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VerifyTransactionEventResponse> verifyTransactionEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, VerifyTransactionEventResponse>() {
            @Override
            public VerifyTransactionEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VERIFYTRANSACTION_EVENT, log);
                VerifyTransactionEventResponse typedResponse = new VerifyTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<VerifyTransactionEventResponse> verifyTransactionEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VERIFYTRANSACTION_EVENT));
        return verifyTransactionEventFlowable(filter);
    }

    public List<RelayTransactionEventResponse> getRelayTransactionEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RELAYTRANSACTION_EVENT, transactionReceipt);
        ArrayList<RelayTransactionEventResponse> responses = new ArrayList<RelayTransactionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RelayTransactionEventResponse typedResponse = new RelayTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RelayTransactionEventResponse> relayTransactionEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RelayTransactionEventResponse>() {
            @Override
            public RelayTransactionEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RELAYTRANSACTION_EVENT, log);
                RelayTransactionEventResponse typedResponse = new RelayTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<RelayTransactionEventResponse> relayTransactionEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RELAYTRANSACTION_EVENT));
        return relayTransactionEventFlowable(filter);
    }

    public RemoteCall<TransactionReceipt> setClaimManager(Address _claimManager) {
        final Function function = new Function(
                FUNC_SETCLAIMMANAGER, 
                Arrays.<Type>asList(_claimManager), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> initialize(Bytes32 _blocksMerkleRoot, Uint256 _accumulatedWork, Uint256 _timestamp, Bytes32 _lastHash, Bytes32 _parentId) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(_blocksMerkleRoot, _accumulatedWork, _timestamp, _lastHash, _parentId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> propose(Bytes32 _blocksMerkleRoot, Uint256 _accumulatedWork, Uint256 _timestamp, Bytes32 _lastHash, Bytes32 _parentId, Address submitter) {
        final Function function = new Function(
                FUNC_PROPOSE, 
                Arrays.<Type>asList(_blocksMerkleRoot, _accumulatedWork, _timestamp, _lastHash, _parentId, submitter), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> confirm(Bytes32 _superblockHash, Address _validator) {
        final Function function = new Function(
                FUNC_CONFIRM, 
                Arrays.<Type>asList(_superblockHash, _validator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> challenge(Bytes32 _superblockHash, Address _challenger) {
        final Function function = new Function(
                FUNC_CHALLENGE, 
                Arrays.<Type>asList(_superblockHash, _challenger), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> semiApprove(Bytes32 _superblockHash, Address _validator) {
        final Function function = new Function(
                FUNC_SEMIAPPROVE, 
                Arrays.<Type>asList(_superblockHash, _validator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> invalidate(Bytes32 _superblockHash, Address _validator) {
        final Function function = new Function(
                FUNC_INVALIDATE, 
                Arrays.<Type>asList(_superblockHash, _validator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> relayTx(DynamicBytes _txBytes, Uint256 _txIndex, DynamicArray<Uint256> _txSiblings, DynamicBytes _syscoinBlockHeader, Uint256 _syscoinBlockIndex, DynamicArray<Uint256> _syscoinBlockSiblings, Bytes32 _superblockHash, Address _untrustedTargetContract) {
        final Function function = new Function(
                FUNC_RELAYTX, 
                Arrays.<Type>asList(_txBytes, _txIndex, _txSiblings, _syscoinBlockHeader, _syscoinBlockIndex, _syscoinBlockSiblings, _superblockHash, _untrustedTargetContract), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> verifyTx(DynamicBytes _txBytes, Uint256 _txIndex, DynamicArray<Uint256> _siblings, DynamicBytes _txBlockHeaderBytes, Bytes32 _txsuperblockHash) {
        final Function function = new Function(
                FUNC_VERIFYTX, 
                Arrays.<Type>asList(_txBytes, _txIndex, _siblings, _txBlockHeaderBytes, _txsuperblockHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Bytes32> calcSuperblockHash(Bytes32 _blocksMerkleRoot, Uint256 _accumulatedWork, Uint256 _timestamp, Bytes32 _lastHash, Bytes32 _parentId) {
        final Function function = new Function(FUNC_CALCSUPERBLOCKHASH, 
                Arrays.<Type>asList(_blocksMerkleRoot, _accumulatedWork, _timestamp, _lastHash, _parentId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getBestSuperblock() {
        final Function function = new Function(FUNC_GETBESTSUPERBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getBestSuperblockAccumulatedWork() {
        final Function function = new Function(FUNC_GETBESTSUPERBLOCKACCUMULATEDWORK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple7<Bytes32, Uint256, Uint256, Bytes32, Bytes32, Address, Uint8>> getSuperblock(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCK, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint8>() {}));
        return new RemoteCall<Tuple7<Bytes32, Uint256, Uint256, Bytes32, Bytes32, Address, Uint8>>(
                new Callable<Tuple7<Bytes32, Uint256, Uint256, Bytes32, Bytes32, Address, Uint8>>() {
                    @Override
                    public Tuple7<Bytes32, Uint256, Uint256, Bytes32, Bytes32, Address, Uint8> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<Bytes32, Uint256, Uint256, Bytes32, Bytes32, Address, Uint8>(
                                (Bytes32) results.get(0), 
                                (Uint256) results.get(1), 
                                (Uint256) results.get(2), 
                                (Bytes32) results.get(3), 
                                (Bytes32) results.get(4), 
                                (Address) results.get(5), 
                                (Uint8) results.get(6));
                    }
                });
    }

    public RemoteCall<Uint32> getSuperblockHeight(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKHEIGHT, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint32> getSuperblockIndex(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKINDEX, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSuperblockAncestors(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKANCESTORS, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSuperblockMerkleRoot(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKMERKLEROOT, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getSuperblockTimestamp(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKTIMESTAMP, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSuperblockLastHash(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKLASTHASH, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSuperblockParentId(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKPARENTID, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getSuperblockAccumulatedWork(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKACCUMULATEDWORK, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint8> getSuperblockStatus(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKSTATUS, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint32> getIndexNextSuperblock() {
        final Function function = new Function(FUNC_GETINDEXNEXTSUPERBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> makeMerkle(DynamicArray<Bytes32> hashes) {
        final Function function = new Function(FUNC_MAKEMERKLE, 
                Arrays.<Type>asList(hashes), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> isApproved(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_ISAPPROVED, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> isSemiApproved(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_ISSEMIAPPROVED, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getChainHeight() {
        final Function function = new Function(FUNC_GETCHAINHEIGHT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<StaticArray9<Bytes32>> getSuperblockLocator() {
        final Function function = new Function(FUNC_GETSUPERBLOCKLOCATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray9<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSuperblockAt(Uint256 _height) {
        final Function function = new Function(FUNC_GETSUPERBLOCKAT, 
                Arrays.<Type>asList(_height), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    @Deprecated
    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SyscoinSuperblocks(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SyscoinSuperblocks(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SyscoinSuperblocks(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SyscoinSuperblocks(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class NewSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address who;
    }

    public static class ApprovedSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address who;
    }

    public static class ChallengeSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address who;
    }

    public static class SemiApprovedSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address who;
    }

    public static class InvalidSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address who;
    }

    public static class ErrorSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Uint256 err;
    }

    public static class VerifyTransactionEventResponse {
        public Log log;

        public Bytes32 txHash;

        public Uint256 returnCode;
    }

    public static class RelayTransactionEventResponse {
        public Log log;

        public Bytes32 txHash;

        public Uint256 returnCode;
    }
}
