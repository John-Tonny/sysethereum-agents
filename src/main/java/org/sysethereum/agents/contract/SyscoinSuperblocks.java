package org.sysethereum.agents.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.StaticArray9;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple10;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.4.
 */
@SuppressWarnings("rawtypes")
public class SyscoinSuperblocks extends Contract {
    private static final String BINARY = "0x608060405234801561001057600080fd5b50612aa8806100206000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80636e5b707111610104578063c11818a1116100a2578063f09a401611610071578063f09a4016146109e3578063f32007e914610a13578063f6f3238a14610a1b578063f9b5d7c014610a5c576101cf565b8063c11818a1146107b9578063c1f67ab31461096e578063cae0581e1461099a578063f06d520d146109db576101cf565b806395b45ee7116100de57806395b45ee7146106fc578063a76a9b0f14610728578063b1b5952814610745578063c0dde98b1461079c576101cf565b80636e5b70711461060f57806374205786146106b35780637b34dcd9146106df576101cf565b8063455e6166116101715780635b5728121161014b5780635b5728121461059b5780635ec0aedd146105a3578063642ed988146105ab57806367e26419146105c8576101cf565b8063455e61661461055957806348aefc321461056157806355e018ce1461057e576101cf565b806327426f75116101ad57806327426f751461047a5780632da8cffd146104a65780632e400191146104c35780633a47290a146104f9576101cf565b806302e5de0c146101d4578063155ee894146102055780632444303814610229575b600080fd5b6101f1600480360360208110156101ea57600080fd5b5035610afd565b604080519115158252519081900360200190f35b61020d610b1f565b604080516001600160a01b039092168252519081900360200190f35b610468600480360360e081101561023f57600080fd5b810190602081018135600160201b81111561025957600080fd5b82018360208201111561026b57600080fd5b803590602001918460018302840111600160201b8311171561028c57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092958435959094909350604081019250602001359050600160201b8111156102e657600080fd5b8201836020820111156102f857600080fd5b803590602001918460208302840111600160201b8311171561031957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561036857600080fd5b82018360208201111561037a57600080fd5b803590602001918460018302840111600160201b8311171561039b57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092958435959094909350604081019250602001359050600160201b8111156103f557600080fd5b82018360208201111561040757600080fd5b803590602001918460208302840111600160201b8311171561042857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505091359250610b2e915050565b60408051918252519081900360200190f35b6104686004803603604081101561049057600080fd5b50803590602001356001600160a01b0316610d25565b610468600480360360208110156104bc57600080fd5b5035610e5d565b6104e0600480360360208110156104d957600080fd5b5035610e72565b6040805163ffffffff9092168252519081900360200190f35b610540600480360360e081101561050f57600080fd5b5080359060208101359060408101359060608101359060808101359063ffffffff60a0820135169060c00135610e94565b6040805192835260208301919091528051918290030190f35b61046861105c565b6101f16004803603602081101561057757600080fd5b5035611068565b6104686004803603602081101561059457600080fd5b5035611071565b610468611086565b61020d6110ab565b610468600480360360208110156105c157600080fd5b50356110ba565b610468600480360360e08110156105de57600080fd5b5080359060208101359060408101359060608101359060808101359063ffffffff60a0820135169060c001356110cc565b61062c6004803603602081101561062557600080fd5b503561112c565b604051808b81526020018a81526020018981526020018881526020018781526020018663ffffffff1663ffffffff168152602001858152602001846001600160a01b03166001600160a01b0316815260200183600581111561068a57fe5b60ff16815263ffffffff9092166020830152506040805191829003019950975050505050505050f35b610468600480360360408110156106c957600080fd5b50803590602001356001600160a01b031661119a565b610468600480360360208110156106f557600080fd5b50356112d0565b6104686004803603604081101561071257600080fd5b50803590602001356001600160a01b03166112e5565b6104686004803603602081101561073e57600080fd5b50356114a2565b610540600480360361010081101561075c57600080fd5b5080359060208101359060408101359060608101359060808101359060a081013563ffffffff169060c08101359060e001356001600160a01b03166114b7565b610468600480360360208110156107b257600080fd5b5035611753565b610468600480360360a08110156107cf57600080fd5b810190602081018135600160201b8111156107e957600080fd5b8201836020820111156107fb57600080fd5b803590602001918460018302840111600160201b8311171561081c57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092958435959094909350604081019250602001359050600160201b81111561087657600080fd5b82018360208201111561088857600080fd5b803590602001918460208302840111600160201b831117156108a957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156108f857600080fd5b82018360208201111561090a57600080fd5b803590602001918460018302840111600160201b8311171561092b57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050913592506117c0915050565b6104686004803603604081101561098457600080fd5b50803590602001356001600160a01b0316611849565b6109b7600480360360208110156109b057600080fd5b50356119cc565b604051808260058111156109c757fe5b60ff16815260200191505060405180910390f35b6104686119eb565b610a11600480360360408110156109f957600080fd5b506001600160a01b03813581169160200135166119f1565b005b6104e0611b1c565b610a23611b28565b604051808261012080838360005b83811015610a49578181015183820152602001610a31565b5050505090500191505060405180910390f35b61046860048036036020811015610a7257600080fd5b810190602081018135600160201b811115610a8c57600080fd5b820183602082011115610a9e57600080fd5b803590602001918460208302840111600160201b83111715610abf57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611b9a945050505050565b600060035b610b0b836119cc565b6005811115610b1657fe5b1490505b919050565b6039546001600160a01b031681565b6000610b39826110ba565b610b4c610b4587611ba5565b8686611d3e565b14610b97576040805160008152614e48602082015281517f4e64138cc499eb1adf9edff9ef69bd45c56ac4bfd307540952e4c9d51eab55c1929181900390910190a150614e48610d1a565b6000610ba689898989876117c0565b90508015610cd657600080600080600080610bc08f611dbe565b939a50919850929650919450925090508315610c215760408051600081526020810186905281517f4e64138cc499eb1adf9edff9ef69bd45c56ac4bfd307540952e4c9d51eab55c1929181900390910190a183975050505050505050610d1a565b60385460008a8152603360205260408082206006015481516315eade2b60e31b8152600481018c9052602481018b90526001600160a01b038a811660448301529182166064820152868216608482015263ffffffff881660a482015260ff861660c4820152915193169263af56f1589260e48084019391929182900301818387803b158015610caf57600080fd5b505af1158015610cc3573d6000803e3d6000fd5b5050505085975050505050505050610d1a565b604080516000815261753a602082015281517f4e64138cc499eb1adf9edff9ef69bd45c56ac4bfd307540952e4c9d51eab55c1929181900390910190a161753a9150505b979650505050505050565b6039546000906001600160a01b03163314610d6d576040805184815261c39660208201528151600080516020612a26833981519152929181900390910190a15061c396610e57565b600083815260336020526040902060026008820154600160601b900460ff166005811115610d9757fe5b14158015610dbf575060016008820154600160601b900460ff166005811115610dbc57fe5b14155b15610df9576040805185815261c36460208201528151600080516020612a26833981519152929181900390910190a161c364915050610e57565b60088101805460ff60601b1916600360601b179055604080518581526001600160a01b038516602082015281517f87f54f5eb3dd119fe71af0915af693e64a5bfd4acaa19a6c944c47cff8eec9e6929181900390910190a160009150505b92915050565b60009081526033602052604090206002015490565b600090815260336020526040902060080154600160401b900463ffffffff1690565b603654600090819015610ea657600080fd5b8215610eb157600080fd5b6000610ec28a8a8a8a8a8a8a6110cc565b60008181526033602052604081209192506008820154600160601b900460ff166005811115610eed57fe5b14610ef757600080fd5b6035805463ffffffff90811660009081526034602052604090208490558c8355600183018c9055600283018b9055600383018a905560048084018a905560058401889055600684018054336001600160a01b03199091161790559154600884018054600160401b67ffffffff0000000019909116928416600160201b029290921763ffffffff60401b19169190911763ffffffff19169189169190911780825560ff60601b1916600160601b830217905550600060078201556035805463ffffffff8082166001011663ffffffff199091161790556040805183815233602082015281517f64951c9008bba9f4663c12662e7a9b6412a7c4757869fdac09285564ae923fa1929181900390910190a1603682905560378a90556040805183815233602082015281517ff2dbbf0abb1ab1870a5e4d02746747c91d167c855255440b573ba3b5529dc901929181900390910190a15060009a909950975050505050505050565b6729a2241af62c000081565b60006004610b02565b60009081526033602052604090206005015490565b603654600090815260336020526040902060080154600160401b900463ffffffff1690565b6038546001600160a01b031681565b60009081526033602052604090205490565b60408051602080820199909952808201979097526060870195909552608086019390935260a085019190915260e01b6001600160e01b03191660c084015260c4808401919091528151808403909101815260e49092019052805191012090565b600090815260336020526040902080546001820154600283015460038401546004850154600886015460058701546006909701549597949693959294919363ffffffff8083169491936001600160a01b0390921692600160601b810460ff1692600160401b90910490911690565b6039546000906001600160a01b031633146111e2576040805184815261c39660208201528151600080516020612a26833981519152929181900390910190a15061c396610e57565b600083815260336020526040902060026008820154600160601b900460ff16600581111561120c57fe5b14158015611234575060036008820154600160601b900460ff16600581111561123157fe5b14155b1561126e576040805185815261c36460208201528151600080516020612a26833981519152929181900390910190a161c364915050610e57565b60088101805460ff60601b1916600560601b179055604080518581526001600160a01b038516602082015281517f64297372062dfcb21d6f7385f68d4656e993be2bb674099e3de73128d4911a91929181900390910190a15060009392505050565b60009081526033602052604090206007015490565b6039546000906001600160a01b0316331461132d576040805184815261c39660208201528151600080516020612a26833981519152929181900390910190a15061c396610e57565b600083815260336020526040902060016008820154600160601b900460ff16600581111561135757fe5b1415801561137f575060036008820154600160601b900460ff16600581111561137c57fe5b14155b156113b9576040805185815261c36460208201528151600080516020612a26833981519152929181900390910190a161c364915050610e57565b6005810154600090815260336020526040902060046008820154600160601b900460ff1660058111156113e857fe5b14611423576040805186815261c38260208201528151600080516020612a26833981519152929181900390910190a161c38292505050610e57565b60088201805460ff60601b1916600160621b1790556037546001830154111561145457603685905560018201546037555b604080518681526001600160a01b038616602082015281517ff2dbbf0abb1ab1870a5e4d02746747c91d167c855255440b573ba3b5529dc901929181900390910190a1506000949350505050565b60009081526033602052604090206003015490565b60395460009081906001600160a01b0316331461150657604080516000815261c39660208201528151600080516020612a26833981519152929181900390910190a15061c39690506000611746565b600084815260336020526040902060036008820154600160601b900460ff16600581111561153057fe5b14158015611558575060046008820154600160601b900460ff16600581111561155557fe5b14155b156115b0576008810154600080516020612a26833981519152908690600160601b900460ff16600581111561158957fe5b6040805192835260208301919091528051918290030190a15061c382915060009050611746565b60006115c18c8c8c8c8c8c8c6110cc565b60008181526033602052604081209192506008820154600160601b900460ff1660058111156115ec57fe5b14156116cd576035805463ffffffff90811660009081526034602052604090208490558e835560018084018f9055600284018e9055600384018d9055600484018c9055600584018a905591546008808501805467ffffffff000000001916928416600160201b90810293909317808255918801805463ffffffff60401b19909316600160401b938490048616909601851683029590951763ffffffff19168d8516179055600787015493546116ab949392810483169291900416611e55565b60078201556035805463ffffffff8082166001011663ffffffff199091161790555b60088101805460ff60601b1916600160601b1790556006810180546001600160a01b0319166001600160a01b03881690811790915560408051848152602081019290925280517f64951c9008bba9f4663c12662e7a9b6412a7c4757869fdac09285564ae923fa19281900390910190a150600093509150505b9850989650505050505050565b60365460009060075b8361176683610e72565b63ffffffff1611156117b9575b61177c81611eb0565b8461178684610e72565b63ffffffff160310801561179a5750600081115b156117a85760001901611773565b6117b28282611eb6565b915061175c565b5092915050565b6000806117cc87611ba5565b905086516040141561181e5760408051828152614e5c602082015281517f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd929181900390910190a16000915050611840565b61182b8187878787611f5d565b6001141561183a579050611840565b60009150505b95945050505050565b6039546000906001600160a01b03163314611891576040805184815261c39660208201528151600080516020612a26833981519152929181900390910190a15061c396610e57565b600083815260336020526040902060016008820154600160601b900460ff1660058111156118bb57fe5b141580156118e3575060026008820154600160601b900460ff1660058111156118e057fe5b14155b1561191d576040805185815261c36460208201528151600080516020612a26833981519152929181900390910190a161c364915050610e57565b60068101546001600160a01b038481169116141561196a576040805185815261c38760208201528151600080516020612a26833981519152929181900390910190a161c387915050610e57565b60088101805460ff60601b1916600160611b179055604080518581526001600160a01b038516602082015281517f09cdaca254aa177f759fe7a0968fe696ee9baf7d2a1d4714ed24b83d1f09518e929181900390910190a15060009392505050565b600090815260336020526040902060080154600160601b900460ff1690565b60365490565b600054610100900460ff1680611a0a5750611a0a61210a565b80611a18575060005460ff16155b611a535760405162461bcd60e51b815260040180806020018281038252602e815260200180612a46602e913960400191505060405180910390fd5b600054610100900460ff16158015611a7e576000805460ff1961ff0019909116610100171660011790555b6038546001600160a01b0316158015611a9f57506001600160a01b03831615155b611aa857600080fd5b603880546001600160a01b0319166001600160a01b038581169190911790915560395416158015611ae157506001600160a01b03821615155b611aea57600080fd5b603980546001600160a01b0319166001600160a01b0384161790558015611b17576000805461ff00191690555b505050565b60355463ffffffff1690565b611b30612a06565b611b38612a06565b603654808252600090611b4a906112d0565b905060085b8015611b925763ffffffff8216600090815260346020526040902054838260098110611b7757fe5b602090810291909101919091529190911c9060001901611b4f565b509091505090565b6000610e5782612110565b6000610e57600280846040516020018082805190602001908083835b60208310611be05780518252601f199092019160209182019101611bc1565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310611c435780518252601f199092019160209182019101611c24565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015611c82573d6000803e3d6000fd5b5050506040513d6020811015611c9757600080fd5b50516040805160208181019390935281518082038401815290820191829052805190928291908401908083835b60208310611ce35780518252601f199092019160209182019101611cc4565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015611d22573d6000803e3d6000fd5b5050506040513d6020811015611d3757600080fd5b5051612248565b600083815b8351811015611db5576000848281518110611d5a57fe5b60200260200101519050600060028781611d7057fe5b0690506000808260011415611d89575082905084611d94565b82611d945750849050825b611d9e8282612372565b955060028904985060018501945050505050611d43565b50949350505050565b6000808080808080808080808080611dd68e826123e7565b935063ffffffff841661740714611e0357506127ba9b50949950919750919550919350909150611e4c9050565b611e0e8e6004612423565b9050611e1a8e826124a5565b809750819650829a50839950849b505050505050600087868885878595509c509c509c509c509c509c50505050505050505b91939550919395565b60006005611e64858386612549565b945060015b600881108015611e825750818481611e7d57fe5b066001145b15611ea657611e95868260040287612549565b955060059190910290600101611e69565b5093949350505050565b60050a90565b6000828152603360209081526040822060070154908290829060036004870201908110611edf57fe5b1a826002600487020160208110611ef257fe5b1a61010002836004870260010160208110611f0957fe5b1a6201000002846004880260208110611f1e57fe5b1a60f81b60f81c60ff166301000000020101019050603460008263ffffffff1663ffffffff168152602001908152602001600020549250505092915050565b6000611f6882611068565b1580611f7a5750611f7882612585565b155b15611fc45760408051878152614e3e602082015281517f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd929181900390910190a150614e3e611840565b600073__SyscoinMessageLibrary_________________636823c56b856040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561202d578181015183820152602001612015565b50505050905090810190601f16801561205a5780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b15801561207757600080fd5b505af415801561208b573d6000803e3d6000fd5b505050506040513d60208110156120a157600080fd5b50519050806120b1888888611d3e565b146120fd5760408051888152614e52602082015281517f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd929181900390910190a1614e52915050611840565b5060019695505050505050565b303b1590565b80516000908290600181141561213e578160008151811061212d57fe5b602002602001015192505050610b1a565b60008111612189576040805162461bcd60e51b81526020600482015260136024820152724d7573742070726f766964652068617368657360681b604482015290519081900360640190fd5b600080805b6001841115612227575060009150815b8383101561221f578383600101106121b957600184036121be565b826001015b91506121f68584815181106121cf57fe5b602002602001015160001c8684815181106121e657fe5b602002602001015160001c612372565b60001b85828151811061220557fe5b60209081029190910101526002929092019160010161219e565b80935061218e565b8460008151811061223457fe5b602002602001015195505050505050919050565b60405160009060ff8316815382601e1a600182015382601d1a600282015382601c1a600382015382601b1a600482015382601a1a60058201538260191a60068201538260181a60078201538260171a60088201538260161a60098201538260151a600a8201538260141a600b8201538260131a600c8201538260121a600d8201538260111a600e8201538260101a600f82015382600f1a601082015382600e1a601182015382600d1a601282015382600c1a601382015382600b1a601482015382600a1a60158201538260091a60168201538260081a60178201538260071a60188201538260061a60198201538260051a601a8201538260041a601b8201538260031a601c8201538260021a601d8201538260011a601e8201538260001a601f8201535192915050565b60006123e060028061238386612248565b61238c86612248565b604051602001808381526020018281526020019250505060405160208183030381529060405260405180828051906020019080838360208310611c435780518252601f199092019160209182019101611c24565b9392505050565b6000816020840101516040518160031a60008201538160021a60018201538160011a60028201538160001a60038201535160e01c949350505050565b600080600061243285856125ba565b94509150816124625761244585856125ba565b945091508161245357600080fd5b61245d85856125ba565b945091505b6064821061246f57600080fd5b60005b8281101561249b5760248501945061248a86866125ba565b810160040195509150600101612472565b5092949350505050565b600080808080808080808080806124bc8e8e6125ba565b9d509050600a81106124cd57600080fd5b60005b818110156125325760088e019d506124e88f8f6125ba565b9e5097506124f68f8f61266d565b612507579c87019c6000965061252a565b60018e019d506125178f8f61269c565b939a509098509096509094509250612532565b6001016124d0565b50949d929c50929a50919850909650945050505050565b60008060405185815283601c1a8582015383601d1a6001860182015383601e1a6002860182015383601f1a600386018201535195945050505050565b60008061259183610e72565b63ffffffff169050806125a8576000915050610b1a565b826125b282611753565b149392505050565b60008060008484815181106125cb57fe5b01602001516001949094019360f81c905060fd8110156125f25760ff169150829050612666565b8060ff1660fd14156126185761260a858560106127c7565b846002019250925050612666565b8060ff1660fe141561263e57612630858560206127c7565b846004019250925050612666565b8060ff1660ff141561266457612656858560406127c7565b846008019250925050612666565b505b9250929050565b8151600090603560f91b9084908490811061268457fe5b01602001516001600160f81b03191614905092915050565b60008060008060008060008060008060006126b78d8d612809565b9c509050600460ff8216146126cb57600080fd5b6126d58d8d61283b565b95508060ff168c019b506126e98d8d612809565b9c509050600860ff8216146126fd57600080fd5b6127078d8d6128ca565b67ffffffffffffffff1692508060ff168c019b506127258d8d612809565b9c509050601460ff82161461273957600080fd5b6127438d8d6129fe565b94508060ff168c019b506127578d8d612809565b9c509050600160ff82161461276b57600080fd5b8c8c8151811061277757fe5b016020015160ff82169c909c019b60f81c91506127948d8d612809565b9c509050601460ff8216146127a857600080fd5b6127b28d8d6129fe565b929d949c50949a509850965090945050505050565b6000805b60088304811015612801578060080260020a85828601815181106127eb57fe5b016020015160f81c0291909101906001016127cb565b509392505050565b6000808351831061281957600080fd5b83838151811061282557fe5b016020015160f81c915050600182019250929050565b600082828151811061284957fe5b602001015160f81c60f81b60f81c60ff1663010000000283836001018151811061286f57fe5b602001015160f81c60f81b60f81c60ff16620100000284846002018151811061289457fe5b602001015160f81c60f81b60f81c60ff16610100028585600301815181106128b857fe5b016020015160f81c0101019392505050565b60008282815181106128d857fe5b602001015160f81c60f81b60f81c60ff166701000000000000000283836001018151811061290257fe5b602001015160f81c60f81b60f81c60ff1666010000000000000284846002018151811061292b57fe5b602001015160f81c60f81b60f81c60ff16650100000000000285856003018151811061295357fe5b602001015160f81c60f81b60f81c60ff16600160201b0286866004018151811061297957fe5b602001015160f81c60f81b60f81c60ff1663010000000287876005018151811061299f57fe5b602001015160f81c60f81b60f81c60ff1662010000028888600601815181106129c457fe5b602001015160f81c60f81b60f81c60ff16610100028989600701815181106129e857fe5b016020015160f81c010101010101019392505050565b016014015190565b604051806101200160405280600990602082028038833950919291505056fea57c1ba4cf2c89b3558cfeeca4339e04551f0fc1a12cf63f1923c2eed8a5be8b436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564a265627a7a7231582026534b332eb4e68e5c5705e48f4fce2de33b34c10cc160a3aec14b173874826364736f6c634300050b0032";

    public static final String FUNC_TRUSTEDCLAIMMANAGER = "trustedClaimManager";

    public static final String FUNC_MINPROPOSALDEPOSIT = "minProposalDeposit";

    public static final String FUNC_SYSCOINERC20MANAGER = "syscoinERC20Manager";

    public static final String FUNC_INIT = "init";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_PROPOSE = "propose";

    public static final String FUNC_CONFIRM = "confirm";

    public static final String FUNC_CHALLENGE = "challenge";

    public static final String FUNC_SEMIAPPROVE = "semiApprove";

    public static final String FUNC_INVALIDATE = "invalidate";

    public static final String FUNC_RELAYTX = "relayTx";

    public static final String FUNC_VERIFYTX = "verifyTx";

    public static final String FUNC_CALCSUPERBLOCKHASH = "calcSuperblockHash";

    public static final String FUNC_GETBESTSUPERBLOCK = "getBestSuperblock";

    public static final String FUNC_GETSUPERBLOCK = "getSuperblock";

    public static final String FUNC_GETSUPERBLOCKHEIGHT = "getSuperblockHeight";

    public static final String FUNC_GETSUPERBLOCKANCESTORS = "getSuperblockAncestors";

    public static final String FUNC_GETSUPERBLOCKMERKLEROOT = "getSuperblockMerkleRoot";

    public static final String FUNC_GETSUPERBLOCKTIMESTAMP = "getSuperblockTimestamp";

    public static final String FUNC_GETSUPERBLOCKMEDIANTIMESTAMP = "getSuperblockMedianTimestamp";

    public static final String FUNC_GETSUPERBLOCKPARENTID = "getSuperblockParentId";

    public static final String FUNC_GETSUPERBLOCKSTATUS = "getSuperblockStatus";

    public static final String FUNC_GETINDEXNEXTSUPERBLOCK = "getIndexNextSuperblock";

    public static final String FUNC_MAKEMERKLE = "makeMerkle";

    public static final String FUNC_ISAPPROVED = "isApproved";

    public static final String FUNC_ISSEMIAPPROVED = "isSemiApproved";

    public static final String FUNC_GETCHAINHEIGHT = "getChainHeight";

    public static final String FUNC_GETSUPERBLOCKLOCATOR = "getSuperblockLocator";

    public static final String FUNC_GETSUPERBLOCKAT = "getSuperblockAt";

    public static final Event NEWSUPERBLOCK_EVENT = new Event("NewSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event APPROVEDSUPERBLOCK_EVENT = new Event("ApprovedSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event CHALLENGESUPERBLOCK_EVENT = new Event("ChallengeSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SEMIAPPROVEDSUPERBLOCK_EVENT = new Event("SemiApprovedSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event INVALIDSUPERBLOCK_EVENT = new Event("InvalidSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event ERRORSUPERBLOCK_EVENT = new Event("ErrorSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event VERIFYTRANSACTION_EVENT = new Event("VerifyTransaction", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event RELAYTRANSACTION_EVENT = new Event("RelayTransaction", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("4", "0x18494d0f0dDe46FC5e3045495DC9d93D5D5c258D");
    }

    @Deprecated
    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<Address> trustedClaimManager() {
        final Function function = new Function(FUNC_TRUSTEDCLAIMMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> minProposalDeposit() {
        final Function function = new Function(FUNC_MINPROPOSALDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> syscoinERC20Manager() {
        final Function function = new Function(FUNC_SYSCOINERC20MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public List<NewSuperblockEventResponse> getNewSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<NewSuperblockEventResponse> responses = new ArrayList<NewSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewSuperblockEventResponse typedResponse = new NewSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewSuperblockEventResponse> newSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewSuperblockEventResponse>() {
            @Override
            public NewSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWSUPERBLOCK_EVENT, log);
                NewSuperblockEventResponse typedResponse = new NewSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<NewSuperblockEventResponse> newSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWSUPERBLOCK_EVENT));
        return newSuperblockEventFlowable(filter);
    }

    public List<ApprovedSuperblockEventResponse> getApprovedSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVEDSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<ApprovedSuperblockEventResponse> responses = new ArrayList<ApprovedSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovedSuperblockEventResponse typedResponse = new ApprovedSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovedSuperblockEventResponse> approvedSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ApprovedSuperblockEventResponse>() {
            @Override
            public ApprovedSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVEDSUPERBLOCK_EVENT, log);
                ApprovedSuperblockEventResponse typedResponse = new ApprovedSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovedSuperblockEventResponse> approvedSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVEDSUPERBLOCK_EVENT));
        return approvedSuperblockEventFlowable(filter);
    }

    public List<ChallengeSuperblockEventResponse> getChallengeSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHALLENGESUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<ChallengeSuperblockEventResponse> responses = new ArrayList<ChallengeSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChallengeSuperblockEventResponse typedResponse = new ChallengeSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ChallengeSuperblockEventResponse> challengeSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ChallengeSuperblockEventResponse>() {
            @Override
            public ChallengeSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHALLENGESUPERBLOCK_EVENT, log);
                ChallengeSuperblockEventResponse typedResponse = new ChallengeSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ChallengeSuperblockEventResponse> challengeSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHALLENGESUPERBLOCK_EVENT));
        return challengeSuperblockEventFlowable(filter);
    }

    public List<SemiApprovedSuperblockEventResponse> getSemiApprovedSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SEMIAPPROVEDSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<SemiApprovedSuperblockEventResponse> responses = new ArrayList<SemiApprovedSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SemiApprovedSuperblockEventResponse typedResponse = new SemiApprovedSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SemiApprovedSuperblockEventResponse> semiApprovedSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SemiApprovedSuperblockEventResponse>() {
            @Override
            public SemiApprovedSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SEMIAPPROVEDSUPERBLOCK_EVENT, log);
                SemiApprovedSuperblockEventResponse typedResponse = new SemiApprovedSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SemiApprovedSuperblockEventResponse> semiApprovedSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SEMIAPPROVEDSUPERBLOCK_EVENT));
        return semiApprovedSuperblockEventFlowable(filter);
    }

    public List<InvalidSuperblockEventResponse> getInvalidSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INVALIDSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<InvalidSuperblockEventResponse> responses = new ArrayList<InvalidSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvalidSuperblockEventResponse typedResponse = new InvalidSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<InvalidSuperblockEventResponse> invalidSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, InvalidSuperblockEventResponse>() {
            @Override
            public InvalidSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(INVALIDSUPERBLOCK_EVENT, log);
                InvalidSuperblockEventResponse typedResponse = new InvalidSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<InvalidSuperblockEventResponse> invalidSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVALIDSUPERBLOCK_EVENT));
        return invalidSuperblockEventFlowable(filter);
    }

    public List<ErrorSuperblockEventResponse> getErrorSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ERRORSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<ErrorSuperblockEventResponse> responses = new ArrayList<ErrorSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorSuperblockEventResponse typedResponse = new ErrorSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ErrorSuperblockEventResponse> errorSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ErrorSuperblockEventResponse>() {
            @Override
            public ErrorSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ERRORSUPERBLOCK_EVENT, log);
                ErrorSuperblockEventResponse typedResponse = new ErrorSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ErrorSuperblockEventResponse> errorSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ERRORSUPERBLOCK_EVENT));
        return errorSuperblockEventFlowable(filter);
    }

    public List<VerifyTransactionEventResponse> getVerifyTransactionEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VERIFYTRANSACTION_EVENT, transactionReceipt);
        ArrayList<VerifyTransactionEventResponse> responses = new ArrayList<VerifyTransactionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VerifyTransactionEventResponse typedResponse = new VerifyTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VerifyTransactionEventResponse> verifyTransactionEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, VerifyTransactionEventResponse>() {
            @Override
            public VerifyTransactionEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VERIFYTRANSACTION_EVENT, log);
                VerifyTransactionEventResponse typedResponse = new VerifyTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<VerifyTransactionEventResponse> verifyTransactionEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VERIFYTRANSACTION_EVENT));
        return verifyTransactionEventFlowable(filter);
    }

    public List<RelayTransactionEventResponse> getRelayTransactionEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RELAYTRANSACTION_EVENT, transactionReceipt);
        ArrayList<RelayTransactionEventResponse> responses = new ArrayList<RelayTransactionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RelayTransactionEventResponse typedResponse = new RelayTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RelayTransactionEventResponse> relayTransactionEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RelayTransactionEventResponse>() {
            @Override
            public RelayTransactionEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RELAYTRANSACTION_EVENT, log);
                RelayTransactionEventResponse typedResponse = new RelayTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<RelayTransactionEventResponse> relayTransactionEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RELAYTRANSACTION_EVENT));
        return relayTransactionEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> init(Address _syscoinERC20Manager, Address _claimManager) {
        final Function function = new Function(
                FUNC_INIT, 
                Arrays.<Type>asList(_syscoinERC20Manager, _claimManager), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(Bytes32 _blocksMerkleRoot, Uint256 _accumulatedWork, Uint256 _timestamp, Uint256 _mtpTimestamp, Bytes32 _lastHash, Uint32 _lastBits, Bytes32 _parentId) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(_blocksMerkleRoot, _accumulatedWork, _timestamp, _mtpTimestamp, _lastHash, _lastBits, _parentId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> propose(Bytes32 _blocksMerkleRoot, Uint256 _accumulatedWork, Uint256 _timestamp, Uint256 _mtpTimestamp, Bytes32 _lastHash, Uint32 _lastBits, Bytes32 _parentId, Address submitter) {
        final Function function = new Function(
                FUNC_PROPOSE, 
                Arrays.<Type>asList(_blocksMerkleRoot, _accumulatedWork, _timestamp, _mtpTimestamp, _lastHash, _lastBits, _parentId, submitter), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> confirm(Bytes32 _superblockHash, Address _validator) {
        final Function function = new Function(
                FUNC_CONFIRM, 
                Arrays.<Type>asList(_superblockHash, _validator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> challenge(Bytes32 _superblockHash, Address _challenger) {
        final Function function = new Function(
                FUNC_CHALLENGE, 
                Arrays.<Type>asList(_superblockHash, _challenger), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> semiApprove(Bytes32 _superblockHash, Address _validator) {
        final Function function = new Function(
                FUNC_SEMIAPPROVE, 
                Arrays.<Type>asList(_superblockHash, _validator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> invalidate(Bytes32 _superblockHash, Address _validator) {
        final Function function = new Function(
                FUNC_INVALIDATE, 
                Arrays.<Type>asList(_superblockHash, _validator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> relayTx(DynamicBytes _txBytes, Uint256 _txIndex, DynamicArray<Uint256> _txSiblings, DynamicBytes _syscoinBlockHeader, Uint256 _syscoinBlockIndex, DynamicArray<Uint256> _syscoinBlockSiblings, Bytes32 _superblockHash) {
        final Function function = new Function(
                FUNC_RELAYTX, 
                Arrays.<Type>asList(_txBytes, _txIndex, _txSiblings, _syscoinBlockHeader, _syscoinBlockIndex, _syscoinBlockSiblings, _superblockHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> verifyTx(DynamicBytes _txBytes, Uint256 _txIndex, DynamicArray<Uint256> _siblings, DynamicBytes _txBlockHeaderBytes, Bytes32 _txsuperblockHash) {
        final Function function = new Function(
                FUNC_VERIFYTX, 
                Arrays.<Type>asList(_txBytes, _txIndex, _siblings, _txBlockHeaderBytes, _txsuperblockHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bytes32> calcSuperblockHash(Bytes32 _blocksMerkleRoot, Uint256 _accumulatedWork, Uint256 _timestamp, Uint256 _mtpTimestamp, Bytes32 _lastHash, Uint32 _lastBits, Bytes32 _parentId) {
        final Function function = new Function(FUNC_CALCSUPERBLOCKHASH, 
                Arrays.<Type>asList(_blocksMerkleRoot, _accumulatedWork, _timestamp, _mtpTimestamp, _lastHash, _lastBits, _parentId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bytes32> getBestSuperblock() {
        final Function function = new Function(FUNC_GETBESTSUPERBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Tuple10<Bytes32, Uint256, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32>> getSuperblock(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCK, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint32>() {}));
        return new RemoteFunctionCall<Tuple10<Bytes32, Uint256, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32>>(function,
                new Callable<Tuple10<Bytes32, Uint256, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32>>() {
                    @Override
                    public Tuple10<Bytes32, Uint256, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple10<Bytes32, Uint256, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32>(
                                (Bytes32) results.get(0), 
                                (Uint256) results.get(1), 
                                (Uint256) results.get(2), 
                                (Uint256) results.get(3), 
                                (Bytes32) results.get(4), 
                                (Uint32) results.get(5), 
                                (Bytes32) results.get(6), 
                                (Address) results.get(7), 
                                (Uint8) results.get(8), 
                                (Uint32) results.get(9));
                    }
                });
    }

    public RemoteFunctionCall<Uint32> getSuperblockHeight(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKHEIGHT, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bytes32> getSuperblockAncestors(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKANCESTORS, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bytes32> getSuperblockMerkleRoot(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKMERKLEROOT, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> getSuperblockTimestamp(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKTIMESTAMP, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> getSuperblockMedianTimestamp(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKMEDIANTIMESTAMP, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bytes32> getSuperblockParentId(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKPARENTID, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint8> getSuperblockStatus(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKSTATUS, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint32> getIndexNextSuperblock() {
        final Function function = new Function(FUNC_GETINDEXNEXTSUPERBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bytes32> makeMerkle(DynamicArray<Bytes32> hashes) {
        final Function function = new Function(FUNC_MAKEMERKLE, 
                Arrays.<Type>asList(hashes), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bool> isApproved(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_ISAPPROVED, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bool> isSemiApproved(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_ISSEMIAPPROVED, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> getChainHeight() {
        final Function function = new Function(FUNC_GETCHAINHEIGHT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<StaticArray9<Bytes32>> getSuperblockLocator() {
        final Function function = new Function(FUNC_GETSUPERBLOCKLOCATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray9<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bytes32> getSuperblockAt(Uint256 _height) {
        final Function function = new Function(FUNC_GETSUPERBLOCKAT, 
                Arrays.<Type>asList(_height), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    @Deprecated
    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SyscoinSuperblocks(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SyscoinSuperblocks(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SyscoinSuperblocks(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SyscoinSuperblocks(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class NewSuperblockEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Address who;
    }

    public static class ApprovedSuperblockEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Address who;
    }

    public static class ChallengeSuperblockEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Address who;
    }

    public static class SemiApprovedSuperblockEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Address who;
    }

    public static class InvalidSuperblockEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Address who;
    }

    public static class ErrorSuperblockEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Uint256 err;
    }

    public static class VerifyTransactionEventResponse extends BaseEventResponse {
        public Bytes32 txHash;

        public Uint256 returnCode;
    }

    public static class RelayTransactionEventResponse extends BaseEventResponse {
        public Bytes32 txHash;

        public Uint256 returnCode;
    }
}
