package org.sysethereum.agents.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.StaticArray9;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple9;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.3.0.
 */
public class SyscoinSuperblocks extends Contract {
    private static final String BINARY = "0x608060405234801561001057600080fd5b506129d8806100206000396000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c80637b34dcd911610125578063cae0581e116100ad578063f06d520d1161007c578063f06d520d14610a86578063f2854e3414610a8e578063f32007e914610aab578063f6f3238a14610ab3578063f9b5d7c014610af457610211565b8063cae0581e146109d6578063d2af739514610a17578063df22235714610a3d578063ed86097614610a4557610211565b80639e20c803116100f45780639e20c80314610760578063b6da2144146107b0578063c0dde98b146107d8578063c11818a1146107f5578063c1f67ab3146109aa57610211565b80637b34dcd9146106b9578063828fa8b4146106d657806387a4d3821461071757806395b45ee71461073457610211565b8063455e6166116101a85780635b572812116101775780635b572812146105c35780635ec0aedd146105cb578063642ed988146105d35780636e5b7071146105f0578063742057861461068d57610211565b8063455e61661461057957806348aefc321461058157806349e6d8c11461059e57806355e018ce146105a657610211565b80632da8cffd116101e45780632da8cffd146105015780632e4001911461051e5780633288816a146105545780633ce90e8f1461055c57610211565b806302e5de0c14610216578063155ee89414610247578063244430381461026b57806327426f75146104bc575b600080fd5b6102336004803603602081101561022c57600080fd5b5035610b95565b604080519115158252519081900360200190f35b61024f610bb7565b604080516001600160a01b039092168252519081900360200190f35b6104aa600480360360e081101561028157600080fd5b810190602081018135600160201b81111561029b57600080fd5b8201836020820111156102ad57600080fd5b803590602001918460018302840111600160201b831117156102ce57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092958435959094909350604081019250602001359050600160201b81111561032857600080fd5b82018360208201111561033a57600080fd5b803590602001918460208302840111600160201b8311171561035b57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156103aa57600080fd5b8201836020820111156103bc57600080fd5b803590602001918460018302840111600160201b831117156103dd57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092958435959094909350604081019250602001359050600160201b81111561043757600080fd5b82018360208201111561044957600080fd5b803590602001918460208302840111600160201b8311171561046a57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505091359250610bc6915050565b60408051918252519081900360200190f35b6104e8600480360360408110156104d257600080fd5b50803590602001356001600160a01b0316610db9565b6040805192835260208301919091528051918290030190f35b6104aa6004803603602081101561051757600080fd5b5035610eff565b61053b6004803603602081101561053457600080fd5b5035610f14565b6040805163ffffffff9092168252519081900360200190f35b6104aa610f36565b6104aa6004803603602081101561057257600080fd5b5035610f3c565b6104aa610f51565b6102336004803603602081101561059757600080fd5b5035610f5d565b6104aa610f66565b6104aa600480360360208110156105bc57600080fd5b5035610f6c565b6104aa610f81565b61024f610fa6565b6104aa600480360360208110156105e957600080fd5b5035610fb5565b61060d6004803603602081101561060657600080fd5b5035610fc7565b604051808a81526020018981526020018881526020018781526020018663ffffffff1663ffffffff168152602001858152602001846001600160a01b03166001600160a01b0316815260200183600581111561066557fe5b60ff16815263ffffffff90921660208301525060408051918290030198509650505050505050f35b6104e8600480360360408110156106a357600080fd5b50803590602001356001600160a01b031661102b565b6104aa600480360360208110156106cf57600080fd5b503561116b565b6104aa600480360360c08110156106ec57600080fd5b5080359060208101359060408101359060608101359063ffffffff6080820135169060a00135611180565b61053b6004803603602081101561072d57600080fd5b50356111d8565b6104aa6004803603604081101561074a57600080fd5b50803590602001356001600160a01b03166111fa565b6104e8600480360360e081101561077657600080fd5b50803590602081013590604081013590606081013590608081013563ffffffff169060a08101359060c001356001600160a01b03166113b9565b6107d6600480360360208110156107c657600080fd5b50356001600160a01b0316611633565b005b6104aa600480360360208110156107ee57600080fd5b503561167f565b6104aa600480360360a081101561080b57600080fd5b810190602081018135600160201b81111561082557600080fd5b82018360208201111561083757600080fd5b803590602001918460018302840111600160201b8311171561085857600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092958435959094909350604081019250602001359050600160201b8111156108b257600080fd5b8201836020820111156108c457600080fd5b803590602001918460208302840111600160201b831117156108e557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561093457600080fd5b82018360208201111561094657600080fd5b803590602001918460018302840111600160201b8311171561096757600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050913592506116ec915050565b6104aa600480360360408110156109c057600080fd5b50803590602001356001600160a01b0316611763565b6109f3600480360360208110156109ec57600080fd5b50356118e6565b60405180826005811115610a0357fe5b60ff16815260200191505060405180910390f35b6107d660048036036020811015610a2d57600080fd5b50356001600160a01b0316611905565b6104aa611951565b6104e8600480360360c0811015610a5b57600080fd5b5080359060208101359060408101359060608101359063ffffffff6080820135169060a00135611957565b6104aa611b16565b6104aa60048036036020811015610aa457600080fd5b5035611b1c565b61053b611b31565b610abb611b3d565b604051808261012080838360005b83811015610ae1578181015183820152602001610ac9565b5050505090500191505060405180910390f35b6104aa60048036036020811015610b0a57600080fd5b810190602081018135600160201b811115610b2457600080fd5b820183602082011115610b3657600080fd5b803590602001918460208302840111600160201b83111715610b5757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611baf945050505050565b600060035b610ba3836118e6565b6005811115610bae57fe5b1490505b919050565b6006546001600160a01b031681565b6000610bd182610fb5565b610be4610bdd87611c70565b8686611e09565b14610c1d576040805160008152614e4860208201528151600080516020612964833981519152929181900390910190a150614e48610dae565b6000610c2c89898989876116ec565b90508015610d7c576000806000806000610c458e611e89565b92985090965091945090925090508215610c91576040805160008152602081018590528151600080516020612964833981519152929181900390910190a1829650505050505050610dae565b6005805460008a81526020818152604080832090940154845162f0792d60e71b8152600481018c9052602481018b90526001600160a01b038a811660448301529182166064820152868216608482015263ffffffff881660a48201529451929493169263783c96809260c4808301939282900301818787803b158015610d1657600080fd5b505af1158015610d2a573d6000803e3d6000fd5b505050506040513d6020811015610d4057600080fd5b505160408051898152602081018390528151929350600080516020612964833981519152929081900390910190a19650610dae95505050505050565b604080516000815261753a60208201528151600080516020612964833981519152929181900390910190a161753a9150505b979650505050505050565b60065460009081906001600160a01b03163314610e07576040805185815261c39660208201528151600080516020612944833981519152929181900390910190a15061c39690506000610ef8565b600084815260208190526040902060026007820154600160601b900460ff166005811115610e3157fe5b14158015610e59575060016007820154600160601b900460ff166005811115610e5657fe5b14155b15610e97576040805186815261c36460208201528151600080516020612944833981519152929181900390910190a15061c364915060009050610ef8565b60078101805460ff60601b1916600360601b179055604080518681526001600160a01b038616602082015281517f87f54f5eb3dd119fe71af0915af693e64a5bfd4acaa19a6c944c47cff8eec9e6929181900390910190a160008592509250505b9250929050565b60009081526020819052604090206002015490565b600090815260208190526040902060070154600160401b900463ffffffff1690565b60035481565b60009081526020819052604090206003015490565b6729a2241af62c000081565b60006004610b9a565b60045490565b60009081526020819052604090206004015490565b600354600090815260208190526040902060070154600160401b900463ffffffff1690565b6005546001600160a01b031681565b60009081526020819052604090205490565b6000908152602081905260409020805460018201546002830154600384015460078501546004860154600590960154949693959294919363ffffffff80831694936001600160a01b031692600160601b810460ff1692600160401b90910490911690565b60065460009081906001600160a01b03163314611079576040805185815261c39660208201528151600080516020612944833981519152929181900390910190a15061c39690506000610ef8565b600084815260208190526040902060026007820154600160601b900460ff1660058111156110a357fe5b141580156110cb575060036007820154600160601b900460ff1660058111156110c857fe5b14155b15611109576040805186815261c36460208201528151600080516020612944833981519152929181900390910190a15061c364915060009050610ef8565b60078101805460ff60601b1916600560601b179055604080518681526001600160a01b038616602082015281517f64297372062dfcb21d6f7385f68d4656e993be2bb674099e3de73128d4911a91929181900390910190a15060009492505050565b60009081526020819052604090206006015490565b60408051602080820198909852808201969096526060860194909452608085019290925260e01b6001600160e01b03191660a084015260a4808401919091528151808403909101815260c49092019052805191012090565b600090815260208190526040902060070154600160201b900463ffffffff1690565b6006546000906001600160a01b03163314611242576040805184815261c39660208201528151600080516020612944833981519152929181900390910190a15061c3966113b3565b600083815260208190526040902060016007820154600160601b900460ff16600581111561126c57fe5b14158015611294575060036007820154600160601b900460ff16600581111561129157fe5b14155b156112ce576040805185815261c36460208201528151600080516020612944833981519152929181900390910190a161c3649150506113b3565b6004808201546000908152602081905260409020906007820154600160601b900460ff1660058111156112fd57fe5b14611338576040805186815261c38260208201528151600080516020612944833981519152929181900390910190a161c382925050506113b3565b60078201805460ff60601b1916600160621b1790556004546001830154111561136957600385905560018201546004555b604080518681526001600160a01b038616602082015281517ff2dbbf0abb1ab1870a5e4d02746747c91d167c855255440b573ba3b5529dc901929181900390910190a16000925050505b92915050565b60065460009081906001600160a01b0316331461140857604080516000815261c39660208201528151600080516020612944833981519152929181900390910190a15061c39690506000611627565b600084815260208190526040902060036007820154600160601b900460ff16600581111561143257fe5b1415801561145a575060046007820154600160601b900460ff16600581111561145757fe5b14155b1561149957604080516000815261c38260208201528151600080516020612944833981519152929181900390910190a15061c382915060009050611627565b60006114a98b8b8b8b8b8b611180565b60008181526020819052604081209192506007820154600160601b900460ff1660058111156114d457fe5b14156115ae576002805463ffffffff90811660009081526001602081905260409091208590558e84558381018e90558383018d9055600384018c9055600484018a905591546007808501805467ffffffff000000001916928416600160201b90810293909317808255918801805463ffffffff60401b19909316600160401b938490048616909601851683029590951763ffffffff19168d85161790556006870154935461158c949392810483169291900416611efe565b60068201556002805463ffffffff8082166001011663ffffffff199091161790555b60078101805460ff60601b1916600160601b1790556005810180546001600160a01b0319166001600160a01b03881690811790915560408051848152602081019290925280517f64951c9008bba9f4663c12662e7a9b6412a7c4757869fdac09285564ae923fa19281900390910190a150600093509150505b97509795505050505050565b6006546001600160a01b031615801561165457506001600160a01b03811615155b61165d57600080fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b60035460009060075b8361169283610f14565b63ffffffff1611156116e5575b6116a881611f59565b846116b284610f14565b63ffffffff16031080156116c65750600081115b156116d4576000190161169f565b6116de8282611f5f565b9150611688565b5092915050565b6000806116f887611c70565b90508651604014156117385760408051828152614e5c60208201528151600080516020612984833981519152929181900390910190a1600091505061175a565b6117458187878787612004565b6001141561175457905061175a565b60009150505b95945050505050565b6006546000906001600160a01b031633146117ab576040805184815261c39660208201528151600080516020612944833981519152929181900390910190a15061c3966113b3565b600083815260208190526040902060016007820154600160601b900460ff1660058111156117d557fe5b141580156117fd575060026007820154600160601b900460ff1660058111156117fa57fe5b14155b15611837576040805185815261c36460208201528151600080516020612944833981519152929181900390910190a161c3649150506113b3565b60058101546001600160a01b0384811691161415611884576040805185815261c38760208201528151600080516020612944833981519152929181900390910190a161c3879150506113b3565b60078101805460ff60601b1916600160611b179055604080518581526001600160a01b038516602082015281517f09cdaca254aa177f759fe7a0968fe696ee9baf7d2a1d4714ed24b83d1f09518e929181900390910190a15060009392505050565b600090815260208190526040902060070154600160601b900460ff1690565b6005546001600160a01b031615801561192657506001600160a01b03811615155b61192f57600080fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b60045481565b60035460009081901561196957600080fd5b821561197457600080fd5b6000611984898989898989611180565b60008181526020819052604081209192506007820154600160601b900460ff1660058111156119af57fe5b146119b957600080fd5b6002805463ffffffff90811660009081526001602081905260409091208590558c845583018b90558282018a9055600383018990556004808401889055600584018054336001600160a01b03199091161790559154600784018054600160401b67ffffffff0000000019909116928416600160201b029290921763ffffffff60401b19169190911763ffffffff19169189169190911780825560ff60601b1916600160601b830217905550600060068201556002805463ffffffff8082166001011663ffffffff199091161790556040805183815233602082015281517f64951c9008bba9f4663c12662e7a9b6412a7c4757869fdac09285564ae923fa1929181900390910190a1600382905560048990556040805183815233602082015281517ff2dbbf0abb1ab1870a5e4d02746747c91d167c855255440b573ba3b5529dc901929181900390910190a1506000999098509650505050505050565b60035490565b60009081526020819052604090206001015490565b60025463ffffffff1690565b611b45612924565b611b4d612924565b600354808252600090611b5f9061116b565b905060085b8015611ba75763ffffffff8216600090815260016020526040902054838260098110611b8c57fe5b602090810291909101919091529190911c9060001901611b64565b509091505090565b600073__SyscoinMessageLibrary_________________63f9b5d7c0836040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019060200280838360005b83811015611c1b578181015183820152602001611c03565b505050509050019250505060206040518083038186803b158015611c3e57600080fd5b505af4158015611c52573d6000803e3d6000fd5b505050506040513d6020811015611c6857600080fd5b505192915050565b60006113b3600280846040516020018082805190602001908083835b60208310611cab5780518252601f199092019160209182019101611c8c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310611d0e5780518252601f199092019160209182019101611cef565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015611d4d573d6000803e3d6000fd5b5050506040513d6020811015611d6257600080fd5b50516040805160208181019390935281518082038401815290820191829052805190928291908401908083835b60208310611dae5780518252601f199092019160209182019101611d8f565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015611ded573d6000803e3d6000fd5b5050506040513d6020811015611e0257600080fd5b50516121b6565b600083815b8351811015611e80576000848281518110611e2557fe5b60200260200101519050600060028781611e3b57fe5b0690506000808260011415611e54575082905084611e5f565b82611e5f5750849050825b611e6982826122e0565b955060028904985060018501945050505050611e0e565b50949350505050565b600080808080808080808080611e9f8c82612355565b925063ffffffff831661740714611ec957506127ba9950939750909550909350909150611ef59050565b611ed48c6004612391565b9050611ee08c82612410565b60009e50929c50909a50985096505050505050505b91939590929450565b60006005611f0d8583866124aa565b945060015b600881108015611f2b5750818481611f2657fe5b066001145b15611f4f57611f3e8682600402876124aa565b955060059190910290600101611f12565b5093949350505050565b60050a90565b600082815260208181526040822060060154908290829060036004870201908110611f8657fe5b1a826002600487020160208110611f9957fe5b1a61010002836004870260010160208110611fb057fe5b1a6201000002846004880260208110611fc557fe5b1a60f81b60f81c60ff166301000000020101019050600160008263ffffffff1663ffffffff168152602001908152602001600020549250505092915050565b600061200f82610f5d565b1580612021575061201f826124e6565b155b156120595760408051878152614e3e60208201528151600080516020612984833981519152929181900390910190a150614e3e61175a565b600073__SyscoinMessageLibrary_________________636823c56b856040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156120c25781810151838201526020016120aa565b50505050905090810190601f1680156120ef5780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b15801561210c57600080fd5b505af4158015612120573d6000803e3d6000fd5b505050506040513d602081101561213657600080fd5b5051905080612146888888611e09565b146121805760408051888152614e5260208201528151600080516020612984833981519152929181900390910190a1614e5291505061175a565b60408051888152600160208201528151600080516020612984833981519152929181900390910190a15060019695505050505050565b60405160009060ff8316815382601e1a600182015382601d1a600282015382601c1a600382015382601b1a600482015382601a1a60058201538260191a60068201538260181a60078201538260171a60088201538260161a60098201538260151a600a8201538260141a600b8201538260131a600c8201538260121a600d8201538260111a600e8201538260101a600f82015382600f1a601082015382600e1a601182015382600d1a601282015382600c1a601382015382600b1a601482015382600a1a60158201538260091a60168201538260081a60178201538260071a60188201538260061a60198201538260051a601a8201538260041a601b8201538260031a601c8201538260021a601d8201538260011a601e8201538260001a601f8201535192915050565b600061234e6002806122f1866121b6565b6122fa866121b6565b604051602001808381526020018281526020019250505060405160208183030381529060405260405180828051906020019080838360208310611d0e5780518252601f199092019160209182019101611cef565b9392505050565b6000816020840101516040518160031a60008201538160021a60018201538160011a60028201538160001a60038201535160e01c949350505050565b60008060006123a0858561251b565b94509150816123cd576123b3858561251b565b94509150816123be57fe5b6123c8858561251b565b945091505b606482106123da57600080fd5b60005b82811015612406576024850194506123f5868661251b565b8101600401955091506001016123dd565b5092949350505050565b60008080808080808080806124258c8c61251b565b9b509050600a811061243657600080fd5b60005b818110156124965760088c019b506124518d8d61251b565b9c50965061245f8d8d6125cd565b612470579a86019a6000955061248e565b60018c019b506124808d8d6125fc565b929850965094509250612496565b600101612439565b50939b919a50919850909650945050505050565b60008060405185815283601c1a8582015383601d1a6001860182015383601e1a6002860182015383601f1a600386018201535195945050505050565b6000806124f283610f14565b63ffffffff16905080612509576000915050610bb2565b826125138261167f565b149392505050565b600080600084848151811061252c57fe5b01602001516001949094019360f81c905060fd8110156125535760ff169150829050610ef8565b8060ff1660fd14156125795761256b858560106126e5565b846002019250925050610ef8565b8060ff1660fe141561259f57612591858560206126e5565b846004019250925050610ef8565b8060ff1660ff14156125c5576125b7858560406126e5565b846008019250925050610ef8565b509250929050565b8151600090603560f91b908490849081106125e457fe5b01602001516001600160f81b03191614905092915050565b60008060008060008060008060006126148b8b612727565b9a509050600460ff82161461262857600080fd5b6126328b8b612759565b94508060ff168a0199506126468b8b612727565b9a509050600860ff82161461265a57600080fd5b6126648b8b6127e8565b67ffffffffffffffff1691508060ff168a0199506126828b8b612727565b9a509050601460ff82161461269657600080fd5b6126a08b8b61291c565b93508060ff168a0199506126b48b8b612727565b9a509050601460ff8216146126c857600080fd5b6126d28b8b61291c565b919b939a50939850965090945050505050565b6000805b6008830481101561271f578060080260020a858286018151811061270957fe5b016020015160f81c0291909101906001016126e9565b509392505050565b6000808351831061273757600080fd5b83838151811061274357fe5b016020015160f81c915050600182019250929050565b600082828151811061276757fe5b602001015160f81c60f81b60f81c60ff1663010000000283836001018151811061278d57fe5b602001015160f81c60f81b60f81c60ff1662010000028484600201815181106127b257fe5b602001015160f81c60f81b60f81c60ff16610100028585600301815181106127d657fe5b016020015160f81c0101019392505050565b60008282815181106127f657fe5b602001015160f81c60f81b60f81c60ff166701000000000000000283836001018151811061282057fe5b602001015160f81c60f81b60f81c60ff1666010000000000000284846002018151811061284957fe5b602001015160f81c60f81b60f81c60ff16650100000000000285856003018151811061287157fe5b602001015160f81c60f81b60f81c60ff16600160201b0286866004018151811061289757fe5b602001015160f81c60f81b60f81c60ff166301000000028787600501815181106128bd57fe5b602001015160f81c60f81b60f81c60ff1662010000028888600601815181106128e257fe5b602001015160f81c60f81b60f81c60ff166101000289896007018151811061290657fe5b016020015160f81c010101010101019392505050565b016014015190565b604051806101200160405280600990602082028038833950919291505056fea57c1ba4cf2c89b3558cfeeca4339e04551f0fc1a12cf63f1923c2eed8a5be8b4e64138cc499eb1adf9edff9ef69bd45c56ac4bfd307540952e4c9d51eab55c165bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebda265627a7a72305820316f8510109f288f7d453c088c51fe1f9d5c1498ca8a802bb0b22ce608d7b44564736f6c634300050a0032";

    public static final String FUNC_TRUSTEDCLAIMMANAGER = "trustedClaimManager";

    public static final String FUNC_BESTSUPERBLOCK = "bestSuperblock";

    public static final String FUNC_MINPROPOSALDEPOSIT = "minProposalDeposit";

    public static final String FUNC_SYSCOINERC20MANAGER = "syscoinERC20Manager";

    public static final String FUNC_BESTSUPERBLOCKACCUMULATEDWORK = "bestSuperblockAccumulatedWork";

    public static final String FUNC_SETERC20MANAGER = "setERC20Manager";

    public static final String FUNC_SETCLAIMMANAGER = "setClaimManager";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_PROPOSE = "propose";

    public static final String FUNC_CONFIRM = "confirm";

    public static final String FUNC_CHALLENGE = "challenge";

    public static final String FUNC_SEMIAPPROVE = "semiApprove";

    public static final String FUNC_INVALIDATE = "invalidate";

    public static final String FUNC_RELAYTX = "relayTx";

    public static final String FUNC_VERIFYTX = "verifyTx";

    public static final String FUNC_CALCSUPERBLOCKHASH = "calcSuperblockHash";

    public static final String FUNC_GETBESTSUPERBLOCK = "getBestSuperblock";

    public static final String FUNC_GETBESTSUPERBLOCKACCUMULATEDWORK = "getBestSuperblockAccumulatedWork";

    public static final String FUNC_GETSUPERBLOCK = "getSuperblock";

    public static final String FUNC_GETSUPERBLOCKHEIGHT = "getSuperblockHeight";

    public static final String FUNC_GETSUPERBLOCKINDEX = "getSuperblockIndex";

    public static final String FUNC_GETSUPERBLOCKANCESTORS = "getSuperblockAncestors";

    public static final String FUNC_GETSUPERBLOCKMERKLEROOT = "getSuperblockMerkleRoot";

    public static final String FUNC_GETSUPERBLOCKTIMESTAMP = "getSuperblockTimestamp";

    public static final String FUNC_GETSUPERBLOCKLASTHASH = "getSuperblockLastHash";

    public static final String FUNC_GETSUPERBLOCKPARENTID = "getSuperblockParentId";

    public static final String FUNC_GETSUPERBLOCKACCUMULATEDWORK = "getSuperblockAccumulatedWork";

    public static final String FUNC_GETSUPERBLOCKSTATUS = "getSuperblockStatus";

    public static final String FUNC_GETINDEXNEXTSUPERBLOCK = "getIndexNextSuperblock";

    public static final String FUNC_MAKEMERKLE = "makeMerkle";

    public static final String FUNC_ISAPPROVED = "isApproved";

    public static final String FUNC_ISSEMIAPPROVED = "isSemiApproved";

    public static final String FUNC_GETCHAINHEIGHT = "getChainHeight";

    public static final String FUNC_GETSUPERBLOCKLOCATOR = "getSuperblockLocator";

    public static final String FUNC_GETSUPERBLOCKAT = "getSuperblockAt";

    public static final Event NEWSUPERBLOCK_EVENT = new Event("NewSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event APPROVEDSUPERBLOCK_EVENT = new Event("ApprovedSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event CHALLENGESUPERBLOCK_EVENT = new Event("ChallengeSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SEMIAPPROVEDSUPERBLOCK_EVENT = new Event("SemiApprovedSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event INVALIDSUPERBLOCK_EVENT = new Event("InvalidSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event ERRORSUPERBLOCK_EVENT = new Event("ErrorSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event VERIFYTRANSACTION_EVENT = new Event("VerifyTransaction", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event RELAYTRANSACTION_EVENT = new Event("RelayTransaction", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("4", "0xb7541AFAed903a538375651F072b4364623F7079");
    }

    @Deprecated
    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Address> trustedClaimManager() {
        final Function function = new Function(FUNC_TRUSTEDCLAIMMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> bestSuperblock() {
        final Function function = new Function(FUNC_BESTSUPERBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minProposalDeposit() {
        final Function function = new Function(FUNC_MINPROPOSALDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Address> syscoinERC20Manager() {
        final Function function = new Function(FUNC_SYSCOINERC20MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> bestSuperblockAccumulatedWork() {
        final Function function = new Function(FUNC_BESTSUPERBLOCKACCUMULATEDWORK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public List<NewSuperblockEventResponse> getNewSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<NewSuperblockEventResponse> responses = new ArrayList<NewSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewSuperblockEventResponse typedResponse = new NewSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewSuperblockEventResponse> newSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewSuperblockEventResponse>() {
            @Override
            public NewSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWSUPERBLOCK_EVENT, log);
                NewSuperblockEventResponse typedResponse = new NewSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<NewSuperblockEventResponse> newSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWSUPERBLOCK_EVENT));
        return newSuperblockEventFlowable(filter);
    }

    public List<ApprovedSuperblockEventResponse> getApprovedSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVEDSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<ApprovedSuperblockEventResponse> responses = new ArrayList<ApprovedSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovedSuperblockEventResponse typedResponse = new ApprovedSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovedSuperblockEventResponse> approvedSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ApprovedSuperblockEventResponse>() {
            @Override
            public ApprovedSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVEDSUPERBLOCK_EVENT, log);
                ApprovedSuperblockEventResponse typedResponse = new ApprovedSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovedSuperblockEventResponse> approvedSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVEDSUPERBLOCK_EVENT));
        return approvedSuperblockEventFlowable(filter);
    }

    public List<ChallengeSuperblockEventResponse> getChallengeSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHALLENGESUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<ChallengeSuperblockEventResponse> responses = new ArrayList<ChallengeSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChallengeSuperblockEventResponse typedResponse = new ChallengeSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ChallengeSuperblockEventResponse> challengeSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ChallengeSuperblockEventResponse>() {
            @Override
            public ChallengeSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHALLENGESUPERBLOCK_EVENT, log);
                ChallengeSuperblockEventResponse typedResponse = new ChallengeSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ChallengeSuperblockEventResponse> challengeSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHALLENGESUPERBLOCK_EVENT));
        return challengeSuperblockEventFlowable(filter);
    }

    public List<SemiApprovedSuperblockEventResponse> getSemiApprovedSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SEMIAPPROVEDSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<SemiApprovedSuperblockEventResponse> responses = new ArrayList<SemiApprovedSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SemiApprovedSuperblockEventResponse typedResponse = new SemiApprovedSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SemiApprovedSuperblockEventResponse> semiApprovedSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SemiApprovedSuperblockEventResponse>() {
            @Override
            public SemiApprovedSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SEMIAPPROVEDSUPERBLOCK_EVENT, log);
                SemiApprovedSuperblockEventResponse typedResponse = new SemiApprovedSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SemiApprovedSuperblockEventResponse> semiApprovedSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SEMIAPPROVEDSUPERBLOCK_EVENT));
        return semiApprovedSuperblockEventFlowable(filter);
    }

    public List<InvalidSuperblockEventResponse> getInvalidSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INVALIDSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<InvalidSuperblockEventResponse> responses = new ArrayList<InvalidSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvalidSuperblockEventResponse typedResponse = new InvalidSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<InvalidSuperblockEventResponse> invalidSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, InvalidSuperblockEventResponse>() {
            @Override
            public InvalidSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(INVALIDSUPERBLOCK_EVENT, log);
                InvalidSuperblockEventResponse typedResponse = new InvalidSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<InvalidSuperblockEventResponse> invalidSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVALIDSUPERBLOCK_EVENT));
        return invalidSuperblockEventFlowable(filter);
    }

    public List<ErrorSuperblockEventResponse> getErrorSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ERRORSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<ErrorSuperblockEventResponse> responses = new ArrayList<ErrorSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorSuperblockEventResponse typedResponse = new ErrorSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ErrorSuperblockEventResponse> errorSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ErrorSuperblockEventResponse>() {
            @Override
            public ErrorSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ERRORSUPERBLOCK_EVENT, log);
                ErrorSuperblockEventResponse typedResponse = new ErrorSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ErrorSuperblockEventResponse> errorSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ERRORSUPERBLOCK_EVENT));
        return errorSuperblockEventFlowable(filter);
    }

    public List<VerifyTransactionEventResponse> getVerifyTransactionEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VERIFYTRANSACTION_EVENT, transactionReceipt);
        ArrayList<VerifyTransactionEventResponse> responses = new ArrayList<VerifyTransactionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VerifyTransactionEventResponse typedResponse = new VerifyTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VerifyTransactionEventResponse> verifyTransactionEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, VerifyTransactionEventResponse>() {
            @Override
            public VerifyTransactionEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VERIFYTRANSACTION_EVENT, log);
                VerifyTransactionEventResponse typedResponse = new VerifyTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<VerifyTransactionEventResponse> verifyTransactionEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VERIFYTRANSACTION_EVENT));
        return verifyTransactionEventFlowable(filter);
    }

    public List<RelayTransactionEventResponse> getRelayTransactionEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RELAYTRANSACTION_EVENT, transactionReceipt);
        ArrayList<RelayTransactionEventResponse> responses = new ArrayList<RelayTransactionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RelayTransactionEventResponse typedResponse = new RelayTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RelayTransactionEventResponse> relayTransactionEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RelayTransactionEventResponse>() {
            @Override
            public RelayTransactionEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RELAYTRANSACTION_EVENT, log);
                RelayTransactionEventResponse typedResponse = new RelayTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<RelayTransactionEventResponse> relayTransactionEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RELAYTRANSACTION_EVENT));
        return relayTransactionEventFlowable(filter);
    }

    public RemoteCall<TransactionReceipt> setERC20Manager(Address _syscoinERC20Manager) {
        final Function function = new Function(
                FUNC_SETERC20MANAGER, 
                Arrays.<Type>asList(_syscoinERC20Manager), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setClaimManager(Address _claimManager) {
        final Function function = new Function(
                FUNC_SETCLAIMMANAGER, 
                Arrays.<Type>asList(_claimManager), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> initialize(Bytes32 _blocksMerkleRoot, Uint256 _accumulatedWork, Uint256 _timestamp, Bytes32 _lastHash, Uint32 _lastBits, Bytes32 _parentId) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(_blocksMerkleRoot, _accumulatedWork, _timestamp, _lastHash, _lastBits, _parentId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> propose(Bytes32 _blocksMerkleRoot, Uint256 _accumulatedWork, Uint256 _timestamp, Bytes32 _lastHash, Uint32 _lastBits, Bytes32 _parentId, Address submitter) {
        final Function function = new Function(
                FUNC_PROPOSE, 
                Arrays.<Type>asList(_blocksMerkleRoot, _accumulatedWork, _timestamp, _lastHash, _lastBits, _parentId, submitter), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> confirm(Bytes32 _superblockHash, Address _validator) {
        final Function function = new Function(
                FUNC_CONFIRM, 
                Arrays.<Type>asList(_superblockHash, _validator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> challenge(Bytes32 _superblockHash, Address _challenger) {
        final Function function = new Function(
                FUNC_CHALLENGE, 
                Arrays.<Type>asList(_superblockHash, _challenger), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> semiApprove(Bytes32 _superblockHash, Address _validator) {
        final Function function = new Function(
                FUNC_SEMIAPPROVE, 
                Arrays.<Type>asList(_superblockHash, _validator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> invalidate(Bytes32 _superblockHash, Address _validator) {
        final Function function = new Function(
                FUNC_INVALIDATE, 
                Arrays.<Type>asList(_superblockHash, _validator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> relayTx(DynamicBytes _txBytes, Uint256 _txIndex, DynamicArray<Uint256> _txSiblings, DynamicBytes _syscoinBlockHeader, Uint256 _syscoinBlockIndex, DynamicArray<Uint256> _syscoinBlockSiblings, Bytes32 _superblockHash) {
        final Function function = new Function(
                FUNC_RELAYTX, 
                Arrays.<Type>asList(_txBytes, _txIndex, _txSiblings, _syscoinBlockHeader, _syscoinBlockIndex, _syscoinBlockSiblings, _superblockHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> verifyTx(DynamicBytes _txBytes, Uint256 _txIndex, DynamicArray<Uint256> _siblings, DynamicBytes _txBlockHeaderBytes, Bytes32 _txsuperblockHash) {
        final Function function = new Function(
                FUNC_VERIFYTX, 
                Arrays.<Type>asList(_txBytes, _txIndex, _siblings, _txBlockHeaderBytes, _txsuperblockHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Bytes32> calcSuperblockHash(Bytes32 _blocksMerkleRoot, Uint256 _accumulatedWork, Uint256 _timestamp, Bytes32 _lastHash, Uint32 _lastBits, Bytes32 _parentId) {
        final Function function = new Function(FUNC_CALCSUPERBLOCKHASH, 
                Arrays.<Type>asList(_blocksMerkleRoot, _accumulatedWork, _timestamp, _lastHash, _lastBits, _parentId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getBestSuperblock() {
        final Function function = new Function(FUNC_GETBESTSUPERBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getBestSuperblockAccumulatedWork() {
        final Function function = new Function(FUNC_GETBESTSUPERBLOCKACCUMULATEDWORK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple9<Bytes32, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32>> getSuperblock(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCK, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint32>() {}));
        return new RemoteCall<Tuple9<Bytes32, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32>>(
                new Callable<Tuple9<Bytes32, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32>>() {
                    @Override
                    public Tuple9<Bytes32, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple9<Bytes32, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32>(
                                (Bytes32) results.get(0), 
                                (Uint256) results.get(1), 
                                (Uint256) results.get(2), 
                                (Bytes32) results.get(3), 
                                (Uint32) results.get(4), 
                                (Bytes32) results.get(5), 
                                (Address) results.get(6), 
                                (Uint8) results.get(7), 
                                (Uint32) results.get(8));
                    }
                });
    }

    public RemoteCall<Uint32> getSuperblockHeight(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKHEIGHT, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint32> getSuperblockIndex(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKINDEX, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSuperblockAncestors(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKANCESTORS, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSuperblockMerkleRoot(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKMERKLEROOT, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getSuperblockTimestamp(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKTIMESTAMP, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSuperblockLastHash(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKLASTHASH, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSuperblockParentId(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKPARENTID, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getSuperblockAccumulatedWork(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKACCUMULATEDWORK, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint8> getSuperblockStatus(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKSTATUS, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint32> getIndexNextSuperblock() {
        final Function function = new Function(FUNC_GETINDEXNEXTSUPERBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> makeMerkle(DynamicArray<Bytes32> hashes) {
        final Function function = new Function(FUNC_MAKEMERKLE, 
                Arrays.<Type>asList(hashes), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> isApproved(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_ISAPPROVED, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> isSemiApproved(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_ISSEMIAPPROVED, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getChainHeight() {
        final Function function = new Function(FUNC_GETCHAINHEIGHT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<StaticArray9<Bytes32>> getSuperblockLocator() {
        final Function function = new Function(FUNC_GETSUPERBLOCKLOCATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray9<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSuperblockAt(Uint256 _height) {
        final Function function = new Function(FUNC_GETSUPERBLOCKAT, 
                Arrays.<Type>asList(_height), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    @Deprecated
    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SyscoinSuperblocks(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SyscoinSuperblocks(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SyscoinSuperblocks(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SyscoinSuperblocks(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class NewSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address who;
    }

    public static class ApprovedSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address who;
    }

    public static class ChallengeSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address who;
    }

    public static class SemiApprovedSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address who;
    }

    public static class InvalidSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address who;
    }

    public static class ErrorSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Uint256 err;
    }

    public static class VerifyTransactionEventResponse {
        public Log log;

        public Bytes32 txHash;

        public Uint256 returnCode;
    }

    public static class RelayTransactionEventResponse {
        public Log log;

        public Bytes32 txHash;

        public Uint256 returnCode;
    }
}
