package org.sysethereum.agents.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.StaticArray9;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple9;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.3.0.
 */
public class SyscoinSuperblocks extends Contract {
    private static final String BINARY = "0x608060405234801561001057600080fd5b50612a93806100206000396000f3fe608060405234801561001057600080fd5b50600436106102485760003560e01c806387a4d3821161013b578063d035c403116100b8578063f06d520d1161007c578063f06d520d14610ad4578063f2854e3414610adc578063f32007e914610af9578063f6f3238a14610b01578063f9b5d7c014610b4257610248565b8063d035c4031461082f578063d095090a14610837578063df22235714610a83578063ed86097614610a8b578063eda1970b14610acc57610248565b8063ba16d600116100ff578063ba16d600146105e8578063c0dde98b146105f0578063c11818a11461060d578063c1f67ab3146107c2578063cae0581e146107ee57610248565b806387a4d3821461051f57806390b6f6991461053c57806395b45ee7146105445780639e20c80314610570578063b6da2144146105c057610248565b806349e6d8c1116101c95780636ca640a11161018d5780636ca640a1146103f05780636e5b7071146103f857806374205786146104955780637b34dcd9146104c1578063828fa8b4146104de57610248565b806349e6d8c11461039e57806355e018ce146103a65780635b572812146103c357806361bd8d66146103cb578063642ed988146103d357610248565b80632e400191116102105780632e4001911461031e5780633288816a146103545780633ce90e8f1461035c578063455e61661461037957806348aefc321461038157610248565b806302e5de0c1461024d578063155ee8941461027e5780631797e5e9146102a257806327426f75146102bc5780632da8cffd14610301575b600080fd5b61026a6004803603602081101561026357600080fd5b5035610be3565b604080519115158252519081900360200190f35b610286610c05565b604080516001600160a01b039092168252519081900360200190f35b6102aa610c14565b60408051918252519081900360200190f35b6102e8600480360360408110156102d257600080fd5b50803590602001356001600160a01b0316610c1a565b6040805192835260208301919091528051918290030190f35b6102aa6004803603602081101561031757600080fd5b5035610d60565b61033b6004803603602081101561033457600080fd5b5035610d75565b6040805163ffffffff9092168252519081900360200190f35b6102aa610d97565b6102aa6004803603602081101561037257600080fd5b5035610d9d565b6102aa610db2565b61026a6004803603602081101561039757600080fd5b5035610dbe565b6102aa610dc7565b6102aa600480360360208110156103bc57600080fd5b5035610dcd565b6102aa610de2565b6102aa610e07565b6102aa600480360360208110156103e957600080fd5b5035610e0e565b6102aa610e20565b6104156004803603602081101561040e57600080fd5b5035610e2c565b604051808a81526020018981526020018881526020018781526020018663ffffffff1663ffffffff168152602001858152602001846001600160a01b03166001600160a01b0316815260200183600581111561046d57fe5b60ff16815263ffffffff90921660208301525060408051918290030198509650505050505050f35b6102e8600480360360408110156104ab57600080fd5b50803590602001356001600160a01b0316610e90565b6102aa600480360360208110156104d757600080fd5b5035610fd0565b6102aa600480360360c08110156104f457600080fd5b5080359060208101359060408101359060608101359063ffffffff6080820135169060a00135610fe5565b61033b6004803603602081101561053557600080fd5b503561103d565b6102aa61105f565b6102aa6004803603604081101561055a57600080fd5b50803590602001356001600160a01b0316611066565b6102e8600480360360e081101561058657600080fd5b50803590602081013590604081013590606081013590608081013563ffffffff169060a08101359060c001356001600160a01b0316611225565b6105e6600480360360208110156105d657600080fd5b50356001600160a01b031661149f565b005b6102aa6114eb565b6102aa6004803603602081101561060657600080fd5b50356114f7565b6102aa600480360360a081101561062357600080fd5b810190602081018135600160201b81111561063d57600080fd5b82018360208201111561064f57600080fd5b803590602001918460018302840111600160201b8311171561067057600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092958435959094909350604081019250602001359050600160201b8111156106ca57600080fd5b8201836020820111156106dc57600080fd5b803590602001918460208302840111600160201b831117156106fd57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561074c57600080fd5b82018360208201111561075e57600080fd5b803590602001918460018302840111600160201b8311171561077f57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505091359250611564915050565b6102aa600480360360408110156107d857600080fd5b50803590602001356001600160a01b03166115db565b61080b6004803603602081101561080457600080fd5b503561175e565b6040518082600581111561081b57fe5b60ff16815260200191505060405180910390f35b6102aa61177d565b6102aa600480360361010081101561084e57600080fd5b810190602081018135600160201b81111561086857600080fd5b82018360208201111561087a57600080fd5b803590602001918460018302840111600160201b8311171561089b57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092958435959094909350604081019250602001359050600160201b8111156108f557600080fd5b82018360208201111561090757600080fd5b803590602001918460208302840111600160201b8311171561092857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561097757600080fd5b82018360208201111561098957600080fd5b803590602001918460018302840111600160201b831117156109aa57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092958435959094909350604081019250602001359050600160201b811115610a0457600080fd5b820183602082011115610a1657600080fd5b803590602001918460208302840111600160201b83111715610a3757600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050823593505050602001356001600160a01b0316611784565b6102aa611920565b6102e8600480360360c0811015610aa157600080fd5b5080359060208101359060408101359060608101359063ffffffff6080820135169060a00135611926565b6102aa611ae5565b6102aa611aeb565b6102aa60048036036020811015610af257600080fd5b5035611af1565b61033b611b06565b610b09611b12565b604051808261012080838360005b83811015610b2f578181015183820152602001610b17565b5050505090500191505060405180910390f35b6102aa60048036036020811015610b5857600080fd5b810190602081018135600160201b811115610b7257600080fd5b820183602082011115610b8457600080fd5b803590602001918460208302840111600160201b83111715610ba557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611b84945050505050565b600060035b610bf18361175e565b6005811115610bfc57fe5b1490505b919050565b6006546001600160a01b031681565b619c4081565b60065460009081906001600160a01b03163314610c68576040805185815261c396602082015281516000805160206129ff833981519152929181900390910190a15061c39690506000610d59565b600084815260208190526040902060026007820154600160601b900460ff166005811115610c9257fe5b14158015610cba575060016007820154600160601b900460ff166005811115610cb757fe5b14155b15610cf8576040805186815261c364602082015281516000805160206129ff833981519152929181900390910190a15061c364915060009050610d59565b60078101805460ff60601b1916600360601b179055604080518681526001600160a01b038616602082015281517f87f54f5eb3dd119fe71af0915af693e64a5bfd4acaa19a6c944c47cff8eec9e6929181900390910190a160008592509250505b9250929050565b60009081526020819052604090206002015490565b600090815260208190526040902060070154600160401b900463ffffffff1690565b60045481565b60009081526020819052604090206003015490565b670de0b6b3a76484d081565b60006004610be8565b60055490565b60009081526020819052604090206004015490565b600454600090815260208190526040902060070154600160401b900463ffffffff1690565b6206b6c081565b60009081526020819052604090205490565b670de0b6b3a76ab6c081565b6000908152602081905260409020805460018201546002830154600384015460078501546004860154600590960154949693959294919363ffffffff80831694936001600160a01b031692600160601b810460ff1692600160401b90910490911690565b60065460009081906001600160a01b03163314610ede576040805185815261c396602082015281516000805160206129ff833981519152929181900390910190a15061c39690506000610d59565b600084815260208190526040902060026007820154600160601b900460ff166005811115610f0857fe5b14158015610f30575060036007820154600160601b900460ff166005811115610f2d57fe5b14155b15610f6e576040805186815261c364602082015281516000805160206129ff833981519152929181900390910190a15061c364915060009050610d59565b60078101805460ff60601b1916600560601b179055604080518681526001600160a01b038616602082015281517f64297372062dfcb21d6f7385f68d4656e993be2bb674099e3de73128d4911a91929181900390910190a15060009492505050565b60009081526020819052604090206006015490565b60408051602080820198909852808201969096526060860194909452608085019290925260e01b6001600160e01b03191660a084015260a4808401919091528151808403909101815260c49092019052805191012090565b600090815260208190526040902060070154600160201b900463ffffffff1690565b6205c49081565b6006546000906001600160a01b031633146110ae576040805184815261c396602082015281516000805160206129ff833981519152929181900390910190a15061c39661121f565b600083815260208190526040902060016007820154600160601b900460ff1660058111156110d857fe5b14158015611100575060036007820154600160601b900460ff1660058111156110fd57fe5b14155b1561113a576040805185815261c364602082015281516000805160206129ff833981519152929181900390910190a161c36491505061121f565b6004808201546000908152602081905260409020906007820154600160601b900460ff16600581111561116957fe5b146111a4576040805186815261c382602082015281516000805160206129ff833981519152929181900390910190a161c3829250505061121f565b60078201805460ff60601b1916600160621b179055600554600183015411156111d557600485905560018201546005555b604080518681526001600160a01b038616602082015281517ff2dbbf0abb1ab1870a5e4d02746747c91d167c855255440b573ba3b5529dc901929181900390910190a16000925050505b92915050565b60065460009081906001600160a01b0316331461127457604080516000815261c396602082015281516000805160206129ff833981519152929181900390910190a15061c39690506000611493565b600084815260208190526040902060036007820154600160601b900460ff16600581111561129e57fe5b141580156112c6575060046007820154600160601b900460ff1660058111156112c357fe5b14155b1561130557604080516000815261c382602082015281516000805160206129ff833981519152929181900390910190a15061c382915060009050611493565b60006113158b8b8b8b8b8b610fe5565b60008181526020819052604081209192506007820154600160601b900460ff16600581111561134057fe5b141561141a576003805463ffffffff90811660009081526001602081905260409091208590558e84558381018e9055600284018d90558383018c9055600484018a905591546007808501805467ffffffff000000001916928416600160201b90810293909317808255918801805463ffffffff60401b19909316600160401b938490048616909601851683029590951763ffffffff19168d8516179055600687015493546113f8949392810483169291900416611c45565b60068201556003805463ffffffff8082166001011663ffffffff199091161790555b60078101805460ff60601b1916600160601b1790556005810180546001600160a01b0319166001600160a01b03881690811790915560408051848152602081019290925280517f64951c9008bba9f4663c12662e7a9b6412a7c4757869fdac09285564ae923fa19281900390910190a150600093509150505b97509795505050505050565b6006546001600160a01b03161580156114c057506001600160a01b03811615155b6114c957600080fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b670de0b6b3a764000081565b60045460009060075b8361150a83610d75565b63ffffffff16111561155d575b61152081611ca3565b8461152a84610d75565b63ffffffff160310801561153e5750600081115b1561154c5760001901611517565b6115568282611ca9565b9150611500565b5092915050565b60008061157087611d4e565b90508651604014156115b05760408051828152614e5c60208201528151600080516020612a3f833981519152929181900390910190a160009150506115d2565b6115bd8187878787611ee7565b600114156115cc5790506115d2565b60009150505b95945050505050565b6006546000906001600160a01b03163314611623576040805184815261c396602082015281516000805160206129ff833981519152929181900390910190a15061c39661121f565b600083815260208190526040902060016007820154600160601b900460ff16600581111561164d57fe5b14158015611675575060026007820154600160601b900460ff16600581111561167257fe5b14155b156116af576040805185815261c364602082015281516000805160206129ff833981519152929181900390910190a161c36491505061121f565b60058101546001600160a01b03848116911614156116fc576040805185815261c387602082015281516000805160206129ff833981519152929181900390910190a161c38791505061121f565b60078101805460ff60601b1916600160611b179055604080518581526001600160a01b038516602082015281517f09cdaca254aa177f759fe7a0968fe696ee9baf7d2a1d4714ed24b83d1f09518e929181900390910190a15060009392505050565b600090815260208190526040902060070154600160601b900460ff1690565b62035b6081565b600061178f83610e0e565b6117a261179b88611d4e565b8787612099565b146117db576040805160008152614e4860208201528151600080516020612a1f833981519152929181900390910190a150614e48611914565b60006117ea8a8a8a8a88611564565b905080156118e25760006117ff8b8386612119565b9050801561183a576040805160008152602081018390528151600080516020612a1f833981519152929181900390910190a191506119149050565b6000828152600260208181526040808420898552848352908420600501548184018054958890529390925260018101805463ffffffff600160a01b6001600160a01b03198381166001600160a01b03948516178281049390931690910263ffffffff60a01b1990921691909117909255948116928516929092178083169085161790925560038201805491821691909316179091556118d8836121f6565b9350505050611914565b604080516000815261753a60208201528151600080516020612a1f833981519152929181900390910190a161753a9150505b98975050505050505050565b60055481565b60045460009081901561193857600080fd5b821561194357600080fd5b6000611953898989898989610fe5565b60008181526020819052604081209192506007820154600160601b900460ff16600581111561197e57fe5b1461198857600080fd5b6003805463ffffffff90811660009081526001602081905260409091208590558c845583018b9055600283018a90558282018990556004808401889055600584018054336001600160a01b03199091161790559154600784018054600160401b67ffffffff0000000019909116928416600160201b029290921763ffffffff60401b19169190911763ffffffff19169189169190911780825560ff60601b1916600160601b830217905550600060068201556003805463ffffffff8082166001011663ffffffff199091161790556040805183815233602082015281517f64951c9008bba9f4663c12662e7a9b6412a7c4757869fdac09285564ae923fa1929181900390910190a1600482905560058990556040805183815233602082015281517ff2dbbf0abb1ab1870a5e4d02746747c91d167c855255440b573ba3b5529dc901929181900390910190a1506000999098509650505050505050565b6184d081565b60045490565b60009081526020819052604090206001015490565b60035463ffffffff1690565b611b1a6129b1565b611b226129b1565b600454808252600090611b3490610fd0565b905060085b8015611b7c5763ffffffff8216600090815260016020526040902054838260098110611b6157fe5b602090810291909101919091529190911c9060001901611b39565b509091505090565b600073__SyscoinMessageLibrary_________________63f9b5d7c0836040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019060200280838360005b83811015611bf0578181015183820152602001611bd8565b505050509050019250505060206040518083038186803b158015611c1357600080fd5b505af4158015611c27573d6000803e3d6000fd5b505050506040513d6020811015611c3d57600080fd5b505192915050565b60006005611c548583866122e6565b945060015b600881108015611c725750818481611c6d57fe5b066001145b15611c9657611c858682600402876122e6565b955060059190910290600101611c59565b85925050505b9392505050565b60050a90565b600082815260208181526040822060060154908290829060036004870201908110611cd057fe5b1a826002600487020160208110611ce357fe5b1a61010002836004870260010160208110611cfa57fe5b1a6201000002846004880260208110611d0f57fe5b1a60f81b60f81c60ff166301000000020101019050600160008263ffffffff1663ffffffff168152602001908152602001600020549250505092915050565b600061121f600280846040516020018082805190602001908083835b60208310611d895780518252601f199092019160209182019101611d6a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310611dec5780518252601f199092019160209182019101611dcd565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015611e2b573d6000803e3d6000fd5b5050506040513d6020811015611e4057600080fd5b50516040805160208181019390935281518082038401815290820191829052805190928291908401908083835b60208310611e8c5780518252601f199092019160209182019101611e6d565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015611ecb573d6000803e3d6000fd5b5050506040513d6020811015611ee057600080fd5b5051612322565b6000611ef282610dbe565b1580611f045750611f0282612345565b155b15611f3c5760408051878152614e3e60208201528151600080516020612a3f833981519152929181900390910190a150614e3e6115d2565b600073__SyscoinMessageLibrary_________________636823c56b856040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611fa5578181015183820152602001611f8d565b50505050905090810190601f168015611fd25780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b158015611fef57600080fd5b505af4158015612003573d6000803e3d6000fd5b505050506040513d602081101561201957600080fd5b5051905080612029888888612099565b146120635760408051888152614e5260208201528151600080516020612a3f833981519152929181900390910190a1614e529150506115d2565b60408051888152600160208201528151600080516020612a3f833981519152929181900390910190a15060019695505050505050565b600083815b83518110156121105760008482815181106120b557fe5b602002602001015190506000600287816120cb57fe5b06905060008082600114156120e45750829050846120ef565b826120ef5750849050825b6120f9828261237a565b95506002890498506001850194505050505061209e565b50949350505050565b600080600080600061212a886123e8565b9196509450925090508015612144579350611c9c92505050565b61214c6129d0565b938452506001600160a01b03918216602080850191825263ffffffff92831660408087019182528886166080880190815260008b81526002948590529182208851815594516001860180549451909716600160a01b0263ffffffff60a01b199189166001600160a01b031995861617919091161790955560609096015191830180549286169282169290921790915591516003909101805491909316911617905590509392505050565b600081815260026020818152604080842060038101548154600183015495830154845163373ff92b60e11b8152600481018a905260248101929092526001600160a01b038088166044840152600160a01b90970463ffffffff16606483015286166084820152925191948694911692636e7ff2569260a4808301939282900301818787803b15801561228757600080fd5b505af115801561229b573d6000803e3d6000fd5b505050506040513d60208110156122b157600080fd5b505160408051868152602081018390528151929350600080516020612a1f833981519152929081900390910190a19392505050565b60008060405185815283601c1a8582015383601d1a6001860182015383601e1a6002860182015383601f1a600386018201535195945050505050565b600060405160005b6020811015611c3d578381601f031a8183015360010161232a565b60008061235183610d75565b63ffffffff16905080612368576000915050610c00565b82612372826114f7565b149392505050565b6000611c9c60028061238b86612322565b61239486612322565b604051602001808381526020018281526020019250505060405160208183030381529060405260405180828051906020019080838360208310611dec5780518252601f199092019160209182019101611dcd565b600080808080808080806123fc8a82612450565b915063ffffffff82166174071461242157506127ba9750929550935091506124499050565b61242c8a60046124df565b90506124388a8261255e565b60009b509199509750955050505050505b9193509193565b600082826003018151811061246157fe5b602001015160f81c60f81b60f81c60ff1663010000000283836002018151811061248757fe5b602001015160f81c60f81b60f81c60ff1662010000028484600101815181106124ac57fe5b602001015160f81c60f81b60f81c60ff16610100028585815181106124cd57fe5b016020015160f81c0101019392505050565b60008060006124ee85856125f2565b945091508161251b5761250185856125f2565b945091508161250c57fe5b61251685856125f2565b945091505b6064821061252857600080fd5b60005b828110156125545760248501945061254386866125f2565b81016004019550915060010161252b565b5092949350505050565b6000808080808080806125718a8a6125f2565b99509050600a811061258257600080fd5b60005b818110156125e15760088a01995061259d8b8b6125f2565b9a5095506125ab8b8b6126a4565b6125bc5798850198600094506125d9565b60018a0199506125cc8b8b6126d3565b91965090945092506125e1565b600101612585565b509296509450925050509250925092565b600080600084848151811061260357fe5b01602001516001949094019360f81c905060fd81101561262a5760ff169150829050610d59565b8060ff1660fd14156126505761264285856010612784565b846002019250925050610d59565b8060ff1660fe14156126765761266885856020612784565b846004019250925050610d59565b8060ff1660ff141561269c5761268e85856040612784565b846008019250925050610d59565b509250929050565b8151600090603560f91b908490849081106126bb57fe5b01602001516001600160f81b03191614905092915050565b60008060008060008060006126e889896127c6565b98509050600460ff8216146126fc57600080fd5b61270689896127f8565b93508060ff168801975061271a89896127c6565b98509050600860ff82161461272e57600080fd5b6127388989612875565b67ffffffffffffffff1691508060ff168801975061275689896127c6565b98509050601460ff82161461276a57600080fd5b61277489896129a9565b9199919850929650945050505050565b6000805b600883048110156127be578060080260020a85828601815181106127a857fe5b016020015160f81c029190910190600101612788565b509392505050565b600080835183106127d657600080fd5b8383815181106127e257fe5b016020015160f81c915050600182019250929050565b600082828151811061280657fe5b602001015160f81c60f81b60f81c60ff1663010000000283836001018151811061282c57fe5b602001015160f81c60f81b60f81c60ff16620100000284846002018151811061285157fe5b602001015160f81c60f81b60f81c60ff16610100028585600301815181106124cd57fe5b600082828151811061288357fe5b602001015160f81c60f81b60f81c60ff16670100000000000000028383600101815181106128ad57fe5b602001015160f81c60f81b60f81c60ff166601000000000000028484600201815181106128d657fe5b602001015160f81c60f81b60f81c60ff1665010000000000028585600301815181106128fe57fe5b602001015160f81c60f81b60f81c60ff16600160201b0286866004018151811061292457fe5b602001015160f81c60f81b60f81c60ff1663010000000287876005018151811061294a57fe5b602001015160f81c60f81b60f81c60ff16620100000288886006018151811061296f57fe5b602001015160f81c60f81b60f81c60ff166101000289896007018151811061299357fe5b016020015160f81c010101010101019392505050565b016014015190565b6040518061012001604052806009906020820280388339509192915050565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091529056fea57c1ba4cf2c89b3558cfeeca4339e04551f0fc1a12cf63f1923c2eed8a5be8b4e64138cc499eb1adf9edff9ef69bd45c56ac4bfd307540952e4c9d51eab55c165bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebda265627a7a72305820cc7efeca75258d3bbcd09791946bb24943c23bb6869b492f8f6367dc5d27127c64736f6c634300050a0032";

    public static final String FUNC_TRUSTEDCLAIMMANAGER = "trustedClaimManager";

    public static final String FUNC_RESPONDLASTBLOCKHEADERCOST = "respondLastBlockHeaderCost";

    public static final String FUNC_BESTSUPERBLOCK = "bestSuperblock";

    public static final String FUNC_MINPROPOSALDEPOSIT = "minProposalDeposit";

    public static final String FUNC_SUPERBLOCKCOST = "superblockCost";

    public static final String FUNC_MINCHALLENGEDEPOSIT = "minChallengeDeposit";

    public static final String FUNC_RESPONDMERKLEROOTHASHESCOST = "respondMerkleRootHashesCost";

    public static final String FUNC_MINREWARD = "minReward";

    public static final String FUNC_VERIFYSUPERBLOCKCOST = "verifySuperblockCost";

    public static final String FUNC_BESTSUPERBLOCKACCUMULATEDWORK = "bestSuperblockAccumulatedWork";

    public static final String FUNC_CHALLENGECOST = "challengeCost";

    public static final String FUNC_SETCLAIMMANAGER = "setClaimManager";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_PROPOSE = "propose";

    public static final String FUNC_CONFIRM = "confirm";

    public static final String FUNC_CHALLENGE = "challenge";

    public static final String FUNC_SEMIAPPROVE = "semiApprove";

    public static final String FUNC_INVALIDATE = "invalidate";

    public static final String FUNC_RELAYTX = "relayTx";

    public static final String FUNC_VERIFYTX = "verifyTx";

    public static final String FUNC_CALCSUPERBLOCKHASH = "calcSuperblockHash";

    public static final String FUNC_GETBESTSUPERBLOCK = "getBestSuperblock";

    public static final String FUNC_GETBESTSUPERBLOCKACCUMULATEDWORK = "getBestSuperblockAccumulatedWork";

    public static final String FUNC_GETSUPERBLOCK = "getSuperblock";

    public static final String FUNC_GETSUPERBLOCKHEIGHT = "getSuperblockHeight";

    public static final String FUNC_GETSUPERBLOCKINDEX = "getSuperblockIndex";

    public static final String FUNC_GETSUPERBLOCKANCESTORS = "getSuperblockAncestors";

    public static final String FUNC_GETSUPERBLOCKMERKLEROOT = "getSuperblockMerkleRoot";

    public static final String FUNC_GETSUPERBLOCKTIMESTAMP = "getSuperblockTimestamp";

    public static final String FUNC_GETSUPERBLOCKLASTHASH = "getSuperblockLastHash";

    public static final String FUNC_GETSUPERBLOCKPARENTID = "getSuperblockParentId";

    public static final String FUNC_GETSUPERBLOCKACCUMULATEDWORK = "getSuperblockAccumulatedWork";

    public static final String FUNC_GETSUPERBLOCKSTATUS = "getSuperblockStatus";

    public static final String FUNC_GETINDEXNEXTSUPERBLOCK = "getIndexNextSuperblock";

    public static final String FUNC_MAKEMERKLE = "makeMerkle";

    public static final String FUNC_ISAPPROVED = "isApproved";

    public static final String FUNC_ISSEMIAPPROVED = "isSemiApproved";

    public static final String FUNC_GETCHAINHEIGHT = "getChainHeight";

    public static final String FUNC_GETSUPERBLOCKLOCATOR = "getSuperblockLocator";

    public static final String FUNC_GETSUPERBLOCKAT = "getSuperblockAt";

    public static final Event NEWSUPERBLOCK_EVENT = new Event("NewSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event APPROVEDSUPERBLOCK_EVENT = new Event("ApprovedSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event CHALLENGESUPERBLOCK_EVENT = new Event("ChallengeSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SEMIAPPROVEDSUPERBLOCK_EVENT = new Event("SemiApprovedSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event INVALIDSUPERBLOCK_EVENT = new Event("InvalidSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event ERRORSUPERBLOCK_EVENT = new Event("ErrorSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event VERIFYTRANSACTION_EVENT = new Event("VerifyTransaction", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event RELAYTRANSACTION_EVENT = new Event("RelayTransaction", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("4", "0x4Cc0677B6891dC3105983863363f32E0a6E95D61");
    }

    @Deprecated
    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Address> trustedClaimManager() {
        final Function function = new Function(FUNC_TRUSTEDCLAIMMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> respondLastBlockHeaderCost() {
        final Function function = new Function(FUNC_RESPONDLASTBLOCKHEADERCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> bestSuperblock() {
        final Function function = new Function(FUNC_BESTSUPERBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minProposalDeposit() {
        final Function function = new Function(FUNC_MINPROPOSALDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> superblockCost() {
        final Function function = new Function(FUNC_SUPERBLOCKCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minChallengeDeposit() {
        final Function function = new Function(FUNC_MINCHALLENGEDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> respondMerkleRootHashesCost() {
        final Function function = new Function(FUNC_RESPONDMERKLEROOTHASHESCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minReward() {
        final Function function = new Function(FUNC_MINREWARD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> verifySuperblockCost() {
        final Function function = new Function(FUNC_VERIFYSUPERBLOCKCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> bestSuperblockAccumulatedWork() {
        final Function function = new Function(FUNC_BESTSUPERBLOCKACCUMULATEDWORK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> challengeCost() {
        final Function function = new Function(FUNC_CHALLENGECOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public List<NewSuperblockEventResponse> getNewSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<NewSuperblockEventResponse> responses = new ArrayList<NewSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewSuperblockEventResponse typedResponse = new NewSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewSuperblockEventResponse> newSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewSuperblockEventResponse>() {
            @Override
            public NewSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWSUPERBLOCK_EVENT, log);
                NewSuperblockEventResponse typedResponse = new NewSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<NewSuperblockEventResponse> newSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWSUPERBLOCK_EVENT));
        return newSuperblockEventFlowable(filter);
    }

    public List<ApprovedSuperblockEventResponse> getApprovedSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVEDSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<ApprovedSuperblockEventResponse> responses = new ArrayList<ApprovedSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovedSuperblockEventResponse typedResponse = new ApprovedSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovedSuperblockEventResponse> approvedSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ApprovedSuperblockEventResponse>() {
            @Override
            public ApprovedSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVEDSUPERBLOCK_EVENT, log);
                ApprovedSuperblockEventResponse typedResponse = new ApprovedSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovedSuperblockEventResponse> approvedSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVEDSUPERBLOCK_EVENT));
        return approvedSuperblockEventFlowable(filter);
    }

    public List<ChallengeSuperblockEventResponse> getChallengeSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHALLENGESUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<ChallengeSuperblockEventResponse> responses = new ArrayList<ChallengeSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChallengeSuperblockEventResponse typedResponse = new ChallengeSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ChallengeSuperblockEventResponse> challengeSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ChallengeSuperblockEventResponse>() {
            @Override
            public ChallengeSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHALLENGESUPERBLOCK_EVENT, log);
                ChallengeSuperblockEventResponse typedResponse = new ChallengeSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ChallengeSuperblockEventResponse> challengeSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHALLENGESUPERBLOCK_EVENT));
        return challengeSuperblockEventFlowable(filter);
    }

    public List<SemiApprovedSuperblockEventResponse> getSemiApprovedSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SEMIAPPROVEDSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<SemiApprovedSuperblockEventResponse> responses = new ArrayList<SemiApprovedSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SemiApprovedSuperblockEventResponse typedResponse = new SemiApprovedSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SemiApprovedSuperblockEventResponse> semiApprovedSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SemiApprovedSuperblockEventResponse>() {
            @Override
            public SemiApprovedSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SEMIAPPROVEDSUPERBLOCK_EVENT, log);
                SemiApprovedSuperblockEventResponse typedResponse = new SemiApprovedSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SemiApprovedSuperblockEventResponse> semiApprovedSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SEMIAPPROVEDSUPERBLOCK_EVENT));
        return semiApprovedSuperblockEventFlowable(filter);
    }

    public List<InvalidSuperblockEventResponse> getInvalidSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INVALIDSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<InvalidSuperblockEventResponse> responses = new ArrayList<InvalidSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvalidSuperblockEventResponse typedResponse = new InvalidSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<InvalidSuperblockEventResponse> invalidSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, InvalidSuperblockEventResponse>() {
            @Override
            public InvalidSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(INVALIDSUPERBLOCK_EVENT, log);
                InvalidSuperblockEventResponse typedResponse = new InvalidSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<InvalidSuperblockEventResponse> invalidSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVALIDSUPERBLOCK_EVENT));
        return invalidSuperblockEventFlowable(filter);
    }

    public List<ErrorSuperblockEventResponse> getErrorSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ERRORSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<ErrorSuperblockEventResponse> responses = new ArrayList<ErrorSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorSuperblockEventResponse typedResponse = new ErrorSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ErrorSuperblockEventResponse> errorSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ErrorSuperblockEventResponse>() {
            @Override
            public ErrorSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ERRORSUPERBLOCK_EVENT, log);
                ErrorSuperblockEventResponse typedResponse = new ErrorSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ErrorSuperblockEventResponse> errorSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ERRORSUPERBLOCK_EVENT));
        return errorSuperblockEventFlowable(filter);
    }

    public List<VerifyTransactionEventResponse> getVerifyTransactionEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VERIFYTRANSACTION_EVENT, transactionReceipt);
        ArrayList<VerifyTransactionEventResponse> responses = new ArrayList<VerifyTransactionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VerifyTransactionEventResponse typedResponse = new VerifyTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VerifyTransactionEventResponse> verifyTransactionEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, VerifyTransactionEventResponse>() {
            @Override
            public VerifyTransactionEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VERIFYTRANSACTION_EVENT, log);
                VerifyTransactionEventResponse typedResponse = new VerifyTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<VerifyTransactionEventResponse> verifyTransactionEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VERIFYTRANSACTION_EVENT));
        return verifyTransactionEventFlowable(filter);
    }

    public List<RelayTransactionEventResponse> getRelayTransactionEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RELAYTRANSACTION_EVENT, transactionReceipt);
        ArrayList<RelayTransactionEventResponse> responses = new ArrayList<RelayTransactionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RelayTransactionEventResponse typedResponse = new RelayTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RelayTransactionEventResponse> relayTransactionEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RelayTransactionEventResponse>() {
            @Override
            public RelayTransactionEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RELAYTRANSACTION_EVENT, log);
                RelayTransactionEventResponse typedResponse = new RelayTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<RelayTransactionEventResponse> relayTransactionEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RELAYTRANSACTION_EVENT));
        return relayTransactionEventFlowable(filter);
    }

    public RemoteCall<TransactionReceipt> setClaimManager(Address _claimManager) {
        final Function function = new Function(
                FUNC_SETCLAIMMANAGER, 
                Arrays.<Type>asList(_claimManager), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> initialize(Bytes32 _blocksMerkleRoot, Uint256 _accumulatedWork, Uint256 _timestamp, Bytes32 _lastHash, Uint32 _lastBits, Bytes32 _parentId) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(_blocksMerkleRoot, _accumulatedWork, _timestamp, _lastHash, _lastBits, _parentId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> propose(Bytes32 _blocksMerkleRoot, Uint256 _accumulatedWork, Uint256 _timestamp, Bytes32 _lastHash, Uint32 _lastBits, Bytes32 _parentId, Address submitter) {
        final Function function = new Function(
                FUNC_PROPOSE, 
                Arrays.<Type>asList(_blocksMerkleRoot, _accumulatedWork, _timestamp, _lastHash, _lastBits, _parentId, submitter), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> confirm(Bytes32 _superblockHash, Address _validator) {
        final Function function = new Function(
                FUNC_CONFIRM, 
                Arrays.<Type>asList(_superblockHash, _validator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> challenge(Bytes32 _superblockHash, Address _challenger) {
        final Function function = new Function(
                FUNC_CHALLENGE, 
                Arrays.<Type>asList(_superblockHash, _challenger), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> semiApprove(Bytes32 _superblockHash, Address _validator) {
        final Function function = new Function(
                FUNC_SEMIAPPROVE, 
                Arrays.<Type>asList(_superblockHash, _validator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> invalidate(Bytes32 _superblockHash, Address _validator) {
        final Function function = new Function(
                FUNC_INVALIDATE, 
                Arrays.<Type>asList(_superblockHash, _validator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> relayTx(DynamicBytes _txBytes, Uint256 _txIndex, DynamicArray<Uint256> _txSiblings, DynamicBytes _syscoinBlockHeader, Uint256 _syscoinBlockIndex, DynamicArray<Uint256> _syscoinBlockSiblings, Bytes32 _superblockHash, Address _untrustedTargetContract) {
        final Function function = new Function(
                FUNC_RELAYTX, 
                Arrays.<Type>asList(_txBytes, _txIndex, _txSiblings, _syscoinBlockHeader, _syscoinBlockIndex, _syscoinBlockSiblings, _superblockHash, _untrustedTargetContract), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> verifyTx(DynamicBytes _txBytes, Uint256 _txIndex, DynamicArray<Uint256> _siblings, DynamicBytes _txBlockHeaderBytes, Bytes32 _txsuperblockHash) {
        final Function function = new Function(
                FUNC_VERIFYTX, 
                Arrays.<Type>asList(_txBytes, _txIndex, _siblings, _txBlockHeaderBytes, _txsuperblockHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Bytes32> calcSuperblockHash(Bytes32 _blocksMerkleRoot, Uint256 _accumulatedWork, Uint256 _timestamp, Bytes32 _lastHash, Uint32 _lastBits, Bytes32 _parentId) {
        final Function function = new Function(FUNC_CALCSUPERBLOCKHASH, 
                Arrays.<Type>asList(_blocksMerkleRoot, _accumulatedWork, _timestamp, _lastHash, _lastBits, _parentId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getBestSuperblock() {
        final Function function = new Function(FUNC_GETBESTSUPERBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getBestSuperblockAccumulatedWork() {
        final Function function = new Function(FUNC_GETBESTSUPERBLOCKACCUMULATEDWORK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple9<Bytes32, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32>> getSuperblock(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCK, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint32>() {}));
        return new RemoteCall<Tuple9<Bytes32, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32>>(
                new Callable<Tuple9<Bytes32, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32>>() {
                    @Override
                    public Tuple9<Bytes32, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple9<Bytes32, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32>(
                                (Bytes32) results.get(0), 
                                (Uint256) results.get(1), 
                                (Uint256) results.get(2), 
                                (Bytes32) results.get(3), 
                                (Uint32) results.get(4), 
                                (Bytes32) results.get(5), 
                                (Address) results.get(6), 
                                (Uint8) results.get(7), 
                                (Uint32) results.get(8));
                    }
                });
    }

    public RemoteCall<Uint32> getSuperblockHeight(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKHEIGHT, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint32> getSuperblockIndex(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKINDEX, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSuperblockAncestors(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKANCESTORS, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSuperblockMerkleRoot(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKMERKLEROOT, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getSuperblockTimestamp(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKTIMESTAMP, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSuperblockLastHash(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKLASTHASH, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSuperblockParentId(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKPARENTID, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getSuperblockAccumulatedWork(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKACCUMULATEDWORK, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint8> getSuperblockStatus(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKSTATUS, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint32> getIndexNextSuperblock() {
        final Function function = new Function(FUNC_GETINDEXNEXTSUPERBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> makeMerkle(DynamicArray<Bytes32> hashes) {
        final Function function = new Function(FUNC_MAKEMERKLE, 
                Arrays.<Type>asList(hashes), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> isApproved(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_ISAPPROVED, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> isSemiApproved(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_ISSEMIAPPROVED, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getChainHeight() {
        final Function function = new Function(FUNC_GETCHAINHEIGHT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<StaticArray9<Bytes32>> getSuperblockLocator() {
        final Function function = new Function(FUNC_GETSUPERBLOCKLOCATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray9<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSuperblockAt(Uint256 _height) {
        final Function function = new Function(FUNC_GETSUPERBLOCKAT, 
                Arrays.<Type>asList(_height), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    @Deprecated
    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SyscoinSuperblocks(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SyscoinSuperblocks(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SyscoinSuperblocks(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SyscoinSuperblocks(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class NewSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address who;
    }

    public static class ApprovedSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address who;
    }

    public static class ChallengeSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address who;
    }

    public static class SemiApprovedSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address who;
    }

    public static class InvalidSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address who;
    }

    public static class ErrorSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Uint256 err;
    }

    public static class VerifyTransactionEventResponse {
        public Log log;

        public Bytes32 txHash;

        public Uint256 returnCode;
    }

    public static class RelayTransactionEventResponse {
        public Log log;

        public Bytes32 txHash;

        public Uint256 returnCode;
    }
}
