package org.sysethereum.agents.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.StaticArray9;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.3.0.
 */
public class SyscoinSuperblocks extends Contract {
    private static final String BINARY = "0x608060405234801561001057600080fd5b50612d6f806100206000396000f3006080604052600436106101be5763ffffffff60e060020a600035041663155ee89481146101c35780631797e5e9146101f457806327426f751461021b5780632da8cffd146102585780632e400191146102705780633288816a146102a15780633ce90e8f146102b6578063455e6166146102ce57806348aefc32146102e357806351fa76781461030f57806355e018ce1461033c5780635b5728121461035457806361bd8d6614610369578063642ed9881461037e5780636ca640a1146103965780636e5b7071146103ab578063742057861461042b5780637b34dcd91461044f57806387a4d3821461046757806390b6f6991461047f57806395b45ee7146104945780639adcca18146104b8578063ad10ad31146104f1578063b6da21441461051e578063ba16d60014610541578063c0dde98b14610556578063c11818a11461056e578063c1f67ab314610647578063cae0581e1461066b578063d035c403146106a7578063d095090a146106bc578063df222357146107e4578063eda1970b146107f9578063f06d520d1461080e578063f2854e3414610823578063f32007e91461083b578063f6f3238a14610850578063f9b5d7c01461089e575b600080fd5b3480156101cf57600080fd5b506101d86108f3565b60408051600160a060020a039092168252519081900360200190f35b34801561020057600080fd5b50610209610902565b60408051918252519081900360200190f35b34801561022757600080fd5b5061023f600435600160a060020a0360243516610908565b6040805192835260208301919091528051918290030190f35b34801561026457600080fd5b50610209600435610a63565b34801561027c57600080fd5b50610288600435610a78565b6040805163ffffffff9092168252519081900360200190f35b3480156102ad57600080fd5b50610209610a9b565b3480156102c257600080fd5b50610209600435610aa1565b3480156102da57600080fd5b50610209610ab6565b3480156102ef57600080fd5b506102fb600435610ac2565b604080519115158252519081900360200190f35b34801561031b57600080fd5b5061020960043560243560443560643560843563ffffffff60a43516610ae1565b34801561034857600080fd5b50610209600435610b93565b34801561036057600080fd5b50610209610ba8565b34801561037557600080fd5b50610209610bce565b34801561038a57600080fd5b50610209600435610bd5565b3480156103a257600080fd5b50610209610be7565b3480156103b757600080fd5b506103c3600435610bf3565b60408051898152602081018990529081018790526060810186905260808101859052600160a060020a03841660a082015260c0810183600581111561040457fe5b60ff16815263ffffffff909216602083015250604080519182900301975095505050505050f35b34801561043757600080fd5b5061023f600435600160a060020a0360243516610c57565b34801561045b57600080fd5b50610209600435610dac565b34801561047357600080fd5b50610288600435610dc1565b34801561048b57600080fd5b50610209610ddc565b3480156104a057600080fd5b50610209600435600160a060020a0360243516610de3565b3480156104c457600080fd5b5061023f60043560243560443560643560843563ffffffff60a43516600160a060020a0360c43516610fb9565b3480156104fd57600080fd5b5061023f60043560243560443560643560843563ffffffff60a4351661125d565b34801561052a57600080fd5b5061053f600160a060020a036004351661143d565b005b34801561054d57600080fd5b50610209611498565b34801561056257600080fd5b506102096004356114a4565b34801561057a57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261020994369492936024939284019190819084018382808284375050604080516020808901358a01803580830284810184018652818552999c8b359c909b909a95019850929650810194509092508291908501908490808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975050933594506115119350505050565b34801561065357600080fd5b50610209600435600160a060020a0360243516611588565b34801561067757600080fd5b5061068360043561171f565b6040518082600581111561069357fe5b60ff16815260200191505060405180910390f35b3480156106b357600080fd5b5061020961173e565b3480156106c857600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261020994369492936024939284019190819084018382808284375050604080516020808901358a01803580830284810184018652818552999c8b359c909b909a95019850929650810194509092508291908501908490808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020808901358a01803580830284810184018652818552999c8b359c909b909a9501985092965081019450909250829190850190849080828437509497505084359550505050602090910135600160a060020a03169050611745565b3480156107f057600080fd5b50610209611910565b34801561080557600080fd5b50610209611916565b34801561081a57600080fd5b5061020961191c565b34801561082f57600080fd5b50610209600435611922565b34801561084757600080fd5b50610288611937565b34801561085c57600080fd5b50610865611943565b604051808261012080838360005b8381101561088b578181015183820152602001610873565b5050505090500191505060405180910390f35b3480156108aa57600080fd5b5060408051602060048035808201358381028086018501909652808552610209953695939460249493850192918291850190849080828437509497506119b99650505050505050565b600654600160a060020a031681565b619c4081565b60065460009081908190600160a060020a03163314610959576040805186815261c39660208201528151600080516020612ce4833981519152929181900390910190a161c396925060009150610a5b565b50600084815260208190526040902060026007820154606060020a900460ff16600581111561098457fe5b141580156109ac575060016007820154606060020a900460ff1660058111156109a957fe5b14155b156109e9576040805186815261c36460208201528151600080516020612ce4833981519152929181900390910190a161c364925060009150610a5b565b6007810180546cff00000000000000000000000019166c0300000000000000000000000017905560408051868152600160a060020a038616602082015281517f87f54f5eb3dd119fe71af0915af693e64a5bfd4acaa19a6c944c47cff8eec9e6929181900390910190a1600085925092505b509250929050565b60009081526020819052604090206002015490565b600090815260208190526040902060070154640100000000900463ffffffff1690565b60045481565b60009081526020819052604090206003015490565b670de0b6b3a76484d081565b60006004610acf8361171f565b6005811115610ada57fe5b1492915050565b604080516020808201899052818301889052606082018790526080820186905260a0820185905260e060020a63ffffffff85160260c0830152825160a481840301815260c4909201928390528151600093918291908401908083835b60208310610b5c5780518252601f199092019160209182019101610b3d565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209a9950505050505050505050565b60009081526020819052604090206004015490565b600454600090815260208190526040902060070154640100000000900463ffffffff1690565b6206b6c081565b60009081526020819052604090205490565b670de0b6b3a76ab6c081565b600090815260208190526040902080546001820154600283015460038401546004850154600586015460079096015494969395929491939092600160a060020a031691606060020a810460ff16916801000000000000000090910463ffffffff1690565b60065460009081908190600160a060020a03163314610ca8576040805186815261c39660208201528151600080516020612ce4833981519152929181900390910190a161c396925060009150610a5b565b50600084815260208190526040902060026007820154606060020a900460ff166005811115610cd357fe5b14158015610cfb575060036007820154606060020a900460ff166005811115610cf857fe5b14155b15610d38576040805186815261c36460208201528151600080516020612ce4833981519152929181900390910190a161c364925060009150610a5b565b6007810180546cff00000000000000000000000019166c0500000000000000000000000017905560408051868152600160a060020a038616602082015281517f64297372062dfcb21d6f7385f68d4656e993be2bb674099e3de73128d4911a91929181900390910190a15060009492505050565b60009081526020819052604090206006015490565b60009081526020819052604090206007015463ffffffff1690565b6205c49081565b60065460009081908190600160a060020a03163314610e30576040805186815261c39660208201528151600080516020612ce4833981519152929181900390910190a161c3969250610fb1565b6000858152602081905260409020915060016007830154606060020a900460ff166005811115610e5c57fe5b14158015610e84575060036007830154606060020a900460ff166005811115610e8157fe5b14155b15610ebd576040805186815261c36460208201528151600080516020612ce4833981519152929181900390910190a161c3649250610fb1565b506004808201546000908152602081905260409020906007820154606060020a900460ff166005811115610eed57fe5b14610f26576040805186815261c38260208201528151600080516020612ce4833981519152929181900390910190a161c3829250610fb1565b6007820180546cff00000000000000000000000019166c0400000000000000000000000017905560055460018301541115610f6957600485905560018201546005555b60408051868152600160a060020a038616602082015281517ff2dbbf0abb1ab1870a5e4d02746747c91d167c855255440b573ba3b5529dc901929181900390910190a1600092505b505092915050565b6006546000908190819081908190600160a060020a0316331461100f57604080516000815261c39660208201528151600080516020612ce4833981519152929181900390910190a161c39694506000935061124e565b6000888152602081905260409020925060036007840154606060020a900460ff16600581111561103b57fe5b14158015611063575060046007840154606060020a900460ff16600581111561106057fe5b14155b156110a0576040805183815261c38260208201528151600080516020612ce4833981519152929181900390910190a161c38294506000935061124e565b6110ae8c8c8c8c8c8c610ae1565b60008181526020819052604081209193509091506007820154606060020a900460ff1660058111156110dc57fe5b14156111c0576003805463ffffffff90811660009081526001602081905260409091208590558e84558381018e9055600284018d90558383018c9055600484018b905591546007808501805492841663ffffffff1990931692909217808355908701805467ffffffff000000001990921664010000000092839004851690950184168202949094176bffffffff00000000000000001916680100000000000000008c851602179091556006860154925461119e93928181169290910416611a7d565b60068201556003805463ffffffff8082166001011663ffffffff199091161790555b6007810180546cff0000000000000000000000001916606060020a17905560058101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03881690811790915560408051848152602081019290925280517f64951c9008bba9f4663c12662e7a9b6412a7c4757869fdac09285564ae923fa19281900390910190a1600082945094505b50505097509795505050505050565b6004546000908190819081901561127357600080fd5b851561127e57600080fd5b61128c8a8a8a8a8a8a610ae1565b60008181526020819052604081209193509091506007820154606060020a900460ff1660058111156112ba57fe5b146112c457600080fd5b6003805463ffffffff90811660009081526001602081815260408084208890558f87558683018f9055600287018e90558686018d9055600487018c90556005870180543373ffffffffffffffffffffffffffffffffffffffff199091168117909155865460078901805460068b01979097558d8816680100000000000000000264010000000092891663ffffffff199889161767ffffffff000000001916929092176cff00000000000000000000000019166c04000000000000000000000000176bffffffff000000000000000019169190911790558654808716909401909516929093169190911790935580518581529283019190915280517f64951c9008bba9f4663c12662e7a9b6412a7c4757869fdac09285564ae923fa19281900390910190a1600482905560058990556040805183815233602082015281517ff2dbbf0abb1ab1870a5e4d02746747c91d167c855255440b573ba3b5529dc901929181900390910190a1506000999098509650505050505050565b600654600160a060020a031615801561145e5750600160a060020a03811615155b151561146957600080fd5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b670de0b6b3a764000081565b60045460009060075b836114b783610a78565b63ffffffff16111561150a575b6114cd81611add565b846114d784610a78565b63ffffffff16031080156114eb5750600081115b156114f957600019016114c4565b6115038282611ae3565b91506114ad565b5092915050565b60008061151d87611bb7565b905086516040141561155c5760408051828152614e5c60208201528151600080516020612d24833981519152929181900390910190a16000915061157e565b6115698187878787611d5a565b600114156115795780915061157e565b600091505b5095945050505050565b6006546000908190600160a060020a031633146115d3576040805185815261c39660208201528151600080516020612ce4833981519152929181900390910190a161c396915061150a565b50600083815260208190526040902060016007820154606060020a900460ff1660058111156115fe57fe5b14158015611626575060026007820154606060020a900460ff16600581111561162357fe5b14155b1561165f576040805185815261c36460208201528151600080516020612ce4833981519152929181900390910190a161c364915061150a565b6005810154600160a060020a03848116911614156116ab576040805185815261c38760208201528151600080516020612ce4833981519152929181900390910190a161c387915061150a565b6007810180546cff00000000000000000000000019166c0200000000000000000000000017905560408051858152600160a060020a038516602082015281517f09cdaca254aa177f759fe7a0968fe696ee9baf7d2a1d4714ed24b83d1f09518e929181900390910190a15060009392505050565b600090815260208190526040902060070154606060020a900460ff1690565b62035b6081565b60008060008061175486610bd5565b6117676117608b611bb7565b8a8a611f22565b146117a1576040805160008152614e4860208201528151600080516020612d04833981519152929181900390910190a1614e489350611901565b6117ae8c8c8c8c8a611511565b925082156118d0576117c18c8487611f9f565b915081156117fb576040805160008152602081018490528151600080516020612d04833981519152929181900390910190a1819350611901565b506000828152600260208181526040808420898552848352908420600501548184018054958890529390925260018101805463ffffffff7401000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff19838116600160a060020a03948516178281049390931690910277ffffffff00000000000000000000000000000000000000001990921691909117909255948116928516929092178083169085161790925560038201805491821691909316179091556118c9836120b0565b9350611901565b604080516000815261753a60208201528151600080516020612d04833981519152929181900390910190a161753a93505b50505098975050505050505050565b60055481565b6184d081565b60045490565b60009081526020819052604090206001015490565b60035463ffffffff1690565b61194b612c95565b611953612c95565b600454808252600090819061196790610dac565b9150600890505b60008111156119b15763ffffffff821660009081526001602052604090205483826009811061199957fe5b6020020152640100000000909104906000190161196e565b509092915050565b600073__SyscoinMessageLibrary_________________63f9b5d7c0836040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019060200280838360005b83811015611a28578181015183820152602001611a10565b505050509050019250505060206040518083038186803b158015611a4b57600080fd5b505af4158015611a5f573d6000803e3d6000fd5b505050506040513d6020811015611a7557600080fd5b505192915050565b6000600581611a8d8682876121ca565b9550600190505b600881108015611aaf57508184811515611aaa57fe5b066001145b15611ad357611ac28682600402876121ca565b955060059190910290600101611a94565b5093949350505050565b60050a90565b600082815260208181526040822060060154908290829060036004870201908110611b0a57fe5b60f860020a91901a810204826002600487020160208110611b2757fe5b1a60f860020a0260f860020a9004610100028386600402600101602081101515611b4d57fe5b1a60f860020a0260f860020a900462010000028487600402600001602081101515611b7457fe5b1a60f860020a0260f860020a90046301000000020101019050600160008263ffffffff1663ffffffff168152602001908152602001600020549250505092915050565b6000611d54600280846040516020018082805190602001908083835b60208310611bf25780518252601f199092019160209182019101611bd3565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310611c555780518252601f199092019160209182019101611c36565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015611c96573d6000803e3d6000fd5b5050506040513d6020811015611cab57600080fd5b50516040805160208181019390935281518082038401815290820191829052805190928291908401908083835b60208310611cf75780518252601f199092019160209182019101611cd8565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015611d38573d6000803e3d6000fd5b5050506040513d6020811015611d4d57600080fd5b5051612206565b92915050565b600080611d6683610ac2565b1580611d785750611d7683612229565b155b15611db15760408051888152614e3e60208201528151600080516020612d24833981519152929181900390910190a1614e3e915061157e565b6040517f6823c56b00000000000000000000000000000000000000000000000000000000815260206004820181815286516024840152865173__SyscoinMessageLibrary_________________93636823c56b9389939283926044019185019080838360005b83811015611e2f578181015183820152602001611e17565b50505050905090810190601f168015611e5c5780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b158015611e7957600080fd5b505af4158015611e8d573d6000803e3d6000fd5b505050506040513d6020811015611ea357600080fd5b5051905080611eb3888888611f22565b14611eec5760408051888152614e5260208201528151600080516020612d24833981519152929181900390910190a1614e52915061157e565b60408051888152600160208201528151600080516020612d24833981519152929181900390910190a15060019695505050505050565b60008381808080805b8751851015611f91578785815181101515611f4257fe5b6020908102909101015193506002890692508260011415611f67575082905084611f74565b821515611f745750849050825b611f7e8282612261565b9550600289049850600185019450611f2b565b509398975050505050505050565b6000806000806000611faf612cb5565b611fb8896122d6565b9197509550935091508115611fcf578195506120a4565b848152600160a060020a03808516602080840191825263ffffffff80871660408087019182528c86166080880190815260008f81526002958690529182208851815595516001870180549451909516740100000000000000000000000000000000000000000277ffffffff00000000000000000000000000000000000000001991891673ffffffffffffffffffffffffffffffffffffffff1995861617919091161790935560608701519385018054948716948316949094179093559051600390930180549390941692169190911790915595505b50505050509392505050565b60008181526002602081815260408084206003810154815460018301549583015484517f6e7ff256000000000000000000000000000000000000000000000000000000008152600481018a90526024810192909252600160a060020a0380881660448401527401000000000000000000000000000000000000000090970463ffffffff16606483015286166084820152925191948694911692636e7ff2569260a4808301939282900301818787803b15801561216b57600080fd5b505af115801561217f573d6000803e3d6000fd5b505050506040513d602081101561219557600080fd5b505160408051868152602081018390528151929350600080516020612d04833981519152929081900390910190a19392505050565b60008060405185815283601c1a8582015383601d1a6001860182015383601e1a6002860182015383601f1a600386018201535195945050505050565b600060405160005b6020811015611a75578381601f031a8183015360010161220e565b60008061223583610a78565b63ffffffff16905080151561224d576000915061225b565b82612257826114a4565b1491505b50919050565b60006122cf60028061227286612206565b61227b86612206565b604051602001808381526020018281526020019250505060405160208183030381529060405260405180828051906020019080838360208310611c555780518252601f199092019160209182019101611c36565b9392505050565b600080808080808080806122ea8a82612346565b915063ffffffff82166174071461230e576127ba858486985098509850985061233a565b6123198a6004612401565b90506123258a82612486565b60009b50919950975095508794508593508692505b50505050509193509193565b6000828260030181518110151561235957fe5b90602001015160f860020a900460f860020a0260f860020a9004630100000002838360020181518110151561238a57fe5b90602001015160f860020a900460f860020a0260f860020a9004620100000284846001018151811015156123ba57fe5b90602001015160f860020a900460f860020a0260f860020a90046101000285858151811015156123e657fe5b016020015160f860020a908190048102040101019392505050565b600080600080612411868661251e565b9550925082151561244257612426868661251e565b9550925082151561243357fe5b61243d868661251e565b955092505b6064831061244f57600080fd5b5060005b8281101561247c5760248501945061246b868661251e565b810160040195509150600101612453565b5092949350505050565b6000808080808080808061249a8b8b61251e565b9a509150600a82106124ab57600080fd5b5060005b8181101561250d5760088a0199506124c78b8b61251e565b9a5095506124d58b8b6125dc565b15156124e8579885019860009450612505565b60018a0199506124f88b8b61264d565b919650909450925061250d565b6001016124af565b509299909850909650945050505050565b6000806000848481518110151561253157fe5b90602001015160f860020a900460f860020a0260f860020a9004905060018401935060fd8160ff16101561256d5760ff81169250839150610a5b565b8060ff1660fd141561259257612585858560106126fe565b8460020192509250610a5b565b8060ff1660fe14156125b7576125aa858560206126fe565b8460040192509250610a5b565b8060ff1660ff1415610a5b576125cf858560406126fe565b8460080192509250610a5b565b81516000907f6a000000000000000000000000000000000000000000000000000000000000009084908490811061260f57fe5b90602001015160f860020a900460f860020a027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614905092915050565b60008060008060008060006126628989612a21565b98509050600460ff82161461267657600080fd5b6126808989612a60565b93508060ff16880197506126948989612a21565b98509050600860ff8216146126a857600080fd5b6126b28989612b00565b67ffffffffffffffff1691508060ff16880197506126d08989612a21565b98509050601460ff8216146126e457600080fd5b6126ee8989612c8d565b9199919850929650945050505050565b6000816008141561273b57838381518110151561271757fe5b90602001015160f860020a900460f860020a0260f860020a900460ff1690506122cf565b81601014156127a757838360010181518110151561275557fe5b90602001015160f860020a900460f860020a0260f860020a900461010002848481518110151561278157fe5b90602001015160f860020a900460f860020a0260f860020a90040161ffff1690506122cf565b81602014156128785783836003018151811015156127c157fe5b90602001015160f860020a900460f860020a0260f860020a900463010000000284846002018151811015156127f257fe5b90602001015160f860020a900460f860020a0260f860020a90046201000002858560010181518110151561282257fe5b90602001015160f860020a900460f860020a0260f860020a900461010002868681518110151561284e57fe5b90602001015160f860020a900460f860020a0260f860020a900401010163ffffffff1690506122cf565b81604014156122cf57838360070181518110151561289257fe5b90602001015160f860020a900460f860020a0260f860020a90046701000000000000000284846006018151811015156128c757fe5b90602001015160f860020a900460f860020a0260f860020a900466010000000000000285856005018151811015156128fb57fe5b90602001015160f860020a900460f860020a0260f860020a90046501000000000002868660040181518110151561292e57fe5b90602001015160f860020a900460f860020a0260f860020a900464010000000002878760030181518110151561296057fe5b90602001015160f860020a900460f860020a0260f860020a9004630100000002888860020181518110151561299157fe5b90602001015160f860020a900460f860020a0260f860020a9004620100000289896001018151811015156129c157fe5b90602001015160f860020a900460f860020a0260f860020a9004610100028a8a8151811015156129ed57fe5b90602001015160f860020a900460f860020a0260f860020a90040101010101010167ffffffffffffffff1690509392505050565b600080835183101515612a3357600080fd5b8383815181101515612a4157fe5b016020015160f860020a90819004810204915050600182019250929050565b60008282815181101515612a7057fe5b90602001015160f860020a900460f860020a0260f860020a90046301000000028383600101815181101515612aa157fe5b90602001015160f860020a900460f860020a0260f860020a900462010000028484600201815181101515612ad157fe5b90602001015160f860020a900460f860020a0260f860020a90046101000285856003018151811015156123e657fe5b60008282815181101515612b1057fe5b90602001015160f860020a900460f860020a0260f860020a9004670100000000000000028383600101815181101515612b4557fe5b90602001015160f860020a900460f860020a0260f860020a90046601000000000000028484600201815181101515612b7957fe5b90602001015160f860020a900460f860020a0260f860020a900465010000000000028585600301815181101515612bac57fe5b90602001015160f860020a900460f860020a0260f860020a9004640100000000028686600401815181101515612bde57fe5b90602001015160f860020a900460f860020a0260f860020a90046301000000028787600501815181101515612c0f57fe5b90602001015160f860020a900460f860020a0260f860020a900462010000028888600601815181101515612c3f57fe5b90602001015160f860020a900460f860020a0260f860020a9004610100028989600701815181101515612c6e57fe5b016020015160f860020a90819004810204010101010101019392505050565b016014015190565b610120604051908101604052806009906020820280388339509192915050565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152905600a57c1ba4cf2c89b3558cfeeca4339e04551f0fc1a12cf63f1923c2eed8a5be8b4e64138cc499eb1adf9edff9ef69bd45c56ac4bfd307540952e4c9d51eab55c165bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebda165627a7a7230582055768bcb2d9861f455fedbf071c14f2866f896ec5b7e15ac313b2c16610f1bdd0029";

    public static final String FUNC_TRUSTEDCLAIMMANAGER = "trustedClaimManager";

    public static final String FUNC_RESPONDLASTBLOCKHEADERCOST = "respondLastBlockHeaderCost";

    public static final String FUNC_BESTSUPERBLOCK = "bestSuperblock";

    public static final String FUNC_MINPROPOSALDEPOSIT = "minProposalDeposit";

    public static final String FUNC_SUPERBLOCKCOST = "superblockCost";

    public static final String FUNC_MINCHALLENGEDEPOSIT = "minChallengeDeposit";

    public static final String FUNC_RESPONDMERKLEROOTHASHESCOST = "respondMerkleRootHashesCost";

    public static final String FUNC_MINREWARD = "minReward";

    public static final String FUNC_VERIFYSUPERBLOCKCOST = "verifySuperblockCost";

    public static final String FUNC_BESTSUPERBLOCKACCUMULATEDWORK = "bestSuperblockAccumulatedWork";

    public static final String FUNC_CHALLENGECOST = "challengeCost";

    public static final String FUNC_SETCLAIMMANAGER = "setClaimManager";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_PROPOSE = "propose";

    public static final String FUNC_CONFIRM = "confirm";

    public static final String FUNC_CHALLENGE = "challenge";

    public static final String FUNC_SEMIAPPROVE = "semiApprove";

    public static final String FUNC_INVALIDATE = "invalidate";

    public static final String FUNC_RELAYTX = "relayTx";

    public static final String FUNC_VERIFYTX = "verifyTx";

    public static final String FUNC_CALCSUPERBLOCKHASH = "calcSuperblockHash";

    public static final String FUNC_GETBESTSUPERBLOCK = "getBestSuperblock";

    public static final String FUNC_GETSUPERBLOCK = "getSuperblock";

    public static final String FUNC_GETSUPERBLOCKHEIGHT = "getSuperblockHeight";

    public static final String FUNC_GETSUPERBLOCKINDEX = "getSuperblockIndex";

    public static final String FUNC_GETSUPERBLOCKANCESTORS = "getSuperblockAncestors";

    public static final String FUNC_GETSUPERBLOCKMERKLEROOT = "getSuperblockMerkleRoot";

    public static final String FUNC_GETSUPERBLOCKTIMESTAMP = "getSuperblockTimestamp";

    public static final String FUNC_GETSUPERBLOCKLASTHASH = "getSuperblockLastHash";

    public static final String FUNC_GETSUPERBLOCKPARENTID = "getSuperblockParentId";

    public static final String FUNC_GETSUPERBLOCKACCUMULATEDWORK = "getSuperblockAccumulatedWork";

    public static final String FUNC_GETSUPERBLOCKSTATUS = "getSuperblockStatus";

    public static final String FUNC_GETINDEXNEXTSUPERBLOCK = "getIndexNextSuperblock";

    public static final String FUNC_MAKEMERKLE = "makeMerkle";

    public static final String FUNC_ISAPPROVED = "isApproved";

    public static final String FUNC_GETCHAINHEIGHT = "getChainHeight";

    public static final String FUNC_GETSUPERBLOCKLOCATOR = "getSuperblockLocator";

    public static final String FUNC_GETSUPERBLOCKAT = "getSuperblockAt";

    public static final Event NEWSUPERBLOCK_EVENT = new Event("NewSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event APPROVEDSUPERBLOCK_EVENT = new Event("ApprovedSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event CHALLENGESUPERBLOCK_EVENT = new Event("ChallengeSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SEMIAPPROVEDSUPERBLOCK_EVENT = new Event("SemiApprovedSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event INVALIDSUPERBLOCK_EVENT = new Event("InvalidSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event ERRORSUPERBLOCK_EVENT = new Event("ErrorSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event VERIFYTRANSACTION_EVENT = new Event("VerifyTransaction", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event RELAYTRANSACTION_EVENT = new Event("RelayTransaction", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("4", "0x589884a87025722AFBA2c68F484D6a6B0b7a5f9C");
    }

    @Deprecated
    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Address> trustedClaimManager() {
        final Function function = new Function(FUNC_TRUSTEDCLAIMMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> respondLastBlockHeaderCost() {
        final Function function = new Function(FUNC_RESPONDLASTBLOCKHEADERCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> bestSuperblock() {
        final Function function = new Function(FUNC_BESTSUPERBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minProposalDeposit() {
        final Function function = new Function(FUNC_MINPROPOSALDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> superblockCost() {
        final Function function = new Function(FUNC_SUPERBLOCKCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minChallengeDeposit() {
        final Function function = new Function(FUNC_MINCHALLENGEDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> respondMerkleRootHashesCost() {
        final Function function = new Function(FUNC_RESPONDMERKLEROOTHASHESCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minReward() {
        final Function function = new Function(FUNC_MINREWARD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> verifySuperblockCost() {
        final Function function = new Function(FUNC_VERIFYSUPERBLOCKCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> bestSuperblockAccumulatedWork() {
        final Function function = new Function(FUNC_BESTSUPERBLOCKACCUMULATEDWORK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> challengeCost() {
        final Function function = new Function(FUNC_CHALLENGECOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public List<NewSuperblockEventResponse> getNewSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<NewSuperblockEventResponse> responses = new ArrayList<NewSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewSuperblockEventResponse typedResponse = new NewSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewSuperblockEventResponse> newSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewSuperblockEventResponse>() {
            @Override
            public NewSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWSUPERBLOCK_EVENT, log);
                NewSuperblockEventResponse typedResponse = new NewSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<NewSuperblockEventResponse> newSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWSUPERBLOCK_EVENT));
        return newSuperblockEventFlowable(filter);
    }

    public List<ApprovedSuperblockEventResponse> getApprovedSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVEDSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<ApprovedSuperblockEventResponse> responses = new ArrayList<ApprovedSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovedSuperblockEventResponse typedResponse = new ApprovedSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovedSuperblockEventResponse> approvedSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ApprovedSuperblockEventResponse>() {
            @Override
            public ApprovedSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVEDSUPERBLOCK_EVENT, log);
                ApprovedSuperblockEventResponse typedResponse = new ApprovedSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovedSuperblockEventResponse> approvedSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVEDSUPERBLOCK_EVENT));
        return approvedSuperblockEventFlowable(filter);
    }

    public List<ChallengeSuperblockEventResponse> getChallengeSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHALLENGESUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<ChallengeSuperblockEventResponse> responses = new ArrayList<ChallengeSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChallengeSuperblockEventResponse typedResponse = new ChallengeSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ChallengeSuperblockEventResponse> challengeSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ChallengeSuperblockEventResponse>() {
            @Override
            public ChallengeSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHALLENGESUPERBLOCK_EVENT, log);
                ChallengeSuperblockEventResponse typedResponse = new ChallengeSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ChallengeSuperblockEventResponse> challengeSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHALLENGESUPERBLOCK_EVENT));
        return challengeSuperblockEventFlowable(filter);
    }

    public List<SemiApprovedSuperblockEventResponse> getSemiApprovedSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SEMIAPPROVEDSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<SemiApprovedSuperblockEventResponse> responses = new ArrayList<SemiApprovedSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SemiApprovedSuperblockEventResponse typedResponse = new SemiApprovedSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SemiApprovedSuperblockEventResponse> semiApprovedSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SemiApprovedSuperblockEventResponse>() {
            @Override
            public SemiApprovedSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SEMIAPPROVEDSUPERBLOCK_EVENT, log);
                SemiApprovedSuperblockEventResponse typedResponse = new SemiApprovedSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SemiApprovedSuperblockEventResponse> semiApprovedSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SEMIAPPROVEDSUPERBLOCK_EVENT));
        return semiApprovedSuperblockEventFlowable(filter);
    }

    public List<InvalidSuperblockEventResponse> getInvalidSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INVALIDSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<InvalidSuperblockEventResponse> responses = new ArrayList<InvalidSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvalidSuperblockEventResponse typedResponse = new InvalidSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<InvalidSuperblockEventResponse> invalidSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, InvalidSuperblockEventResponse>() {
            @Override
            public InvalidSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(INVALIDSUPERBLOCK_EVENT, log);
                InvalidSuperblockEventResponse typedResponse = new InvalidSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<InvalidSuperblockEventResponse> invalidSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVALIDSUPERBLOCK_EVENT));
        return invalidSuperblockEventFlowable(filter);
    }

    public List<ErrorSuperblockEventResponse> getErrorSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ERRORSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<ErrorSuperblockEventResponse> responses = new ArrayList<ErrorSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorSuperblockEventResponse typedResponse = new ErrorSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ErrorSuperblockEventResponse> errorSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ErrorSuperblockEventResponse>() {
            @Override
            public ErrorSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ERRORSUPERBLOCK_EVENT, log);
                ErrorSuperblockEventResponse typedResponse = new ErrorSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ErrorSuperblockEventResponse> errorSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ERRORSUPERBLOCK_EVENT));
        return errorSuperblockEventFlowable(filter);
    }

    public List<VerifyTransactionEventResponse> getVerifyTransactionEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VERIFYTRANSACTION_EVENT, transactionReceipt);
        ArrayList<VerifyTransactionEventResponse> responses = new ArrayList<VerifyTransactionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VerifyTransactionEventResponse typedResponse = new VerifyTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VerifyTransactionEventResponse> verifyTransactionEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, VerifyTransactionEventResponse>() {
            @Override
            public VerifyTransactionEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VERIFYTRANSACTION_EVENT, log);
                VerifyTransactionEventResponse typedResponse = new VerifyTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<VerifyTransactionEventResponse> verifyTransactionEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VERIFYTRANSACTION_EVENT));
        return verifyTransactionEventFlowable(filter);
    }

    public List<RelayTransactionEventResponse> getRelayTransactionEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RELAYTRANSACTION_EVENT, transactionReceipt);
        ArrayList<RelayTransactionEventResponse> responses = new ArrayList<RelayTransactionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RelayTransactionEventResponse typedResponse = new RelayTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RelayTransactionEventResponse> relayTransactionEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RelayTransactionEventResponse>() {
            @Override
            public RelayTransactionEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RELAYTRANSACTION_EVENT, log);
                RelayTransactionEventResponse typedResponse = new RelayTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<RelayTransactionEventResponse> relayTransactionEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RELAYTRANSACTION_EVENT));
        return relayTransactionEventFlowable(filter);
    }

    public RemoteCall<TransactionReceipt> setClaimManager(Address _claimManager) {
        final Function function = new Function(
                FUNC_SETCLAIMMANAGER, 
                Arrays.<Type>asList(_claimManager), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> initialize(Bytes32 _blocksMerkleRoot, Uint256 _accumulatedWork, Uint256 _timestamp, Bytes32 _lastHash, Bytes32 _parentId, Uint32 _blockHeight) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(_blocksMerkleRoot, _accumulatedWork, _timestamp, _lastHash, _parentId, _blockHeight), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> propose(Bytes32 _blocksMerkleRoot, Uint256 _accumulatedWork, Uint256 _timestamp, Bytes32 _lastHash, Bytes32 _parentId, Uint32 _blockHeight, Address submitter) {
        final Function function = new Function(
                FUNC_PROPOSE, 
                Arrays.<Type>asList(_blocksMerkleRoot, _accumulatedWork, _timestamp, _lastHash, _parentId, _blockHeight, submitter), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> confirm(Bytes32 _superblockHash, Address _validator) {
        final Function function = new Function(
                FUNC_CONFIRM, 
                Arrays.<Type>asList(_superblockHash, _validator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> challenge(Bytes32 _superblockHash, Address _challenger) {
        final Function function = new Function(
                FUNC_CHALLENGE, 
                Arrays.<Type>asList(_superblockHash, _challenger), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> semiApprove(Bytes32 _superblockHash, Address _validator) {
        final Function function = new Function(
                FUNC_SEMIAPPROVE, 
                Arrays.<Type>asList(_superblockHash, _validator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> invalidate(Bytes32 _superblockHash, Address _validator) {
        final Function function = new Function(
                FUNC_INVALIDATE, 
                Arrays.<Type>asList(_superblockHash, _validator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> relayTx(DynamicBytes _txBytes, Uint256 _txIndex, DynamicArray<Uint256> _txSiblings, DynamicBytes _syscoinBlockHeader, Uint256 _syscoinBlockIndex, DynamicArray<Uint256> _syscoinBlockSiblings, Bytes32 _superblockHash, Address _untrustedTargetContract) {
        final Function function = new Function(
                FUNC_RELAYTX, 
                Arrays.<Type>asList(_txBytes, _txIndex, _txSiblings, _syscoinBlockHeader, _syscoinBlockIndex, _syscoinBlockSiblings, _superblockHash, _untrustedTargetContract), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> verifyTx(DynamicBytes _txBytes, Uint256 _txIndex, DynamicArray<Uint256> _siblings, DynamicBytes _txBlockHeaderBytes, Bytes32 _txsuperblockHash) {
        final Function function = new Function(
                FUNC_VERIFYTX, 
                Arrays.<Type>asList(_txBytes, _txIndex, _siblings, _txBlockHeaderBytes, _txsuperblockHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Bytes32> calcSuperblockHash(Bytes32 _blocksMerkleRoot, Uint256 _accumulatedWork, Uint256 _timestamp, Bytes32 _lastHash, Bytes32 _parentId, Uint32 _blockHeight) {
        final Function function = new Function(FUNC_CALCSUPERBLOCKHASH, 
                Arrays.<Type>asList(_blocksMerkleRoot, _accumulatedWork, _timestamp, _lastHash, _parentId, _blockHeight), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getBestSuperblock() {
        final Function function = new Function(FUNC_GETBESTSUPERBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple8<Bytes32, Uint256, Uint256, Bytes32, Bytes32, Address, Uint8, Uint32>> getSuperblock(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCK, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint32>() {}));
        return new RemoteCall<Tuple8<Bytes32, Uint256, Uint256, Bytes32, Bytes32, Address, Uint8, Uint32>>(
                new Callable<Tuple8<Bytes32, Uint256, Uint256, Bytes32, Bytes32, Address, Uint8, Uint32>>() {
                    @Override
                    public Tuple8<Bytes32, Uint256, Uint256, Bytes32, Bytes32, Address, Uint8, Uint32> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<Bytes32, Uint256, Uint256, Bytes32, Bytes32, Address, Uint8, Uint32>(
                                (Bytes32) results.get(0), 
                                (Uint256) results.get(1), 
                                (Uint256) results.get(2), 
                                (Bytes32) results.get(3), 
                                (Bytes32) results.get(4), 
                                (Address) results.get(5), 
                                (Uint8) results.get(6), 
                                (Uint32) results.get(7));
                    }
                });
    }

    public RemoteCall<Uint32> getSuperblockHeight(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKHEIGHT, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint32> getSuperblockIndex(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKINDEX, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSuperblockAncestors(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKANCESTORS, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSuperblockMerkleRoot(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKMERKLEROOT, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getSuperblockTimestamp(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKTIMESTAMP, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSuperblockLastHash(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKLASTHASH, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSuperblockParentId(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKPARENTID, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getSuperblockAccumulatedWork(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKACCUMULATEDWORK, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint8> getSuperblockStatus(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKSTATUS, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint32> getIndexNextSuperblock() {
        final Function function = new Function(FUNC_GETINDEXNEXTSUPERBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> makeMerkle(DynamicArray<Bytes32> hashes) {
        final Function function = new Function(FUNC_MAKEMERKLE, 
                Arrays.<Type>asList(hashes), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> isApproved(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_ISAPPROVED, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getChainHeight() {
        final Function function = new Function(FUNC_GETCHAINHEIGHT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<StaticArray9<Bytes32>> getSuperblockLocator() {
        final Function function = new Function(FUNC_GETSUPERBLOCKLOCATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray9<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSuperblockAt(Uint256 _height) {
        final Function function = new Function(FUNC_GETSUPERBLOCKAT, 
                Arrays.<Type>asList(_height), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    @Deprecated
    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SyscoinSuperblocks(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SyscoinSuperblocks(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SyscoinSuperblocks(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SyscoinSuperblocks(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class NewSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address who;
    }

    public static class ApprovedSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address who;
    }

    public static class ChallengeSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address who;
    }

    public static class SemiApprovedSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address who;
    }

    public static class InvalidSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address who;
    }

    public static class ErrorSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Uint256 err;
    }

    public static class VerifyTransactionEventResponse {
        public Log log;

        public Bytes32 txHash;

        public Uint256 returnCode;
    }

    public static class RelayTransactionEventResponse {
        public Log log;

        public Bytes32 txHash;

        public Uint256 returnCode;
    }
}
