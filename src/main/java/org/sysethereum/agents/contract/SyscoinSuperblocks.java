package org.sysethereum.agents.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.StaticArray9;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple10;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.3.0.
 */
public class SyscoinSuperblocks extends Contract {
    private static final String BINARY = "0x608060405234801561001057600080fd5b50612f39806100206000396000f3006080604052600436106101c95763ffffffff60e060020a600035041663155ee89481146101ce57806327426f75146101ff5780632da8cffd1461023c5780632e400191146102665780633288816a146102975780633ce90e8f146102ac578063455e6166146102c457806348aefc32146102d95780635403af471461030557806355e018ce1461031a5780635b5728121461033257806361bd8d6614610347578063642ed9881461035c5780636ca640a1146103745780636e5b707114610389578063742057861461041f5780637b34dcd91461044357806387a4d3821461045b57806390b6f6991461047357806395b45ee714610488578063b6da2144146104ac578063ba16d600146104cf578063c0dde98b146104e4578063c11818a1146104fc578063c1f67ab3146105d5578063cae0581e146105f9578063cfd77bf314610635578063d035c4031461066c578063d095090a14610681578063df222357146107a9578063df705473146107be578063e52a9a47146107d6578063eda1970b1461081a578063f06d520d1461082f578063f0a06beb14610844578063f2854e341461087b578063f32007e914610893578063f6f3238a146108a8578063f9b5d7c0146108f6575b600080fd5b3480156101da57600080fd5b506101e361094b565b60408051600160a060020a039092168252519081900360200190f35b34801561020b57600080fd5b50610223600435600160a060020a036024351661095a565b6040805192835260208301919091528051918290030190f35b34801561024857600080fd5b50610254600435610abd565b60408051918252519081900360200190f35b34801561027257600080fd5b5061027e600435610ad2565b6040805163ffffffff9092168252519081900360200190f35b3480156102a357600080fd5b50610254610af9565b3480156102b857600080fd5b50610254600435610aff565b3480156102d057600080fd5b50610254610b14565b3480156102e557600080fd5b506102f1600435610b20565b604080519115158252519081900360200190f35b34801561031157600080fd5b50610254610b3f565b34801561032657600080fd5b50610254600435610b45565b34801561033e57600080fd5b50610254610b5a565b34801561035357600080fd5b50610254610b84565b34801561036857600080fd5b50610254600435610b8b565b34801561038057600080fd5b50610254610b9d565b34801561039557600080fd5b506103a1600435610ba9565b604080518b8152602081018b9052908101899052606081018890526080810187905263ffffffff861660a082015260c08101859052600160a060020a03841660e082015261010081018360058111156103f657fe5b60ff16815263ffffffff9092166020830152506040805191829003019950975050505050505050f35b34801561042b57600080fd5b50610223600435600160a060020a0360243516610c20565b34801561044f57600080fd5b50610254600435610d7d565b34801561046757600080fd5b5061027e600435610d92565b34801561047f57600080fd5b50610254610db5565b34801561049457600080fd5b50610254600435600160a060020a0360243516610dbc565b3480156104b857600080fd5b506104cd600160a060020a0360043516610f9a565b005b3480156104db57600080fd5b50610254610ff5565b3480156104f057600080fd5b50610254600435611001565b34801561050857600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261025494369492936024939284019190819084018382808284375050604080516020808901358a01803580830284810184018652818552999c8b359c909b909a95019850929650810194509092508291908501908490808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750509335945061106e9350505050565b3480156105e157600080fd5b50610254600435600160a060020a03602435166110e5565b34801561060557600080fd5b50610611600435611284565b6040518082600581111561062157fe5b60ff16815260200191505060405180910390f35b34801561064157600080fd5b5061025460043560243560443560643560843563ffffffff60a43581169060c4359060e435166112a3565b34801561067857600080fd5b50610254611368565b34801561068d57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261025494369492936024939284019190819084018382808284375050604080516020808901358a01803580830284810184018652818552999c8b359c909b909a95019850929650810194509092508291908501908490808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020808901358a01803580830284810184018652818552999c8b359c909b909a9501985092965081019450909250829190850190849080828437509497505084359550505050602090910135600160a060020a0316905061136f565b3480156107b557600080fd5b5061025461153a565b3480156107ca57600080fd5b50610254600435611540565b3480156107e257600080fd5b5061022360043560243560443560643560843563ffffffff60a43581169060c4359060e43516600160a060020a036101043516611555565b34801561082657600080fd5b506102546118b3565b34801561083b57600080fd5b506102546118b9565b34801561085057600080fd5b5061022360043560243560443560643560843563ffffffff60a43581169060c4359060e435166118bf565b34801561088757600080fd5b50610254600435611aec565b34801561089f57600080fd5b5061027e611b01565b3480156108b457600080fd5b506108bd611b0d565b604051808261012080838360005b838110156108e35781810151838201526020016108cb565b5050505090500191505060405180910390f35b34801561090257600080fd5b506040805160206004803580820135838102808601850190965280855261025495369593946024949385019291829185019084908082843750949750611b839650505050505050565b600654600160a060020a031681565b60065460009081908190600160a060020a031633146109ab576040805186815261c39660208201528151600080516020612eae833981519152929181900390910190a161c396925060009150610ab5565b50600084815260208190526040902060026008820154608060020a900460ff1660058111156109d657fe5b141580156109fe575060016008820154608060020a900460ff1660058111156109fb57fe5b14155b15610a3b576040805186815261c36460208201528151600080516020612eae833981519152929181900390910190a161c364925060009150610ab5565b60088101805470ff00000000000000000000000000000000191670030000000000000000000000000000000017905560408051868152600160a060020a038616602082015281517f87f54f5eb3dd119fe71af0915af693e64a5bfd4acaa19a6c944c47cff8eec9e6929181900390910190a1600085925092505b509250929050565b60009081526020819052604090206002015490565b60009081526020819052604090206008015468010000000000000000900463ffffffff1690565b60045481565b60009081526020819052604090206004015490565b670de0b6b3a76484d081565b60006004610b2d83611284565b6005811115610b3857fe5b1492915050565b619c4081565b60009081526020819052604090206005015490565b60045460009081526020819052604090206008015468010000000000000000900463ffffffff1690565b6206b6c081565b60009081526020819052604090205490565b670de0b6b3a76ab6c081565b600090815260208190526040902080546001820154600283015460038401546004850154600886015460058701546006909701549597949693959294919363ffffffff808316949193600160a060020a0390921692608060020a810460ff16926c0100000000000000000000000090910490911690565b60065460009081908190600160a060020a03163314610c71576040805186815261c39660208201528151600080516020612eae833981519152929181900390910190a161c396925060009150610ab5565b50600084815260208190526040902060026008820154608060020a900460ff166005811115610c9c57fe5b14158015610cc4575060036008820154608060020a900460ff166005811115610cc157fe5b14155b15610d01576040805186815261c36460208201528151600080516020612eae833981519152929181900390910190a161c364925060009150610ab5565b60088101805470ff00000000000000000000000000000000191670050000000000000000000000000000000017905560408051868152600160a060020a038616602082015281517f64297372062dfcb21d6f7385f68d4656e993be2bb674099e3de73128d4911a91929181900390910190a15060009492505050565b60009081526020819052604090206007015490565b600090815260208190526040902060080154640100000000900463ffffffff1690565b6205c49081565b60065460009081908190600160a060020a03163314610e09576040805186815261c39660208201528151600080516020612eae833981519152929181900390910190a161c3969250610f92565b6000858152602081905260409020915060016008830154608060020a900460ff166005811115610e3557fe5b14158015610e5d575060036008830154608060020a900460ff166005811115610e5a57fe5b14155b15610e96576040805186815261c36460208201528151600080516020612eae833981519152929181900390910190a161c3649250610f92565b506005810154600090815260208190526040902060046008820154608060020a900460ff166005811115610ec657fe5b14610eff576040805186815261c38260208201528151600080516020612eae833981519152929181900390910190a161c3829250610f92565b60088201805470ff00000000000000000000000000000000191670040000000000000000000000000000000017905560055460018301541115610f4a57600485905560018201546005555b60408051868152600160a060020a038616602082015281517ff2dbbf0abb1ab1870a5e4d02746747c91d167c855255440b573ba3b5529dc901929181900390910190a1600092505b505092915050565b600654600160a060020a0316158015610fbb5750600160a060020a03811615155b1515610fc657600080fd5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b670de0b6b3a764000081565b60045460009060075b8361101483610ad2565b63ffffffff161115611067575b61102a81611c47565b8461103484610ad2565b63ffffffff16031080156110485750600081115b156110565760001901611021565b6110608282611c4d565b915061100a565b5092915050565b60008061107a87611d21565b90508651604014156110b95760408051828152614e5c60208201528151600080516020612eee833981519152929181900390910190a1600091506110db565b6110c68187878787611ec4565b600114156110d6578091506110db565b600091505b5095945050505050565b6006546000908190600160a060020a03163314611130576040805185815261c39660208201528151600080516020612eae833981519152929181900390910190a161c3969150611067565b50600083815260208190526040902060016008820154608060020a900460ff16600581111561115b57fe5b14158015611183575060026008820154608060020a900460ff16600581111561118057fe5b14155b156111bc576040805185815261c36460208201528151600080516020612eae833981519152929181900390910190a161c3649150611067565b6006810154600160a060020a0384811691161415611208576040805185815261c38760208201528151600080516020612eae833981519152929181900390910190a161c3879150611067565b60088101805470ff00000000000000000000000000000000191670020000000000000000000000000000000017905560408051858152600160a060020a038516602082015281517f09cdaca254aa177f759fe7a0968fe696ee9baf7d2a1d4714ed24b83d1f09518e929181900390910190a15060009392505050565b600090815260208190526040902060080154608060020a900460ff1690565b6040805160208082018b90528183018a9052606082018990526080820188905260a0820187905260e060020a63ffffffff808816820260c085015260c4840187905285160260e4830152825160c881840301815260e8909201928390528151600093918291908401908083835b6020831061132f5780518252601f199092019160209182019101611310565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209c9b505050505050505050505050565b62035b6081565b60008060008061137e86610b8b565b61139161138a8b611d21565b8a8a61208c565b146113cb576040805160008152614e4860208201528151600080516020612ece833981519152929181900390910190a1614e48935061152b565b6113d88c8c8c8c8a61106e565b925082156114fa576113eb8c8487612109565b91508115611425576040805160008152602081018490528151600080516020612ece833981519152929181900390910190a181935061152b565b506000828152600260208181526040808420898552848352908420600601548184018054958890529390925260018101805463ffffffff7401000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff19838116600160a060020a03948516178281049390931690910277ffffffff00000000000000000000000000000000000000001990921691909117909255948116928516929092178083169085161790925560038201805491821691909316179091556114f38361221a565b935061152b565b604080516000815261753a60208201528151600080516020612ece833981519152929181900390910190a161753a93505b50505098975050505050505050565b60055481565b60009081526020819052604090206003015490565b6006546000908190819081908190600160a060020a031633146115ab57604080516000815261c39660208201528151600080516020612eae833981519152929181900390910190a161c3969450600093506118a2565b6000888152602081905260409020925060036008840154608060020a900460ff1660058111156115d757fe5b141580156115ff575060046008840154608060020a900460ff1660058111156115fc57fe5b14155b1561163c576040805183815261c38260208201528151600080516020612eae833981519152929181900390910190a161c3829450600093506118a2565b61164c8e8e8e8e8e8e8e8e6112a3565b60008181526020819052604081209193509091506008820154608060020a900460ff16600581111561167a57fe5b1415611810578160016000600360009054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002081600019169055508d8160000181600019169055508c81600101819055508b81600201819055508a81600301819055508981600401816000191690555087816005018160001916905550600360009054906101000a900463ffffffff168160080160046101000a81548163ffffffff021916908363ffffffff1602179055508260080160089054906101000a900463ffffffff166001018160080160086101000a81548163ffffffff021916908363ffffffff160217905550888160080160006101000a81548163ffffffff021916908363ffffffff1602179055508681600801600c6101000a81548163ffffffff021916908363ffffffff1602179055506117ee83600701548460080160049054906101000a900463ffffffff168560080160089054906101000a900463ffffffff1663ffffffff16612334565b60078201556003805463ffffffff8082166001011663ffffffff199091161790555b60088101805470ff000000000000000000000000000000001916608060020a17905560068101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03881690811790915560408051848152602081019290925280517f64951c9008bba9f4663c12662e7a9b6412a7c4757869fdac09285564ae923fa19281900390910190a1600082945094505b505050995099975050505050505050565b6184d081565b60045490565b600454600090819081908190156118d557600080fd5b85156118e057600080fd5b6118f08c8c8c8c8c8c8c8c6112a3565b60008181526020819052604081209193509091506008820154608060020a900460ff16600581111561191e57fe5b1461192857600080fd5b6003805463ffffffff90811660009081526001602081905260409091208590558e845583018d9055600283018c90558282018b905560048084018b9055600584018990556006840180543373ffffffffffffffffffffffffffffffffffffffff1990911617905591546008840180546801000000000000000067ffffffff000000001990911692841664010000000002929092176bffffffff000000000000000019169190911763ffffffff1916918a169190911780825570ff000000000000000000000000000000001916608060020a8302179055506000600782015560088101805463ffffffff8088166c01000000000000000000000000026fffffffff00000000000000000000000019909216919091179091556003805480831660010190921663ffffffff199092169190911790556040805183815233602082015281517f64951c9008bba9f4663c12662e7a9b6412a7c4757869fdac09285564ae923fa1929181900390910190a1600482905560058b90556040805183815233602082015281517ff2dbbf0abb1ab1870a5e4d02746747c91d167c855255440b573ba3b5529dc901929181900390910190a15060009b909a5098505050505050505050565b60009081526020819052604090206001015490565b60035463ffffffff1690565b611b15612e5f565b611b1d612e5f565b6004548082526000908190611b3190610d7d565b9150600890505b6000811115611b7b5763ffffffff8216600090815260016020526040902054838260098110611b6357fe5b60200201526401000000009091049060001901611b38565b509092915050565b600073__SyscoinMessageLibrary_________________63f9b5d7c0836040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019060200280838360005b83811015611bf2578181015183820152602001611bda565b505050509050019250505060206040518083038186803b158015611c1557600080fd5b505af4158015611c29573d6000803e3d6000fd5b505050506040513d6020811015611c3f57600080fd5b505192915050565b60050a90565b600082815260208181526040822060070154908290829060036004870201908110611c7457fe5b60f860020a91901a810204826002600487020160208110611c9157fe5b1a60f860020a0260f860020a9004610100028386600402600101602081101515611cb757fe5b1a60f860020a0260f860020a900462010000028487600402600001602081101515611cde57fe5b1a60f860020a0260f860020a90046301000000020101019050600160008263ffffffff1663ffffffff168152602001908152602001600020549250505092915050565b6000611ebe600280846040516020018082805190602001908083835b60208310611d5c5780518252601f199092019160209182019101611d3d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310611dbf5780518252601f199092019160209182019101611da0565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015611e00573d6000803e3d6000fd5b5050506040513d6020811015611e1557600080fd5b50516040805160208181019390935281518082038401815290820191829052805190928291908401908083835b60208310611e615780518252601f199092019160209182019101611e42565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015611ea2573d6000803e3d6000fd5b5050506040513d6020811015611eb757600080fd5b5051612394565b92915050565b600080611ed083610b20565b1580611ee25750611ee0836123b7565b155b15611f1b5760408051888152614e3e60208201528151600080516020612eee833981519152929181900390910190a1614e3e91506110db565b6040517f6823c56b00000000000000000000000000000000000000000000000000000000815260206004820181815286516024840152865173__SyscoinMessageLibrary_________________93636823c56b9389939283926044019185019080838360005b83811015611f99578181015183820152602001611f81565b50505050905090810190601f168015611fc65780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b158015611fe357600080fd5b505af4158015611ff7573d6000803e3d6000fd5b505050506040513d602081101561200d57600080fd5b505190508061201d88888861208c565b146120565760408051888152614e5260208201528151600080516020612eee833981519152929181900390910190a1614e5291506110db565b60408051888152600160208201528151600080516020612eee833981519152929181900390910190a15060019695505050505050565b60008381808080805b87518510156120fb5787858151811015156120ac57fe5b60209081029091010151935060028906925082600114156120d15750829050846120de565b8215156120de5750849050825b6120e882826123ef565b9550600289049850600185019450612095565b509398975050505050505050565b6000806000806000612119612e7f565b61212289612464565b91975095509350915081156121395781955061220e565b848152600160a060020a03808516602080840191825263ffffffff80871660408087019182528c86166080880190815260008f81526002958690529182208851815595516001870180549451909516740100000000000000000000000000000000000000000277ffffffff00000000000000000000000000000000000000001991891673ffffffffffffffffffffffffffffffffffffffff1995861617919091161790935560608701519385018054948716948316949094179093559051600390930180549390941692169190911790915595505b50505050509392505050565b60008181526002602081815260408084206003810154815460018301549583015484517f6e7ff256000000000000000000000000000000000000000000000000000000008152600481018a90526024810192909252600160a060020a0380881660448401527401000000000000000000000000000000000000000090970463ffffffff16606483015286166084820152925191948694911692636e7ff2569260a4808301939282900301818787803b1580156122d557600080fd5b505af11580156122e9573d6000803e3d6000fd5b505050506040513d60208110156122ff57600080fd5b505160408051868152602081018390528151929350600080516020612ece833981519152929081900390910190a19392505050565b60006005816123448682876124d4565b9550600190505b6008811080156123665750818481151561236157fe5b066001145b1561238a576123798682600402876124d4565b95506005919091029060010161234b565b5093949350505050565b600060405160005b6020811015611c3f578381601f031a8183015360010161239c565b6000806123c383610ad2565b63ffffffff1690508015156123db57600091506123e9565b826123e582611001565b1491505b50919050565b600061245d60028061240086612394565b61240986612394565b604051602001808381526020018281526020019250505060405160208183030381529060405260405180828051906020019080838360208310611dbf5780518252601f199092019160209182019101611da0565b9392505050565b600080808080808080806124788a82612510565b915063ffffffff82166174071461249c576127ba85848698509850985098506124c8565b6124a78a60046125cb565b90506124b38a82612650565b60009b50919950975095508794508593508692505b50505050509193509193565b60008060405185815283601c1a8582015383601d1a6001860182015383601e1a6002860182015383601f1a600386018201535195945050505050565b6000828260030181518110151561252357fe5b90602001015160f860020a900460f860020a0260f860020a9004630100000002838360020181518110151561255457fe5b90602001015160f860020a900460f860020a0260f860020a90046201000002848460010181518110151561258457fe5b90602001015160f860020a900460f860020a0260f860020a90046101000285858151811015156125b057fe5b016020015160f860020a908190048102040101019392505050565b6000806000806125db86866126e8565b9550925082151561260c576125f086866126e8565b955092508215156125fd57fe5b61260786866126e8565b955092505b6064831061261957600080fd5b5060005b828110156126465760248501945061263586866126e8565b81016004019550915060010161261d565b5092949350505050565b600080808080808080806126648b8b6126e8565b9a509150600a821061267557600080fd5b5060005b818110156126d75760088a0199506126918b8b6126e8565b9a50955061269f8b8b6127a6565b15156126b25798850198600094506126cf565b60018a0199506126c28b8b612817565b91965090945092506126d7565b600101612679565b509299909850909650945050505050565b600080600084848151811015156126fb57fe5b90602001015160f860020a900460f860020a0260f860020a9004905060018401935060fd8160ff1610156127375760ff81169250839150610ab5565b8060ff1660fd141561275c5761274f858560106128c8565b8460020192509250610ab5565b8060ff1660fe141561278157612774858560206128c8565b8460040192509250610ab5565b8060ff1660ff1415610ab557612799858560406128c8565b8460080192509250610ab5565b81516000907f6a00000000000000000000000000000000000000000000000000000000000000908490849081106127d957fe5b90602001015160f860020a900460f860020a027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614905092915050565b600080600080600080600061282c8989612beb565b98509050600460ff82161461284057600080fd5b61284a8989612c2a565b93508060ff168801975061285e8989612beb565b98509050600860ff82161461287257600080fd5b61287c8989612cca565b67ffffffffffffffff1691508060ff168801975061289a8989612beb565b98509050601460ff8216146128ae57600080fd5b6128b88989612e57565b9199919850929650945050505050565b600081600814156129055783838151811015156128e157fe5b90602001015160f860020a900460f860020a0260f860020a900460ff16905061245d565b816010141561297157838360010181518110151561291f57fe5b90602001015160f860020a900460f860020a0260f860020a900461010002848481518110151561294b57fe5b90602001015160f860020a900460f860020a0260f860020a90040161ffff16905061245d565b8160201415612a4257838360030181518110151561298b57fe5b90602001015160f860020a900460f860020a0260f860020a900463010000000284846002018151811015156129bc57fe5b90602001015160f860020a900460f860020a0260f860020a9004620100000285856001018151811015156129ec57fe5b90602001015160f860020a900460f860020a0260f860020a9004610100028686815181101515612a1857fe5b90602001015160f860020a900460f860020a0260f860020a900401010163ffffffff16905061245d565b816040141561245d578383600701815181101515612a5c57fe5b90602001015160f860020a900460f860020a0260f860020a9004670100000000000000028484600601815181101515612a9157fe5b90602001015160f860020a900460f860020a0260f860020a90046601000000000000028585600501815181101515612ac557fe5b90602001015160f860020a900460f860020a0260f860020a900465010000000000028686600401815181101515612af857fe5b90602001015160f860020a900460f860020a0260f860020a9004640100000000028787600301815181101515612b2a57fe5b90602001015160f860020a900460f860020a0260f860020a90046301000000028888600201815181101515612b5b57fe5b90602001015160f860020a900460f860020a0260f860020a900462010000028989600101815181101515612b8b57fe5b90602001015160f860020a900460f860020a0260f860020a9004610100028a8a815181101515612bb757fe5b90602001015160f860020a900460f860020a0260f860020a90040101010101010167ffffffffffffffff1690509392505050565b600080835183101515612bfd57600080fd5b8383815181101515612c0b57fe5b016020015160f860020a90819004810204915050600182019250929050565b60008282815181101515612c3a57fe5b90602001015160f860020a900460f860020a0260f860020a90046301000000028383600101815181101515612c6b57fe5b90602001015160f860020a900460f860020a0260f860020a900462010000028484600201815181101515612c9b57fe5b90602001015160f860020a900460f860020a0260f860020a90046101000285856003018151811015156125b057fe5b60008282815181101515612cda57fe5b90602001015160f860020a900460f860020a0260f860020a9004670100000000000000028383600101815181101515612d0f57fe5b90602001015160f860020a900460f860020a0260f860020a90046601000000000000028484600201815181101515612d4357fe5b90602001015160f860020a900460f860020a0260f860020a900465010000000000028585600301815181101515612d7657fe5b90602001015160f860020a900460f860020a0260f860020a9004640100000000028686600401815181101515612da857fe5b90602001015160f860020a900460f860020a0260f860020a90046301000000028787600501815181101515612dd957fe5b90602001015160f860020a900460f860020a0260f860020a900462010000028888600601815181101515612e0957fe5b90602001015160f860020a900460f860020a0260f860020a9004610100028989600701815181101515612e3857fe5b016020015160f860020a90819004810204010101010101019392505050565b016014015190565b610120604051908101604052806009906020820280388339509192915050565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152905600a57c1ba4cf2c89b3558cfeeca4339e04551f0fc1a12cf63f1923c2eed8a5be8b4e64138cc499eb1adf9edff9ef69bd45c56ac4bfd307540952e4c9d51eab55c165bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebda165627a7a72305820eca556bff7e1e5fc3e160d32f56d81725f6791a3a8900b5dbf530fe9b6e734290029";

    public static final String FUNC_TRUSTEDCLAIMMANAGER = "trustedClaimManager";

    public static final String FUNC_BESTSUPERBLOCK = "bestSuperblock";

    public static final String FUNC_MINPROPOSALDEPOSIT = "minProposalDeposit";

    public static final String FUNC_RESPONDBLOCKHEADERPROOFCOST = "respondBlockHeaderProofCost";

    public static final String FUNC_SUPERBLOCKCOST = "superblockCost";

    public static final String FUNC_MINCHALLENGEDEPOSIT = "minChallengeDeposit";

    public static final String FUNC_RESPONDMERKLEROOTHASHESCOST = "respondMerkleRootHashesCost";

    public static final String FUNC_MINREWARD = "minReward";

    public static final String FUNC_VERIFYSUPERBLOCKCOST = "verifySuperblockCost";

    public static final String FUNC_BESTSUPERBLOCKACCUMULATEDWORK = "bestSuperblockAccumulatedWork";

    public static final String FUNC_CHALLENGECOST = "challengeCost";

    public static final String FUNC_SETCLAIMMANAGER = "setClaimManager";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_PROPOSE = "propose";

    public static final String FUNC_CONFIRM = "confirm";

    public static final String FUNC_CHALLENGE = "challenge";

    public static final String FUNC_SEMIAPPROVE = "semiApprove";

    public static final String FUNC_INVALIDATE = "invalidate";

    public static final String FUNC_RELAYTX = "relayTx";

    public static final String FUNC_VERIFYTX = "verifyTx";

    public static final String FUNC_CALCSUPERBLOCKHASH = "calcSuperblockHash";

    public static final String FUNC_GETBESTSUPERBLOCK = "getBestSuperblock";

    public static final String FUNC_GETSUPERBLOCK = "getSuperblock";

    public static final String FUNC_GETSUPERBLOCKHEIGHT = "getSuperblockHeight";

    public static final String FUNC_GETSUPERBLOCKINDEX = "getSuperblockIndex";

    public static final String FUNC_GETSUPERBLOCKANCESTORS = "getSuperblockAncestors";

    public static final String FUNC_GETSUPERBLOCKMERKLEROOT = "getSuperblockMerkleRoot";

    public static final String FUNC_GETSUPERBLOCKTIMESTAMP = "getSuperblockTimestamp";

    public static final String FUNC_GETSUPERBLOCKRETARGETPERIOD = "getSuperblockRetargetPeriod";

    public static final String FUNC_GETSUPERBLOCKLASTHASH = "getSuperblockLastHash";

    public static final String FUNC_GETSUPERBLOCKPARENTID = "getSuperblockParentId";

    public static final String FUNC_GETSUPERBLOCKACCUMULATEDWORK = "getSuperblockAccumulatedWork";

    public static final String FUNC_GETSUPERBLOCKSTATUS = "getSuperblockStatus";

    public static final String FUNC_GETINDEXNEXTSUPERBLOCK = "getIndexNextSuperblock";

    public static final String FUNC_MAKEMERKLE = "makeMerkle";

    public static final String FUNC_ISAPPROVED = "isApproved";

    public static final String FUNC_GETCHAINHEIGHT = "getChainHeight";

    public static final String FUNC_GETSUPERBLOCKLOCATOR = "getSuperblockLocator";

    public static final String FUNC_GETSUPERBLOCKAT = "getSuperblockAt";

    public static final Event NEWSUPERBLOCK_EVENT = new Event("NewSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event APPROVEDSUPERBLOCK_EVENT = new Event("ApprovedSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event CHALLENGESUPERBLOCK_EVENT = new Event("ChallengeSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SEMIAPPROVEDSUPERBLOCK_EVENT = new Event("SemiApprovedSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event INVALIDSUPERBLOCK_EVENT = new Event("InvalidSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event ERRORSUPERBLOCK_EVENT = new Event("ErrorSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event VERIFYTRANSACTION_EVENT = new Event("VerifyTransaction", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event RELAYTRANSACTION_EVENT = new Event("RelayTransaction", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("4", "0x1c83071e637a20FaED8a9E13EEE6Cd67c1dCF2E6");
    }

    @Deprecated
    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Address> trustedClaimManager() {
        final Function function = new Function(FUNC_TRUSTEDCLAIMMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> bestSuperblock() {
        final Function function = new Function(FUNC_BESTSUPERBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minProposalDeposit() {
        final Function function = new Function(FUNC_MINPROPOSALDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> respondBlockHeaderProofCost() {
        final Function function = new Function(FUNC_RESPONDBLOCKHEADERPROOFCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> superblockCost() {
        final Function function = new Function(FUNC_SUPERBLOCKCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minChallengeDeposit() {
        final Function function = new Function(FUNC_MINCHALLENGEDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> respondMerkleRootHashesCost() {
        final Function function = new Function(FUNC_RESPONDMERKLEROOTHASHESCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minReward() {
        final Function function = new Function(FUNC_MINREWARD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> verifySuperblockCost() {
        final Function function = new Function(FUNC_VERIFYSUPERBLOCKCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> bestSuperblockAccumulatedWork() {
        final Function function = new Function(FUNC_BESTSUPERBLOCKACCUMULATEDWORK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> challengeCost() {
        final Function function = new Function(FUNC_CHALLENGECOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public List<NewSuperblockEventResponse> getNewSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<NewSuperblockEventResponse> responses = new ArrayList<NewSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewSuperblockEventResponse typedResponse = new NewSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewSuperblockEventResponse> newSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewSuperblockEventResponse>() {
            @Override
            public NewSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWSUPERBLOCK_EVENT, log);
                NewSuperblockEventResponse typedResponse = new NewSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<NewSuperblockEventResponse> newSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWSUPERBLOCK_EVENT));
        return newSuperblockEventFlowable(filter);
    }

    public List<ApprovedSuperblockEventResponse> getApprovedSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVEDSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<ApprovedSuperblockEventResponse> responses = new ArrayList<ApprovedSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovedSuperblockEventResponse typedResponse = new ApprovedSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovedSuperblockEventResponse> approvedSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ApprovedSuperblockEventResponse>() {
            @Override
            public ApprovedSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVEDSUPERBLOCK_EVENT, log);
                ApprovedSuperblockEventResponse typedResponse = new ApprovedSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovedSuperblockEventResponse> approvedSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVEDSUPERBLOCK_EVENT));
        return approvedSuperblockEventFlowable(filter);
    }

    public List<ChallengeSuperblockEventResponse> getChallengeSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHALLENGESUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<ChallengeSuperblockEventResponse> responses = new ArrayList<ChallengeSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChallengeSuperblockEventResponse typedResponse = new ChallengeSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ChallengeSuperblockEventResponse> challengeSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ChallengeSuperblockEventResponse>() {
            @Override
            public ChallengeSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHALLENGESUPERBLOCK_EVENT, log);
                ChallengeSuperblockEventResponse typedResponse = new ChallengeSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ChallengeSuperblockEventResponse> challengeSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHALLENGESUPERBLOCK_EVENT));
        return challengeSuperblockEventFlowable(filter);
    }

    public List<SemiApprovedSuperblockEventResponse> getSemiApprovedSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SEMIAPPROVEDSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<SemiApprovedSuperblockEventResponse> responses = new ArrayList<SemiApprovedSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SemiApprovedSuperblockEventResponse typedResponse = new SemiApprovedSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SemiApprovedSuperblockEventResponse> semiApprovedSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SemiApprovedSuperblockEventResponse>() {
            @Override
            public SemiApprovedSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SEMIAPPROVEDSUPERBLOCK_EVENT, log);
                SemiApprovedSuperblockEventResponse typedResponse = new SemiApprovedSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SemiApprovedSuperblockEventResponse> semiApprovedSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SEMIAPPROVEDSUPERBLOCK_EVENT));
        return semiApprovedSuperblockEventFlowable(filter);
    }

    public List<InvalidSuperblockEventResponse> getInvalidSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INVALIDSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<InvalidSuperblockEventResponse> responses = new ArrayList<InvalidSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvalidSuperblockEventResponse typedResponse = new InvalidSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<InvalidSuperblockEventResponse> invalidSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, InvalidSuperblockEventResponse>() {
            @Override
            public InvalidSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(INVALIDSUPERBLOCK_EVENT, log);
                InvalidSuperblockEventResponse typedResponse = new InvalidSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<InvalidSuperblockEventResponse> invalidSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVALIDSUPERBLOCK_EVENT));
        return invalidSuperblockEventFlowable(filter);
    }

    public List<ErrorSuperblockEventResponse> getErrorSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ERRORSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<ErrorSuperblockEventResponse> responses = new ArrayList<ErrorSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorSuperblockEventResponse typedResponse = new ErrorSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ErrorSuperblockEventResponse> errorSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ErrorSuperblockEventResponse>() {
            @Override
            public ErrorSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ERRORSUPERBLOCK_EVENT, log);
                ErrorSuperblockEventResponse typedResponse = new ErrorSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ErrorSuperblockEventResponse> errorSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ERRORSUPERBLOCK_EVENT));
        return errorSuperblockEventFlowable(filter);
    }

    public List<VerifyTransactionEventResponse> getVerifyTransactionEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VERIFYTRANSACTION_EVENT, transactionReceipt);
        ArrayList<VerifyTransactionEventResponse> responses = new ArrayList<VerifyTransactionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VerifyTransactionEventResponse typedResponse = new VerifyTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VerifyTransactionEventResponse> verifyTransactionEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, VerifyTransactionEventResponse>() {
            @Override
            public VerifyTransactionEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VERIFYTRANSACTION_EVENT, log);
                VerifyTransactionEventResponse typedResponse = new VerifyTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<VerifyTransactionEventResponse> verifyTransactionEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VERIFYTRANSACTION_EVENT));
        return verifyTransactionEventFlowable(filter);
    }

    public List<RelayTransactionEventResponse> getRelayTransactionEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RELAYTRANSACTION_EVENT, transactionReceipt);
        ArrayList<RelayTransactionEventResponse> responses = new ArrayList<RelayTransactionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RelayTransactionEventResponse typedResponse = new RelayTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RelayTransactionEventResponse> relayTransactionEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RelayTransactionEventResponse>() {
            @Override
            public RelayTransactionEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RELAYTRANSACTION_EVENT, log);
                RelayTransactionEventResponse typedResponse = new RelayTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<RelayTransactionEventResponse> relayTransactionEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RELAYTRANSACTION_EVENT));
        return relayTransactionEventFlowable(filter);
    }

    public RemoteCall<TransactionReceipt> setClaimManager(Address _claimManager) {
        final Function function = new Function(
                FUNC_SETCLAIMMANAGER, 
                Arrays.<Type>asList(_claimManager), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> initialize(Bytes32 _blocksMerkleRoot, Uint256 _accumulatedWork, Uint256 _timestamp, Uint256 _retargetPeriod, Bytes32 _lastHash, Uint32 _lastBits, Bytes32 _parentId, Uint32 _blockHeight) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(_blocksMerkleRoot, _accumulatedWork, _timestamp, _retargetPeriod, _lastHash, _lastBits, _parentId, _blockHeight), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> propose(Bytes32 _blocksMerkleRoot, Uint256 _accumulatedWork, Uint256 _timestamp, Uint256 _retargetPeriod, Bytes32 _lastHash, Uint32 _lastBits, Bytes32 _parentId, Uint32 _blockHeight, Address submitter) {
        final Function function = new Function(
                FUNC_PROPOSE, 
                Arrays.<Type>asList(_blocksMerkleRoot, _accumulatedWork, _timestamp, _retargetPeriod, _lastHash, _lastBits, _parentId, _blockHeight, submitter), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> confirm(Bytes32 _superblockHash, Address _validator) {
        final Function function = new Function(
                FUNC_CONFIRM, 
                Arrays.<Type>asList(_superblockHash, _validator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> challenge(Bytes32 _superblockHash, Address _challenger) {
        final Function function = new Function(
                FUNC_CHALLENGE, 
                Arrays.<Type>asList(_superblockHash, _challenger), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> semiApprove(Bytes32 _superblockHash, Address _validator) {
        final Function function = new Function(
                FUNC_SEMIAPPROVE, 
                Arrays.<Type>asList(_superblockHash, _validator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> invalidate(Bytes32 _superblockHash, Address _validator) {
        final Function function = new Function(
                FUNC_INVALIDATE, 
                Arrays.<Type>asList(_superblockHash, _validator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> relayTx(DynamicBytes _txBytes, Uint256 _txIndex, DynamicArray<Uint256> _txSiblings, DynamicBytes _syscoinBlockHeader, Uint256 _syscoinBlockIndex, DynamicArray<Uint256> _syscoinBlockSiblings, Bytes32 _superblockHash, Address _untrustedTargetContract) {
        final Function function = new Function(
                FUNC_RELAYTX, 
                Arrays.<Type>asList(_txBytes, _txIndex, _txSiblings, _syscoinBlockHeader, _syscoinBlockIndex, _syscoinBlockSiblings, _superblockHash, _untrustedTargetContract), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> verifyTx(DynamicBytes _txBytes, Uint256 _txIndex, DynamicArray<Uint256> _siblings, DynamicBytes _txBlockHeaderBytes, Bytes32 _txsuperblockHash) {
        final Function function = new Function(
                FUNC_VERIFYTX, 
                Arrays.<Type>asList(_txBytes, _txIndex, _siblings, _txBlockHeaderBytes, _txsuperblockHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Bytes32> calcSuperblockHash(Bytes32 _blocksMerkleRoot, Uint256 _accumulatedWork, Uint256 _timestamp, Uint256 _retargetPeriod, Bytes32 _lastHash, Uint32 _lastBits, Bytes32 _parentId, Uint32 _blockHeight) {
        final Function function = new Function(FUNC_CALCSUPERBLOCKHASH, 
                Arrays.<Type>asList(_blocksMerkleRoot, _accumulatedWork, _timestamp, _retargetPeriod, _lastHash, _lastBits, _parentId, _blockHeight), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getBestSuperblock() {
        final Function function = new Function(FUNC_GETBESTSUPERBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple10<Bytes32, Uint256, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32>> getSuperblock(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCK, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint32>() {}));
        return new RemoteCall<Tuple10<Bytes32, Uint256, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32>>(
                new Callable<Tuple10<Bytes32, Uint256, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32>>() {
                    @Override
                    public Tuple10<Bytes32, Uint256, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple10<Bytes32, Uint256, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32>(
                                (Bytes32) results.get(0), 
                                (Uint256) results.get(1), 
                                (Uint256) results.get(2), 
                                (Uint256) results.get(3), 
                                (Bytes32) results.get(4), 
                                (Uint32) results.get(5), 
                                (Bytes32) results.get(6), 
                                (Address) results.get(7), 
                                (Uint8) results.get(8), 
                                (Uint32) results.get(9));
                    }
                });
    }

    public RemoteCall<Uint32> getSuperblockHeight(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKHEIGHT, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint32> getSuperblockIndex(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKINDEX, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSuperblockAncestors(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKANCESTORS, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSuperblockMerkleRoot(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKMERKLEROOT, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getSuperblockTimestamp(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKTIMESTAMP, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getSuperblockRetargetPeriod(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKRETARGETPERIOD, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSuperblockLastHash(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKLASTHASH, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSuperblockParentId(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKPARENTID, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getSuperblockAccumulatedWork(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKACCUMULATEDWORK, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint8> getSuperblockStatus(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKSTATUS, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint32> getIndexNextSuperblock() {
        final Function function = new Function(FUNC_GETINDEXNEXTSUPERBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> makeMerkle(DynamicArray<Bytes32> hashes) {
        final Function function = new Function(FUNC_MAKEMERKLE, 
                Arrays.<Type>asList(hashes), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> isApproved(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_ISAPPROVED, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getChainHeight() {
        final Function function = new Function(FUNC_GETCHAINHEIGHT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<StaticArray9<Bytes32>> getSuperblockLocator() {
        final Function function = new Function(FUNC_GETSUPERBLOCKLOCATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray9<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSuperblockAt(Uint256 _height) {
        final Function function = new Function(FUNC_GETSUPERBLOCKAT, 
                Arrays.<Type>asList(_height), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    @Deprecated
    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SyscoinSuperblocks(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SyscoinSuperblocks(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SyscoinSuperblocks(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SyscoinSuperblocks(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class NewSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address who;
    }

    public static class ApprovedSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address who;
    }

    public static class ChallengeSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address who;
    }

    public static class SemiApprovedSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address who;
    }

    public static class InvalidSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address who;
    }

    public static class ErrorSuperblockEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Uint256 err;
    }

    public static class VerifyTransactionEventResponse {
        public Log log;

        public Bytes32 txHash;

        public Uint256 returnCode;
    }

    public static class RelayTransactionEventResponse {
        public Log log;

        public Bytes32 txHash;

        public Uint256 returnCode;
    }
}
