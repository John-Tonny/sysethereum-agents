package org.sysethereum.agents.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.StaticArray9;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple9;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.0.
 */
public class SyscoinSuperblocks extends Contract {
    private static final String BINARY = "0x608060405234801561001057600080fd5b50612a2d806100206000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80637b34dcd9116100f9578063cae0581e11610097578063f09a401611610071578063f09a4016146109a1578063f32007e9146109d1578063f6f3238a146109d9578063f9b5d7c014610a1a576101c4565b8063cae0581e14610917578063ed86097614610958578063f06d520d14610999576101c4565b80639e20c803116100d35780639e20c803146106b0578063c0dde98b14610719578063c11818a114610736578063c1f67ab3146108eb576101c4565b80637b34dcd914610626578063828fa8b41461064357806395b45ee714610684576101c4565b806348aefc32116101665780635ec0aedd116101405780635ec0aedd14610538578063642ed988146105405780636e5b70711461055d57806374205786146105fa576101c4565b806348aefc32146104f657806355e018ce146105135780635b57281214610530576101c4565b806327426f75116101a257806327426f751461046f5780632da8cffd1461049b5780632e400191146104b8578063455e6166146104ee576101c4565b806302e5de0c146101c9578063155ee894146101fa578063244430381461021e575b600080fd5b6101e6600480360360208110156101df57600080fd5b5035610abb565b604080519115158252519081900360200190f35b610202610add565b604080516001600160a01b039092168252519081900360200190f35b61045d600480360360e081101561023457600080fd5b810190602081018135600160201b81111561024e57600080fd5b82018360208201111561026057600080fd5b803590602001918460018302840111600160201b8311171561028157600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092958435959094909350604081019250602001359050600160201b8111156102db57600080fd5b8201836020820111156102ed57600080fd5b803590602001918460208302840111600160201b8311171561030e57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561035d57600080fd5b82018360208201111561036f57600080fd5b803590602001918460018302840111600160201b8311171561039057600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092958435959094909350604081019250602001359050600160201b8111156103ea57600080fd5b8201836020820111156103fc57600080fd5b803590602001918460208302840111600160201b8311171561041d57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505091359250610aec915050565b60408051918252519081900360200190f35b61045d6004803603604081101561048557600080fd5b50803590602001356001600160a01b0316610ce3565b61045d600480360360208110156104b157600080fd5b5035610e1b565b6104d5600480360360208110156104ce57600080fd5b5035610e30565b6040805163ffffffff9092168252519081900360200190f35b61045d610e52565b6101e66004803603602081101561050c57600080fd5b5035610e5e565b61045d6004803603602081101561052957600080fd5b5035610e67565b61045d610e7c565b610202610ea1565b61045d6004803603602081101561055657600080fd5b5035610eb0565b61057a6004803603602081101561057357600080fd5b5035610ec2565b604051808a81526020018981526020018881526020018781526020018663ffffffff1663ffffffff168152602001858152602001846001600160a01b03166001600160a01b031681526020018360058111156105d257fe5b60ff16815263ffffffff90921660208301525060408051918290030198509650505050505050f35b61045d6004803603604081101561061057600080fd5b50803590602001356001600160a01b0316610f26565b61045d6004803603602081101561063c57600080fd5b503561105c565b61045d600480360360c081101561065957600080fd5b5080359060208101359060408101359060608101359063ffffffff6080820135169060a00135611071565b61045d6004803603604081101561069a57600080fd5b50803590602001356001600160a01b03166110c9565b610700600480360360e08110156106c657600080fd5b50803590602081013590604081013590606081013590608081013563ffffffff169060a08101359060c001356001600160a01b0316611286565b6040805192835260208301919091528051918290030190f35b61045d6004803603602081101561072f57600080fd5b5035611519565b61045d600480360360a081101561074c57600080fd5b810190602081018135600160201b81111561076657600080fd5b82018360208201111561077857600080fd5b803590602001918460018302840111600160201b8311171561079957600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092958435959094909350604081019250602001359050600160201b8111156107f357600080fd5b82018360208201111561080557600080fd5b803590602001918460208302840111600160201b8311171561082657600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561087557600080fd5b82018360208201111561088757600080fd5b803590602001918460018302840111600160201b831117156108a857600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505091359250611586915050565b61045d6004803603604081101561090157600080fd5b50803590602001356001600160a01b031661160f565b6109346004803603602081101561092d57600080fd5b5035611792565b6040518082600581111561094457fe5b60ff16815260200191505060405180910390f35b610700600480360360c081101561096e57600080fd5b5080359060208101359060408101359060608101359063ffffffff6080820135169060a001356117b1565b61045d611970565b6109cf600480360360408110156109b757600080fd5b506001600160a01b0381358116916020013516611976565b005b6104d5611aa1565b6109e1611aad565b604051808261012080838360005b83811015610a075781810151838201526020016109ef565b5050505090500191505060405180910390f35b61045d60048036036020811015610a3057600080fd5b810190602081018135600160201b811115610a4a57600080fd5b820183602082011115610a5c57600080fd5b803590602001918460208302840111600160201b83111715610a7d57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611b1f945050505050565b600060035b610ac983611792565b6005811115610ad457fe5b1490505b919050565b6039546001600160a01b031681565b6000610af782610eb0565b610b0a610b0387611b2a565b8686611cc3565b14610b55576040805160008152614e48602082015281517f4e64138cc499eb1adf9edff9ef69bd45c56ac4bfd307540952e4c9d51eab55c1929181900390910190a150614e48610cd8565b6000610b648989898987611586565b90508015610c9457600080600080600080610b7e8f611d43565b939a50919850929650919450925090508315610bdf5760408051600081526020810186905281517f4e64138cc499eb1adf9edff9ef69bd45c56ac4bfd307540952e4c9d51eab55c1929181900390910190a183975050505050505050610cd8565b60385460008a8152603360205260408082206005015481516315eade2b60e31b8152600481018c9052602481018b90526001600160a01b038a811660448301529182166064820152868216608482015263ffffffff881660a482015260ff861660c4820152915193169263af56f1589260e48084019391929182900301818387803b158015610c6d57600080fd5b505af1158015610c81573d6000803e3d6000fd5b5050505085975050505050505050610cd8565b604080516000815261753a602082015281517f4e64138cc499eb1adf9edff9ef69bd45c56ac4bfd307540952e4c9d51eab55c1929181900390910190a161753a9150505b979650505050505050565b6039546000906001600160a01b03163314610d2b576040805184815261c396602082015281516000805160206129ab833981519152929181900390910190a15061c396610e15565b600083815260336020526040902060026007820154600160601b900460ff166005811115610d5557fe5b14158015610d7d575060016007820154600160601b900460ff166005811115610d7a57fe5b14155b15610db7576040805185815261c364602082015281516000805160206129ab833981519152929181900390910190a161c364915050610e15565b60078101805460ff60601b1916600360601b179055604080518581526001600160a01b038516602082015281517f87f54f5eb3dd119fe71af0915af693e64a5bfd4acaa19a6c944c47cff8eec9e6929181900390910190a160009150505b92915050565b60009081526033602052604090206002015490565b600090815260336020526040902060070154600160401b900463ffffffff1690565b6729a2241af62c000081565b60006004610ac0565b60009081526033602052604090206004015490565b603654600090815260336020526040902060070154600160401b900463ffffffff1690565b6038546001600160a01b031681565b60009081526033602052604090205490565b6000908152603360205260409020805460018201546002830154600384015460078501546004860154600590960154949693959294919363ffffffff80831694936001600160a01b031692600160601b810460ff1692600160401b90910490911690565b6039546000906001600160a01b03163314610f6e576040805184815261c396602082015281516000805160206129ab833981519152929181900390910190a15061c396610e15565b600083815260336020526040902060026007820154600160601b900460ff166005811115610f9857fe5b14158015610fc0575060036007820154600160601b900460ff166005811115610fbd57fe5b14155b15610ffa576040805185815261c364602082015281516000805160206129ab833981519152929181900390910190a161c364915050610e15565b60078101805460ff60601b1916600560601b179055604080518581526001600160a01b038516602082015281517f64297372062dfcb21d6f7385f68d4656e993be2bb674099e3de73128d4911a91929181900390910190a15060009392505050565b60009081526033602052604090206006015490565b60408051602080820198909852808201969096526060860194909452608085019290925260e01b6001600160e01b03191660a084015260a4808401919091528151808403909101815260c49092019052805191012090565b6039546000906001600160a01b03163314611111576040805184815261c396602082015281516000805160206129ab833981519152929181900390910190a15061c396610e15565b600083815260336020526040902060016007820154600160601b900460ff16600581111561113b57fe5b14158015611163575060036007820154600160601b900460ff16600581111561116057fe5b14155b1561119d576040805185815261c364602082015281516000805160206129ab833981519152929181900390910190a161c364915050610e15565b6004808201546000908152603360205260409020906007820154600160601b900460ff1660058111156111cc57fe5b14611207576040805186815261c382602082015281516000805160206129ab833981519152929181900390910190a161c38292505050610e15565b60078201805460ff60601b1916600160621b1790556037546001830154111561123857603685905560018201546037555b604080518681526001600160a01b038616602082015281517ff2dbbf0abb1ab1870a5e4d02746747c91d167c855255440b573ba3b5529dc901929181900390910190a1506000949350505050565b60395460009081906001600160a01b031633146112d557604080516000815261c396602082015281516000805160206129ab833981519152929181900390910190a15061c3969050600061150d565b600084815260336020526040902060036007820154600160601b900460ff1660058111156112ff57fe5b14158015611327575060046007820154600160601b900460ff16600581111561132457fe5b14155b1561137f5760078101546000805160206129ab833981519152908690600160601b900460ff16600581111561135857fe5b6040805192835260208301919091528051918290030190a15061c38291506000905061150d565b600061138f8b8b8b8b8b8b611071565b60008181526033602052604081209192506007820154600160601b900460ff1660058111156113ba57fe5b1415611494576035805463ffffffff90811660009081526034602052604090208490558d835560018084018e9055600284018d9055600384018c9055600484018a905591546007808501805467ffffffff000000001916928416600160201b90810293909317808255918801805463ffffffff60401b19909316600160401b938490048616909601851683029590951763ffffffff19168d851617905560068701549354611472949392810483169291900416611dda565b60068201556035805463ffffffff8082166001011663ffffffff199091161790555b60078101805460ff60601b1916600160601b1790556005810180546001600160a01b0319166001600160a01b03881690811790915560408051848152602081019290925280517f64951c9008bba9f4663c12662e7a9b6412a7c4757869fdac09285564ae923fa19281900390910190a150600093509150505b97509795505050505050565b60365460009060075b8361152c83610e30565b63ffffffff16111561157f575b61154281611e35565b8461154c84610e30565b63ffffffff16031080156115605750600081115b1561156e5760001901611539565b6115788282611e3b565b9150611522565b5092915050565b60008061159287611b2a565b90508651604014156115e45760408051828152614e5c602082015281517f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd929181900390910190a16000915050611606565b6115f18187878787611ee2565b60011415611600579050611606565b60009150505b95945050505050565b6039546000906001600160a01b03163314611657576040805184815261c396602082015281516000805160206129ab833981519152929181900390910190a15061c396610e15565b600083815260336020526040902060016007820154600160601b900460ff16600581111561168157fe5b141580156116a9575060026007820154600160601b900460ff1660058111156116a657fe5b14155b156116e3576040805185815261c364602082015281516000805160206129ab833981519152929181900390910190a161c364915050610e15565b60058101546001600160a01b0384811691161415611730576040805185815261c387602082015281516000805160206129ab833981519152929181900390910190a161c387915050610e15565b60078101805460ff60601b1916600160611b179055604080518581526001600160a01b038516602082015281517f09cdaca254aa177f759fe7a0968fe696ee9baf7d2a1d4714ed24b83d1f09518e929181900390910190a15060009392505050565b600090815260336020526040902060070154600160601b900460ff1690565b6036546000908190156117c357600080fd5b82156117ce57600080fd5b60006117de898989898989611071565b60008181526033602052604081209192506007820154600160601b900460ff16600581111561180957fe5b1461181357600080fd5b6035805463ffffffff90811660009081526034602052604090208490558b8355600183018b9055600283018a9055600383018990556004808401889055600584018054336001600160a01b03199091161790559154600784018054600160401b67ffffffff0000000019909116928416600160201b029290921763ffffffff60401b19169190911763ffffffff19169189169190911780825560ff60601b1916600160601b830217905550600060068201556035805463ffffffff8082166001011663ffffffff199091161790556040805183815233602082015281517f64951c9008bba9f4663c12662e7a9b6412a7c4757869fdac09285564ae923fa1929181900390910190a1603682905560378990556040805183815233602082015281517ff2dbbf0abb1ab1870a5e4d02746747c91d167c855255440b573ba3b5529dc901929181900390910190a1506000999098509650505050505050565b60365490565b600054610100900460ff168061198f575061198f61208f565b8061199d575060005460ff16155b6119d85760405162461bcd60e51b815260040180806020018281038252602e8152602001806129cb602e913960400191505060405180910390fd5b600054610100900460ff16158015611a03576000805460ff1961ff0019909116610100171660011790555b6038546001600160a01b0316158015611a2457506001600160a01b03831615155b611a2d57600080fd5b603880546001600160a01b0319166001600160a01b038581169190911790915560395416158015611a6657506001600160a01b03821615155b611a6f57600080fd5b603980546001600160a01b0319166001600160a01b0384161790558015611a9c576000805461ff00191690555b505050565b60355463ffffffff1690565b611ab561298b565b611abd61298b565b603654808252600090611acf9061105c565b905060085b8015611b175763ffffffff8216600090815260346020526040902054838260098110611afc57fe5b602090810291909101919091529190911c9060001901611ad4565b509091505090565b6000610e1582612095565b6000610e15600280846040516020018082805190602001908083835b60208310611b655780518252601f199092019160209182019101611b46565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310611bc85780518252601f199092019160209182019101611ba9565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015611c07573d6000803e3d6000fd5b5050506040513d6020811015611c1c57600080fd5b50516040805160208181019390935281518082038401815290820191829052805190928291908401908083835b60208310611c685780518252601f199092019160209182019101611c49565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015611ca7573d6000803e3d6000fd5b5050506040513d6020811015611cbc57600080fd5b50516121cd565b600083815b8351811015611d3a576000848281518110611cdf57fe5b60200260200101519050600060028781611cf557fe5b0690506000808260011415611d0e575082905084611d19565b82611d195750849050825b611d2382826122f7565b955060028904985060018501945050505050611cc8565b50949350505050565b6000808080808080808080808080611d5b8e8261236c565b935063ffffffff841661740714611d8857506127ba9b50949950919750919550919350909150611dd19050565b611d938e60046123a8565b9050611d9f8e8261242a565b809750819650829a50839950849b505050505050600087868885878595509c509c509c509c509c509c50505050505050505b91939550919395565b60006005611de98583866124ce565b945060015b600881108015611e075750818481611e0257fe5b066001145b15611e2b57611e1a8682600402876124ce565b955060059190910290600101611dee565b5093949350505050565b60050a90565b6000828152603360209081526040822060060154908290829060036004870201908110611e6457fe5b1a826002600487020160208110611e7757fe5b1a61010002836004870260010160208110611e8e57fe5b1a6201000002846004880260208110611ea357fe5b1a60f81b60f81c60ff166301000000020101019050603460008263ffffffff1663ffffffff168152602001908152602001600020549250505092915050565b6000611eed82610e5e565b1580611eff5750611efd8261250a565b155b15611f495760408051878152614e3e602082015281517f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd929181900390910190a150614e3e611606565b600073__SyscoinMessageLibrary_________________636823c56b856040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611fb2578181015183820152602001611f9a565b50505050905090810190601f168015611fdf5780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b158015611ffc57600080fd5b505af4158015612010573d6000803e3d6000fd5b505050506040513d602081101561202657600080fd5b5051905080612036888888611cc3565b146120825760408051888152614e52602082015281517f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd929181900390910190a1614e52915050611606565b5060019695505050505050565b303b1590565b8051600090829060018114156120c357816000815181106120b257fe5b602002602001015192505050610ad8565b6000811161210e576040805162461bcd60e51b81526020600482015260136024820152724d7573742070726f766964652068617368657360681b604482015290519081900360640190fd5b600080805b60018411156121ac575060009150815b838310156121a45783836001011061213e5760018403612143565b826001015b915061217b85848151811061215457fe5b602002602001015160001c86848151811061216b57fe5b602002602001015160001c6122f7565b60001b85828151811061218a57fe5b602090810291909101015260029290920191600101612123565b809350612113565b846000815181106121b957fe5b602002602001015195505050505050919050565b60405160009060ff8316815382601e1a600182015382601d1a600282015382601c1a600382015382601b1a600482015382601a1a60058201538260191a60068201538260181a60078201538260171a60088201538260161a60098201538260151a600a8201538260141a600b8201538260131a600c8201538260121a600d8201538260111a600e8201538260101a600f82015382600f1a601082015382600e1a601182015382600d1a601282015382600c1a601382015382600b1a601482015382600a1a60158201538260091a60168201538260081a60178201538260071a60188201538260061a60198201538260051a601a8201538260041a601b8201538260031a601c8201538260021a601d8201538260011a601e8201538260001a601f8201535192915050565b6000612365600280612308866121cd565b612311866121cd565b604051602001808381526020018281526020019250505060405160208183030381529060405260405180828051906020019080838360208310611bc85780518252601f199092019160209182019101611ba9565b9392505050565b6000816020840101516040518160031a60008201538160021a60018201538160011a60028201538160001a60038201535160e01c949350505050565b60008060006123b7858561253f565b94509150816123e7576123ca858561253f565b94509150816123d857600080fd5b6123e2858561253f565b945091505b606482106123f457600080fd5b60005b828110156124205760248501945061240f868661253f565b8101600401955091506001016123f7565b5092949350505050565b600080808080808080808080806124418e8e61253f565b9d509050600a811061245257600080fd5b60005b818110156124b75760088e019d5061246d8f8f61253f565b9e50975061247b8f8f6125f2565b61248c579c87019c600096506124af565b60018e019d5061249c8f8f612621565b939a5090985090965090945092506124b7565b600101612455565b50949d929c50929a50919850909650945050505050565b60008060405185815283601c1a8582015383601d1a6001860182015383601e1a6002860182015383601f1a600386018201535195945050505050565b60008061251683610e30565b63ffffffff1690508061252d576000915050610ad8565b8261253782611519565b149392505050565b600080600084848151811061255057fe5b01602001516001949094019360f81c905060fd8110156125775760ff1691508290506125eb565b8060ff1660fd141561259d5761258f8585601061274c565b8460020192509250506125eb565b8060ff1660fe14156125c3576125b58585602061274c565b8460040192509250506125eb565b8060ff1660ff14156125e9576125db8585604061274c565b8460080192509250506125eb565b505b9250929050565b8151600090603560f91b9084908490811061260957fe5b01602001516001600160f81b03191614905092915050565b600080600080600080600080600080600061263c8d8d61278e565b9c509050600460ff82161461265057600080fd5b61265a8d8d6127c0565b95508060ff168c019b5061266e8d8d61278e565b9c509050600860ff82161461268257600080fd5b61268c8d8d61284f565b67ffffffffffffffff1692508060ff168c019b506126aa8d8d61278e565b9c509050601460ff8216146126be57600080fd5b6126c88d8d612983565b94508060ff168c019b506126dc8d8d61278e565b9c509050600160ff8216146126f057600080fd5b8c8c815181106126fc57fe5b016020015160ff82169c909c019b60f81c91506127198d8d61278e565b9c509050601460ff82161461272d57600080fd5b6127378d8d612983565b929d949c50949a509850965090945050505050565b6000805b60088304811015612786578060080260020a858286018151811061277057fe5b016020015160f81c029190910190600101612750565b509392505050565b6000808351831061279e57600080fd5b8383815181106127aa57fe5b016020015160f81c915050600182019250929050565b60008282815181106127ce57fe5b602001015160f81c60f81b60f81c60ff166301000000028383600101815181106127f457fe5b602001015160f81c60f81b60f81c60ff16620100000284846002018151811061281957fe5b602001015160f81c60f81b60f81c60ff166101000285856003018151811061283d57fe5b016020015160f81c0101019392505050565b600082828151811061285d57fe5b602001015160f81c60f81b60f81c60ff166701000000000000000283836001018151811061288757fe5b602001015160f81c60f81b60f81c60ff166601000000000000028484600201815181106128b057fe5b602001015160f81c60f81b60f81c60ff1665010000000000028585600301815181106128d857fe5b602001015160f81c60f81b60f81c60ff16600160201b028686600401815181106128fe57fe5b602001015160f81c60f81b60f81c60ff1663010000000287876005018151811061292457fe5b602001015160f81c60f81b60f81c60ff16620100000288886006018151811061294957fe5b602001015160f81c60f81b60f81c60ff166101000289896007018151811061296d57fe5b016020015160f81c010101010101019392505050565b016014015190565b604051806101200160405280600990602082028038833950919291505056fea57c1ba4cf2c89b3558cfeeca4339e04551f0fc1a12cf63f1923c2eed8a5be8b436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564a265627a7a723158208f9c823fadbd0d3f94a5c690586decacfa96a927109fa25f9cdc03ddab0d33fb64736f6c634300050b0032";

    public static final String FUNC_TRUSTEDCLAIMMANAGER = "trustedClaimManager";

    public static final String FUNC_MINPROPOSALDEPOSIT = "minProposalDeposit";

    public static final String FUNC_SYSCOINERC20MANAGER = "syscoinERC20Manager";

    public static final String FUNC_INIT = "init";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_PROPOSE = "propose";

    public static final String FUNC_CONFIRM = "confirm";

    public static final String FUNC_CHALLENGE = "challenge";

    public static final String FUNC_SEMIAPPROVE = "semiApprove";

    public static final String FUNC_INVALIDATE = "invalidate";

    public static final String FUNC_RELAYTX = "relayTx";

    public static final String FUNC_VERIFYTX = "verifyTx";

    public static final String FUNC_CALCSUPERBLOCKHASH = "calcSuperblockHash";

    public static final String FUNC_GETBESTSUPERBLOCK = "getBestSuperblock";

    public static final String FUNC_GETSUPERBLOCK = "getSuperblock";

    public static final String FUNC_GETSUPERBLOCKHEIGHT = "getSuperblockHeight";

    public static final String FUNC_GETSUPERBLOCKANCESTORS = "getSuperblockAncestors";

    public static final String FUNC_GETSUPERBLOCKMERKLEROOT = "getSuperblockMerkleRoot";

    public static final String FUNC_GETSUPERBLOCKTIMESTAMP = "getSuperblockTimestamp";

    public static final String FUNC_GETSUPERBLOCKPARENTID = "getSuperblockParentId";

    public static final String FUNC_GETSUPERBLOCKSTATUS = "getSuperblockStatus";

    public static final String FUNC_GETINDEXNEXTSUPERBLOCK = "getIndexNextSuperblock";

    public static final String FUNC_MAKEMERKLE = "makeMerkle";

    public static final String FUNC_ISAPPROVED = "isApproved";

    public static final String FUNC_ISSEMIAPPROVED = "isSemiApproved";

    public static final String FUNC_GETCHAINHEIGHT = "getChainHeight";

    public static final String FUNC_GETSUPERBLOCKLOCATOR = "getSuperblockLocator";

    public static final String FUNC_GETSUPERBLOCKAT = "getSuperblockAt";

    public static final Event NEWSUPERBLOCK_EVENT = new Event("NewSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event APPROVEDSUPERBLOCK_EVENT = new Event("ApprovedSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event CHALLENGESUPERBLOCK_EVENT = new Event("ChallengeSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SEMIAPPROVEDSUPERBLOCK_EVENT = new Event("SemiApprovedSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event INVALIDSUPERBLOCK_EVENT = new Event("InvalidSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event ERRORSUPERBLOCK_EVENT = new Event("ErrorSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event VERIFYTRANSACTION_EVENT = new Event("VerifyTransaction", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event RELAYTRANSACTION_EVENT = new Event("RelayTransaction", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("4", "0x6411bac91d440F86A0cce78e9f56a3e0eaf64d1e");
    }

    @Deprecated
    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SyscoinSuperblocks(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<Address> trustedClaimManager() {
        final Function function = new Function(FUNC_TRUSTEDCLAIMMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> minProposalDeposit() {
        final Function function = new Function(FUNC_MINPROPOSALDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> syscoinERC20Manager() {
        final Function function = new Function(FUNC_SYSCOINERC20MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public List<NewSuperblockEventResponse> getNewSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<NewSuperblockEventResponse> responses = new ArrayList<NewSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewSuperblockEventResponse typedResponse = new NewSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewSuperblockEventResponse> newSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewSuperblockEventResponse>() {
            @Override
            public NewSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWSUPERBLOCK_EVENT, log);
                NewSuperblockEventResponse typedResponse = new NewSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<NewSuperblockEventResponse> newSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWSUPERBLOCK_EVENT));
        return newSuperblockEventFlowable(filter);
    }

    public List<ApprovedSuperblockEventResponse> getApprovedSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVEDSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<ApprovedSuperblockEventResponse> responses = new ArrayList<ApprovedSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovedSuperblockEventResponse typedResponse = new ApprovedSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovedSuperblockEventResponse> approvedSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ApprovedSuperblockEventResponse>() {
            @Override
            public ApprovedSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVEDSUPERBLOCK_EVENT, log);
                ApprovedSuperblockEventResponse typedResponse = new ApprovedSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovedSuperblockEventResponse> approvedSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVEDSUPERBLOCK_EVENT));
        return approvedSuperblockEventFlowable(filter);
    }

    public List<ChallengeSuperblockEventResponse> getChallengeSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHALLENGESUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<ChallengeSuperblockEventResponse> responses = new ArrayList<ChallengeSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChallengeSuperblockEventResponse typedResponse = new ChallengeSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ChallengeSuperblockEventResponse> challengeSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ChallengeSuperblockEventResponse>() {
            @Override
            public ChallengeSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHALLENGESUPERBLOCK_EVENT, log);
                ChallengeSuperblockEventResponse typedResponse = new ChallengeSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ChallengeSuperblockEventResponse> challengeSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHALLENGESUPERBLOCK_EVENT));
        return challengeSuperblockEventFlowable(filter);
    }

    public List<SemiApprovedSuperblockEventResponse> getSemiApprovedSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SEMIAPPROVEDSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<SemiApprovedSuperblockEventResponse> responses = new ArrayList<SemiApprovedSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SemiApprovedSuperblockEventResponse typedResponse = new SemiApprovedSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SemiApprovedSuperblockEventResponse> semiApprovedSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SemiApprovedSuperblockEventResponse>() {
            @Override
            public SemiApprovedSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SEMIAPPROVEDSUPERBLOCK_EVENT, log);
                SemiApprovedSuperblockEventResponse typedResponse = new SemiApprovedSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SemiApprovedSuperblockEventResponse> semiApprovedSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SEMIAPPROVEDSUPERBLOCK_EVENT));
        return semiApprovedSuperblockEventFlowable(filter);
    }

    public List<InvalidSuperblockEventResponse> getInvalidSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INVALIDSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<InvalidSuperblockEventResponse> responses = new ArrayList<InvalidSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvalidSuperblockEventResponse typedResponse = new InvalidSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<InvalidSuperblockEventResponse> invalidSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, InvalidSuperblockEventResponse>() {
            @Override
            public InvalidSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(INVALIDSUPERBLOCK_EVENT, log);
                InvalidSuperblockEventResponse typedResponse = new InvalidSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<InvalidSuperblockEventResponse> invalidSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVALIDSUPERBLOCK_EVENT));
        return invalidSuperblockEventFlowable(filter);
    }

    public List<ErrorSuperblockEventResponse> getErrorSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ERRORSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<ErrorSuperblockEventResponse> responses = new ArrayList<ErrorSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorSuperblockEventResponse typedResponse = new ErrorSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ErrorSuperblockEventResponse> errorSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ErrorSuperblockEventResponse>() {
            @Override
            public ErrorSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ERRORSUPERBLOCK_EVENT, log);
                ErrorSuperblockEventResponse typedResponse = new ErrorSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ErrorSuperblockEventResponse> errorSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ERRORSUPERBLOCK_EVENT));
        return errorSuperblockEventFlowable(filter);
    }

    public List<VerifyTransactionEventResponse> getVerifyTransactionEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VERIFYTRANSACTION_EVENT, transactionReceipt);
        ArrayList<VerifyTransactionEventResponse> responses = new ArrayList<VerifyTransactionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VerifyTransactionEventResponse typedResponse = new VerifyTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VerifyTransactionEventResponse> verifyTransactionEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, VerifyTransactionEventResponse>() {
            @Override
            public VerifyTransactionEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VERIFYTRANSACTION_EVENT, log);
                VerifyTransactionEventResponse typedResponse = new VerifyTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<VerifyTransactionEventResponse> verifyTransactionEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VERIFYTRANSACTION_EVENT));
        return verifyTransactionEventFlowable(filter);
    }

    public List<RelayTransactionEventResponse> getRelayTransactionEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RELAYTRANSACTION_EVENT, transactionReceipt);
        ArrayList<RelayTransactionEventResponse> responses = new ArrayList<RelayTransactionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RelayTransactionEventResponse typedResponse = new RelayTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RelayTransactionEventResponse> relayTransactionEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RelayTransactionEventResponse>() {
            @Override
            public RelayTransactionEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RELAYTRANSACTION_EVENT, log);
                RelayTransactionEventResponse typedResponse = new RelayTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<RelayTransactionEventResponse> relayTransactionEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RELAYTRANSACTION_EVENT));
        return relayTransactionEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> init(Address _syscoinERC20Manager, Address _claimManager) {
        final Function function = new Function(
                FUNC_INIT, 
                Arrays.<Type>asList(_syscoinERC20Manager, _claimManager), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(Bytes32 _blocksMerkleRoot, Uint256 _accumulatedWork, Uint256 _timestamp, Bytes32 _lastHash, Uint32 _lastBits, Bytes32 _parentId) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(_blocksMerkleRoot, _accumulatedWork, _timestamp, _lastHash, _lastBits, _parentId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> propose(Bytes32 _blocksMerkleRoot, Uint256 _accumulatedWork, Uint256 _timestamp, Bytes32 _lastHash, Uint32 _lastBits, Bytes32 _parentId, Address submitter) {
        final Function function = new Function(
                FUNC_PROPOSE, 
                Arrays.<Type>asList(_blocksMerkleRoot, _accumulatedWork, _timestamp, _lastHash, _lastBits, _parentId, submitter), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> confirm(Bytes32 _superblockHash, Address _validator) {
        final Function function = new Function(
                FUNC_CONFIRM, 
                Arrays.<Type>asList(_superblockHash, _validator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> challenge(Bytes32 _superblockHash, Address _challenger) {
        final Function function = new Function(
                FUNC_CHALLENGE, 
                Arrays.<Type>asList(_superblockHash, _challenger), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> semiApprove(Bytes32 _superblockHash, Address _validator) {
        final Function function = new Function(
                FUNC_SEMIAPPROVE, 
                Arrays.<Type>asList(_superblockHash, _validator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> invalidate(Bytes32 _superblockHash, Address _validator) {
        final Function function = new Function(
                FUNC_INVALIDATE, 
                Arrays.<Type>asList(_superblockHash, _validator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> relayTx(DynamicBytes _txBytes, Uint256 _txIndex, DynamicArray<Uint256> _txSiblings, DynamicBytes _syscoinBlockHeader, Uint256 _syscoinBlockIndex, DynamicArray<Uint256> _syscoinBlockSiblings, Bytes32 _superblockHash) {
        final Function function = new Function(
                FUNC_RELAYTX, 
                Arrays.<Type>asList(_txBytes, _txIndex, _txSiblings, _syscoinBlockHeader, _syscoinBlockIndex, _syscoinBlockSiblings, _superblockHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> verifyTx(DynamicBytes _txBytes, Uint256 _txIndex, DynamicArray<Uint256> _siblings, DynamicBytes _txBlockHeaderBytes, Bytes32 _txsuperblockHash) {
        final Function function = new Function(
                FUNC_VERIFYTX, 
                Arrays.<Type>asList(_txBytes, _txIndex, _siblings, _txBlockHeaderBytes, _txsuperblockHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bytes32> calcSuperblockHash(Bytes32 _blocksMerkleRoot, Uint256 _accumulatedWork, Uint256 _timestamp, Bytes32 _lastHash, Uint32 _lastBits, Bytes32 _parentId) {
        final Function function = new Function(FUNC_CALCSUPERBLOCKHASH, 
                Arrays.<Type>asList(_blocksMerkleRoot, _accumulatedWork, _timestamp, _lastHash, _lastBits, _parentId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bytes32> getBestSuperblock() {
        final Function function = new Function(FUNC_GETBESTSUPERBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Tuple9<Bytes32, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32>> getSuperblock(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCK, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint32>() {}));
        return new RemoteFunctionCall<Tuple9<Bytes32, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32>>(function,
                new Callable<Tuple9<Bytes32, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32>>() {
                    @Override
                    public Tuple9<Bytes32, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple9<Bytes32, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32>(
                                (Bytes32) results.get(0), 
                                (Uint256) results.get(1), 
                                (Uint256) results.get(2), 
                                (Bytes32) results.get(3), 
                                (Uint32) results.get(4), 
                                (Bytes32) results.get(5), 
                                (Address) results.get(6), 
                                (Uint8) results.get(7), 
                                (Uint32) results.get(8));
                    }
                });
    }

    public RemoteFunctionCall<Uint32> getSuperblockHeight(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKHEIGHT, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bytes32> getSuperblockAncestors(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKANCESTORS, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bytes32> getSuperblockMerkleRoot(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKMERKLEROOT, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> getSuperblockTimestamp(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKTIMESTAMP, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bytes32> getSuperblockParentId(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKPARENTID, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint8> getSuperblockStatus(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKSTATUS, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint32> getIndexNextSuperblock() {
        final Function function = new Function(FUNC_GETINDEXNEXTSUPERBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bytes32> makeMerkle(DynamicArray<Bytes32> hashes) {
        final Function function = new Function(FUNC_MAKEMERKLE, 
                Arrays.<Type>asList(hashes), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bool> isApproved(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_ISAPPROVED, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bool> isSemiApproved(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_ISSEMIAPPROVED, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> getChainHeight() {
        final Function function = new Function(FUNC_GETCHAINHEIGHT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<StaticArray9<Bytes32>> getSuperblockLocator() {
        final Function function = new Function(FUNC_GETSUPERBLOCKLOCATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray9<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bytes32> getSuperblockAt(Uint256 _height) {
        final Function function = new Function(FUNC_GETSUPERBLOCKAT, 
                Arrays.<Type>asList(_height), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    @Deprecated
    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SyscoinSuperblocks(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SyscoinSuperblocks(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SyscoinSuperblocks(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SyscoinSuperblocks load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SyscoinSuperblocks(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SyscoinSuperblocks> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SyscoinSuperblocks.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class NewSuperblockEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Address who;
    }

    public static class ApprovedSuperblockEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Address who;
    }

    public static class ChallengeSuperblockEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Address who;
    }

    public static class SemiApprovedSuperblockEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Address who;
    }

    public static class InvalidSuperblockEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Address who;
    }

    public static class ErrorSuperblockEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Uint256 err;
    }

    public static class VerifyTransactionEventResponse extends BaseEventResponse {
        public Bytes32 txHash;

        public Uint256 returnCode;
    }

    public static class RelayTransactionEventResponse extends BaseEventResponse {
        public Bytes32 txHash;

        public Uint256 returnCode;
    }
}
