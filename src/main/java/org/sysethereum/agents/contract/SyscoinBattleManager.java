package org.sysethereum.agents.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple9;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.3.0.
 */
public class SyscoinBattleManager extends Contract {
    private static final String BINARY = "0x608060405234801561001057600080fd5b5060405160808061272d83398101604090815281516020830151918301516060909301516003805492949285919060ff1916600183600281111561005057fe5b021790555060048054600160a060020a031916600160a060020a039490941693909317909255600155600255506126a18061008c6000396000f30060806040526004361061013a5763ffffffff60e060020a600035041663089845e1811461013f5780630f2c63ff1461019f57806318b011de146101ba5780632a3548ae146101e15780633678c1431461023b578063455e61661461025c57806352b63e9f146102715780635403af47146102cf5780635704a5fa146102e457806357bd24fb1461034c57806361bd8d66146103645780636ca640a11461037957806371a8c18a1461038e578063795ea18e146103ba5780637dbd2832146103d257806390b6f6991461045b57806399b32f3a14610470578063a6c07c9614610488578063aa447e22146104a0578063abbb6bf6146104b8578063ba16d600146104f4578063d035c40314610509578063d1daeede1461051e578063ec6dbad814610548578063eda1970b14610570578063f1afcfa614610585575b600080fd5b34801561014b57600080fd5b50604080516020600460443581810135838102808601850190965280855261019d95833595602480359636969560649593949201929182918501908490808284375094975061059a9650505050505050565b005b3480156101ab57600080fd5b5061019d600435602435610682565b3480156101c657600080fd5b506101cf610768565b60408051918252519081900360200190f35b3480156101ed57600080fd5b5060408051602060046024803582810135848102808701860190975280865261019d9684359636966044959194909101929182918501908490808284375094975061076e9650505050505050565b34801561024757600080fd5b5061019d600160a060020a03600435166107f9565b34801561026857600080fd5b506101cf61085f565b34801561027d57600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261019d95833595369560449491939091019190819084018382808284375094975061086b9650505050505050565b3480156102db57600080fd5b506101cf6108e7565b3480156102f057600080fd5b506102fc6004356108ed565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610338578181015183820152602001610320565b505050509050019250505060405180910390f35b34801561035857600080fd5b506101cf600435610951565b34801561037057600080fd5b506101cf610966565b34801561038557600080fd5b506101cf61096d565b34801561039a57600080fd5b506103a6600435610979565b604080519115158252519081900360200190f35b3480156103c657600080fd5b506101cf6004356109ae565b3480156103de57600080fd5b506103ea600435610a9d565b604080518a8152602081018a9052600160a060020a03808a169282019290925290871660608201526080810186905260a0810185905260c0810184905260e08101839052610100810182600781111561043f57fe5b60ff168152602001995050505050505050505060405180910390f35b34801561046757600080fd5b506101cf610af7565b34801561047c57600080fd5b506103a6600435610afe565b34801561049457600080fd5b5061019d600435610b30565b3480156104ac57600080fd5b5061019d600435610ba9565b3480156104c457600080fd5b506104d0600435610c74565b604051808260028111156104e057fe5b60ff16815260200191505060405180910390f35b34801561050057600080fd5b506101cf610cae565b34801561051557600080fd5b506101cf610cba565b34801561052a57600080fd5b506101cf600435600160a060020a0360243581169060443516610cc1565b34801561055457600080fd5b50610560600435610e94565b604051808260078111156104e057fe5b34801561057c57600080fd5b506101cf610eac565b34801561059157600080fd5b506101cf610eb2565b60008281526020819052604081206002015481908490600160a060020a031633146105c457600080fd5b600085815260208190526040902092506105de8385610eb8565b915081156106145760408051868152602081018490528151600080516020612656833981519152929181900390910190a161067a565b60078301805460010190819055426004850155600584015560038301546040805188815260208101889052600160a060020a0390921682820152517fa35dfb6661c6bfda214c0a2820d9b4bd1a673e2c303cf1578b5948a6f63b5a669181900360600190a15b505050505050565b60008181526020819052604081206003015481908390600160a060020a031633146106ac57600080fd5b600084815260208190526040902092506106c583611088565b915081156106fb5760408051858152602081018490528151600080516020612656833981519152929181900390910190a1610761565b60078301805460010190819055426004850155600684015560028301546040805187815260208101879052600160a060020a0390921682820152517f0817bf136ff95abb2d41d10a9fa5ff6652ff71c13e1b46717fae65db16423c9b9181900360600190a15b5050505050565b60025481565b60008281526020819052604081206002015481908490600160a060020a0316331461079857600080fd5b600085815260208190526040902092506107b28385611116565b915081158015906107c4575060018214155b156107615760408051868152602081018490528151600080516020612656833981519152929181900390910190a15050505050565b6003546101009004600160a060020a031615801561081f5750600160a060020a03811615155b151561082a57600080fd5b60038054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b670de0b6b3a76484d081565b60008281526020819052604081206002015481908490600160a060020a0316331461089557600080fd5b600085815260208190526040902092506108af838561127e565b915081156107615760408051868152602081018490528151600080516020612656833981519152929181900390910190a15050505050565b619c4081565b6000818152602081815260409182902060080180548351818402810184019094528084526060939283018282801561094557602002820191906000526020600020905b81548152600190910190602001808311610930575b50505050509050919050565b60009081526020819052604090206001015490565b6206b6c081565b670de0b6b3a76ab6c081565b6000818152602081905260408120600581015460068201541180156109a5575060025481600401540142115b91505b50919050565b60008181526020819052604081206007600a82015460ff1660078111156109d157fe5b14806109f65750806005015481600601541180156109f6575060025481600401540142115b15610a255760028101546001820154610a1c918591600160a060020a039091169061140f565b600091506109a8565b80600601548160050154118015610a43575060025481600401540142115b15610a695760038101546001820154610a1c918591600160a060020a0390911690611498565b6040805184815261c36e60208201528151600080516020612656833981519152929181900390910190a15061c36e92915050565b600060208190529081526040902080546001820154600283015460038401546004850154600586015460068701546007880154600a9098015496979596600160a060020a0395861696959094169492939192909160ff1689565b6205c49081565b6000818152602081905260408120600681015460058201541180156109a5575060025460049091015401421192915050565b600081815260208190526040812090610b498284611521565b90508060011415610b7a5760038201546001830154610b75918591600160a060020a0390911690611498565b610ba4565b8060021415610ba45760028201546001830154610ba4918591600160a060020a039091169061140f565b505050565b60008181526020819052604081206003015481908390600160a060020a03163314610bd357600080fd5b60008481526020819052604090209250610bec836115fe565b91508115610c225760408051858152602081018490528151600080516020612656833981519152929181900390910190a1610c6e565b6007830180546001019081905542600485015560068401556040805185815290517f604cbf66497fc3589a38c65b99bc5324f767b1e9524e3c82805b4fbce7d60d439181900360200190a15b50505050565b6000908152602081815260408083206001808201548552600990910190925290912001546c01000000000000000000000000900460ff1690565b670de0b6b3a764000081565b62035b6081565b600354600090819081906101009004600160a060020a0316338114610ce557600080fd5b6040805160208082018a90523382840152825180830384018152606090920192839052815191929182918401908083835b60208310610d355780518252601f199092019160209182019101610d16565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209250600080846000191660001916815260200190815260200160002091508282600001816000191690555086826001018160001916905550858260020160006101000a815481600160a060020a030219169083600160a060020a03160217905550848260030160006101000a815481600160a060020a030219169083600160a060020a03160217905550428260040181905550600082600601819055506001826005018190555060018260070181905550600182600a0160006101000a81548160ff02191690836007811115610e3457fe5b02179055506040805188815260208101859052600160a060020a03808916828401528716606082015290517f403956bdc140717d54d4573786b4e9e773ef2e6e325e2c061476eb47711770de9181900360800190a1509095945050505050565b6000908152602081905260409020600a015460ff1690565b6184d081565b60015481565b600080600080610ecb3362035b606116c9565b1515610edb5761c38c935061107f565b600886015415610eea57600080fd5b6002600a87015460ff166007811115610eff57fe5b141561107957610f12866001015461176d565b505050505095505050509250846001865103815181101515610f3057fe5b602090810290910101518214610f4a5761c3e6935061107f565b6040517ff9b5d7c000000000000000000000000000000000000000000000000000000000815260206004820181815287516024840152875173__SyscoinMessageLibrary_________________9363f9b5d7c0938a9392839260440191808601910280838360005b83811015610fca578181015183820152602001610fb2565b505050509050019250505060206040518083038186803b158015610fed57600080fd5b505af4158015611001573d6000803e3d6000fd5b505050506040513d602081101561101757600080fd5b505183146110295761c378935061107f565b61103b86600101543362035b6061189e565b9050801561104b5780935061107f565b845161106090600888019060208801906125ca565b50600a8601805460ff191660031790556000935061107f565b61c36493505b50505092915050565b600080611098336205c4906116c9565b15156110a85761c38c91506109a8565b6001600a84015460ff1660078111156110bd57fe5b141561110c57600a8301805460ff19166002179055600383015433600160a060020a03909116146110ea57fe5b6110fc8360010154336205c49061189e565b90508015610a1c578091506109a8565b5061c36492915050565b60008060008060008060608860080180549050955085885181151561113757fe5b049450611147896001015461176d565b505050505050505050915060018611156111ca57600093505b858410156111c557848402925061117d836001870385018a61194f565b905081600019166111ab8a6008018681548110151561119857fe5b60009182526020909120015486846119d7565b146111ba57614e529650611272565b600190930192611160565b6111f7565b60088901805460009081106111db57fe5b60009182526020909120015482146111f757614e529650611272565b600a8901805460ff1916600590811790915560078a0180546001908101918290554260048d0155918b015589015460038a015460408051928352600160a060020a03909116602083015280517fccc5933d082c4ab89700e29da032d358526b9b17a38fc7257b0a81627eb251929281900390910190a1600096505b50505050505092915050565b60008060008061129033619c406116c9565b15156112a05761c38c935061107f565b6004600a87015460ff1660078111156112b557fe5b1415611079576112c88560006050611a54565b600887018054919450849160001981019081106112e157fe5b600091825260209091200154146112fc5761c3e6935061107f565b61130a866001015486611b15565b151561131a5761c373935061107f565b6001860154600090815260098701602052604090209150600260018301546c01000000000000000000000000900460ff16600281111561135657fe5b1415611365576000935061107f565b611370828487611b77565b905080156113805780935061107f565b611391866001015433619c4061189e565b905080156113a15780935061107f565b600182810180546cff00000000000000000000000019166c02000000000000000000000000179055860154604080519182526020820185905280517ff09fb097b6b0e6b8bf9e7bbc57886fd27db5698fb049f341655032728facfd149281900390910190a16000935061107f565b6000838152602081905260409020600381015460028201546114419186918591600160a060020a039081169116611cf2565b61144a84611d93565b6040805183815260208101869052600160a060020a0385168183015290517faab6a8f22c7ab5131c1cdc1c0000e123efd38efadfef092cef78be507d16542e9181900360600190a150505050565b6000838152602081905260409020600281015460038201546114ca9186918591600160a060020a039081169116611cf2565b6114d384611d93565b6040805183815260208101869052600160a060020a0385168183015290517fda9b5fdafb0f67d811425d3f095917a63329d60d3db3aa456b5247a8f3b88b119181900360600190a150505050565b6000806005600a85015460ff16600781111561153957fe5b14156115ce5761154884611e11565b905080156115825760408051848152602081018390528151600080516020612656833981519152929181900390910190a1600291506115f7565b61158b84611f97565b905080156115c55760408051848152602081018390528151600080516020612656833981519152929181900390910190a1600291506115f7565b600191506115f7565b6007600a85015460ff1660078111156115e357fe5b14156115f257600291506115f7565b600091505b5092915050565b600080600061160f33619c406116c9565b151561161f5761c38c92506116c2565b6003600a85015460ff16600781111561163457fe5b14156116bc5760018481015460009081526009860160205260408120909101546c01000000000000000000000000900460ff16925082600281111561167557fe5b1461167f57600080fd5b611690846001015433619c4061189e565b905080156116a0578092506116c2565b600a8401805460ff1916600417905560009250600191506116c2565b61c36492505b5050919050565b600354604080517fe1254fba000000000000000000000000000000000000000000000000000000008152600160a060020a03858116600483015291516000938593610100909104169163e1254fba91602480830192602092919082900301818887803b15801561173857600080fd5b505af115801561174c573d6000803e3d6000fd5b505050506040513d602081101561176257600080fd5b505110159392505050565b60048054604080517f6e5b707100000000000000000000000000000000000000000000000000000000815292830184905251600092839283928392839283928392839283928392600160a060020a0390921691636e5b70719160248083019261014092919082900301818787803b1580156117e757600080fd5b505af11580156117fb573d6000803e3d6000fd5b505050506040513d61014081101561181257600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505099509950995099509950995099509950995099509193959799509193959799565b600354604080517fc2569e5a00000000000000000000000000000000000000000000000000000000815260048101869052600160a060020a03858116602483015260448201859052915160009361010090049092169163c2569e5a9160648082019260209290919082900301818787803b15801561191b57600080fd5b505af115801561192f573d6000803e3d6000fd5b505050506040513d602081101561194557600080fd5b5051949350505050565b6060806000858503600101604051908082528060200260200182016040528015611983578160200160208202803883390190505b509150600090505b85850381116119ce57838682018151811015156119a457fe5b9060200190602002015182828151811015156119bc57fe5b6020908102909101015260010161198b565b50949350505050565b60008381808080805b8751851015611a465787858151811015156119f757fe5b6020908102909101015193506002890692508260011415611a1c575082905084611a29565b821515611a295750849050825b611a3382826120cc565b95506002890498506001850194506119e0565b509398975050505050505050565b6000611b0d6002611a668686866121e3565b6040805160208082019390935281518082038401815290820191829052805190928291908401908083835b60208310611ab05780518252601f199092019160209182019101611a91565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015611af1573d6000803e3d6000fd5b5050506040513d6020811015611b0657600080fd5b505161220a565b949350505050565b6000806000611b2384612235565b63ffffffff169150611b348561176d565b50959850505050858711801595509350611b6e9250505057506001805482811515611b5b57fe5b040360015483811515611b6a57fe5b0410155b95945050505050565b60008073__SyscoinMessageLibrary_________________6376837a1384600087600190046040518463ffffffff1660e060020a0281526004018080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015611bf7578181015183820152602001611bdf565b50505050905090810190601f168015611c245780820380516001836020036101000a031916815260200191505b5094505050505060206040518083038186803b158015611c4357600080fd5b505af4158015611c57573d6000803e3d6000fd5b505050506040513d6020811015611c6d57600080fd5b505190508015611c7f57809150611cea565b611c8883612235565b60018601805467ffffffffffffffff191663ffffffff92909216919091179055611cb183612248565b8560010160086101000a81548163ffffffff021916908363ffffffff160217905550611cdc83612255565b855560028501849055600091505b509392505050565b600354604080517f748a00e20000000000000000000000000000000000000000000000000000000081526004810187905260248101869052600160a060020a038581166044830152848116606483015291516101009093049091169163748a00e29160848082019260009290919082900301818387803b158015611d7557600080fd5b505af1158015611d89573d6000803e3d6000fd5b5050505050505050565b60008181526020819052604081208181556001810182905560028101805473ffffffffffffffffffffffffffffffffffffffff1990811690915560038201805490911690556004810182905560058101829055600681018290556007810182905590611e026008830182612617565b50600a01805460ff1916905550565b60008060008060008060008060008960080180549050111515611e385761c3e69750611f8b565b611e45896001015461176d565b909192939495969798509091929394959697509091929394955090919293509091509050508097508196508299505050508860080160018a6008018054905003815481101515611e9157fe5b600091825260208083209091015460018c0154835260098c01909152604090912060088b0154919450925060021015611ef9576008890180546001198101908110611ed857fe5b60009182526020909120015482549091508114611ef95761c40e9750611f8b565b828414611f0a5761c3e69750611f8b565b600182015467ffffffffffffffff168714611f295761c3739750611f8b565b600260018301546c01000000000000000000000000900460ff166002811115611f4e57fe5b14611f5d5761c3f09750611f8b565b611f668561176d565b50959d505050508b8b11159450611f8693505050505761c3739750611f8b565b600097505b50505050505050919050565b6000806000806000806000806000611fb28a6001015461176d565b9091929394959697985090919293949596509091929394509091509050809950819b50829750839850849c505050505050600088111515611ff75761c3c898506120bf565b600063ffffffff84161161200f5761c3d298506120bf565b600084116120215761c41898506120bf565b61202a8761176d565b90919293949596979850909192939495965090919293949550909192939450909192935090919250909150905080975081935050508960080180549050860163ffffffff168563ffffffff1614151561208b578463ffffffff1698506120bf565b81881161209c5761c40498506120bf565b6120aa8a87848b8888612266565b905080156120ba578098506120bf565b600098505b5050505050505050919050565b60006121dc6002806120dd8661220a565b6120e68661220a565b60405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b6020831061213b5780518252601f19909201916020918201910161211c565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af115801561217c573d6000803e3d6000fd5b5050506040513d602081101561219157600080fd5b505160408051602081810193909352815180820384018152908201918290528051909282919084019080838360208310611ab05780518252601f199092019160209182019101611a91565b9392505050565b60006040516020818486602089010160025afa151561220157600080fd5b51949350505050565b600060405160005b602081101561222d578381601f031a81830153600101612212565b505192915050565b600061224282604461250f565b92915050565b600061224282604861250f565b60248101516000906109a58161220a565b60018601546000908152600987016020526040812081905b600889015463ffffffff831610156124ce57600260035460ff1660028111156122a357fe5b146124125773__SyscoinMessageLibrary_________________63f28843856040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156122ef57600080fd5b505af4158015612303573d6000803e3d6000fd5b505050506040513d602081101561231957600080fd5b505160070b63ffffffff60018a8501011681151561233357fe5b0760070b151561241257604080517fb199c898000000000000000000000000000000000000000000000000000000008152600787810b900b600482015263ffffffff86166024820152905173__SyscoinMessageLibrary_________________9163b199c898916044808301926020929190829003018186803b1580156123b957600080fd5b505af41580156123cd573d6000803e3d6000fd5b505050506040513d60208110156123e357600080fd5b5051600182015490945063ffffffff8086166801000000000000000090920416146124125761c3d29250612503565b60008463ffffffff1611156124c357604080517f304ef8ac00000000000000000000000000000000000000000000000000000000815263ffffffff86166004820152905173__SyscoinMessageLibrary_________________9163304ef8ac916024808301926020929190829003018186803b15801561249157600080fd5b505af41580156124a5573d6000803e3d6000fd5b505050506040513d60208110156124bb57600080fd5b505196909601955b60018201915061227e565b600260035460ff1660028111156124e157fe5b141580156124ef5750858714155b156124fe5761c3c89250612503565b600092505b50509695505050505050565b6000828260030181518110151561252257fe5b90602001015160f860020a900460f860020a0260f860020a9004630100000002838360020181518110151561255357fe5b90602001015160f860020a900460f860020a0260f860020a90046201000002848460010181518110151561258357fe5b90602001015160f860020a900460f860020a0260f860020a90046101000285858151811015156125af57fe5b016020015160f860020a908190048102040101019392505050565b828054828255906000526020600020908101928215612607579160200282015b8281111561260757825182556020909201916001909101906125ea565b50612613929150612638565b5090565b50805460008255906000526020600020908101906126359190612638565b50565b61265291905b80821115612613576000815560010161263e565b90560080235326defb5d335564dd77860b0a010e19446427d3d78d155cabd064ca9c2aa165627a7a7230582099eecc42241f6f51a32b88e4ae6fc25ff9756b54d1134100bf7289e39f57b64e0029";

    public static final String FUNC_SUPERBLOCKTIMEOUT = "superblockTimeout";

    public static final String FUNC_MINPROPOSALDEPOSIT = "minProposalDeposit";

    public static final String FUNC_RESPONDBLOCKHEADERPROOFCOST = "respondBlockHeaderProofCost";

    public static final String FUNC_SUPERBLOCKCOST = "superblockCost";

    public static final String FUNC_MINCHALLENGEDEPOSIT = "minChallengeDeposit";

    public static final String FUNC_SESSIONS = "sessions";

    public static final String FUNC_RESPONDMERKLEROOTHASHESCOST = "respondMerkleRootHashesCost";

    public static final String FUNC_MINREWARD = "minReward";

    public static final String FUNC_VERIFYSUPERBLOCKCOST = "verifySuperblockCost";

    public static final String FUNC_CHALLENGECOST = "challengeCost";

    public static final String FUNC_SUPERBLOCKDURATION = "superblockDuration";

    public static final String FUNC_SETSYSCOINCLAIMMANAGER = "setSyscoinClaimManager";

    public static final String FUNC_BEGINBATTLESESSION = "beginBattleSession";

    public static final String FUNC_QUERYMERKLEROOTHASHES = "queryMerkleRootHashes";

    public static final String FUNC_RESPONDMERKLEROOTHASHES = "respondMerkleRootHashes";

    public static final String FUNC_QUERYBLOCKHEADERPROOF = "queryBlockHeaderProof";

    public static final String FUNC_RESPONDLASTBLOCKHEADER = "respondLastBlockHeader";

    public static final String FUNC_RESPONDBLOCKHEADERPROOF = "respondBlockHeaderProof";

    public static final String FUNC_VERIFYSUPERBLOCK = "verifySuperblock";

    public static final String FUNC_TIMEOUT = "timeout";

    public static final String FUNC_GETCHALLENGERHITTIMEOUT = "getChallengerHitTimeout";

    public static final String FUNC_GETSUBMITTERHITTIMEOUT = "getSubmitterHitTimeout";

    public static final String FUNC_GETSYSCOINBLOCKHASHES = "getSyscoinBlockHashes";

    public static final String FUNC_GETSUPERBLOCKBYSESSION = "getSuperblockBySession";

    public static final String FUNC_GETSESSIONSTATUS = "getSessionStatus";

    public static final String FUNC_GETSESSIONCHALLENGESTATE = "getSessionChallengeState";

    public static final Event NEWBATTLE_EVENT = new Event("NewBattle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event CHALLENGERCONVICTED_EVENT = new Event("ChallengerConvicted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUBMITTERCONVICTED_EVENT = new Event("SubmitterConvicted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event QUERYMERKLEROOTHASHES_EVENT = new Event("QueryMerkleRootHashes", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event RESPONDMERKLEROOTHASHES_EVENT = new Event("RespondMerkleRootHashes", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event QUERYBLOCKHEADERPROOF_EVENT = new Event("QueryBlockHeaderProof", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event RESPONDBLOCKHEADERPROOF_EVENT = new Event("RespondBlockHeaderProof", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event RESPONDLASTBLOCKHEADER_EVENT = new Event("RespondLastBlockHeader", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event ERRORBATTLE_EVENT = new Event("ErrorBattle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("4", "0x8C833091ABcfC44e368Af501Ccc9bdF72843De15");
    }

    @Deprecated
    protected SyscoinBattleManager(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SyscoinBattleManager(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SyscoinBattleManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SyscoinBattleManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Uint256> superblockTimeout() {
        final Function function = new Function(FUNC_SUPERBLOCKTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minProposalDeposit() {
        final Function function = new Function(FUNC_MINPROPOSALDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> respondBlockHeaderProofCost() {
        final Function function = new Function(FUNC_RESPONDBLOCKHEADERPROOFCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> superblockCost() {
        final Function function = new Function(FUNC_SUPERBLOCKCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minChallengeDeposit() {
        final Function function = new Function(FUNC_MINCHALLENGEDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple9<Bytes32, Bytes32, Address, Address, Uint256, Uint256, Uint256, Uint256, Uint8>> sessions(Bytes32 param0) {
        final Function function = new Function(FUNC_SESSIONS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
        return new RemoteCall<Tuple9<Bytes32, Bytes32, Address, Address, Uint256, Uint256, Uint256, Uint256, Uint8>>(
                new Callable<Tuple9<Bytes32, Bytes32, Address, Address, Uint256, Uint256, Uint256, Uint256, Uint8>>() {
                    @Override
                    public Tuple9<Bytes32, Bytes32, Address, Address, Uint256, Uint256, Uint256, Uint256, Uint8> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple9<Bytes32, Bytes32, Address, Address, Uint256, Uint256, Uint256, Uint256, Uint8>(
                                (Bytes32) results.get(0), 
                                (Bytes32) results.get(1), 
                                (Address) results.get(2), 
                                (Address) results.get(3), 
                                (Uint256) results.get(4), 
                                (Uint256) results.get(5), 
                                (Uint256) results.get(6), 
                                (Uint256) results.get(7), 
                                (Uint8) results.get(8));
                    }
                });
    }

    public RemoteCall<Uint256> respondMerkleRootHashesCost() {
        final Function function = new Function(FUNC_RESPONDMERKLEROOTHASHESCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minReward() {
        final Function function = new Function(FUNC_MINREWARD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> verifySuperblockCost() {
        final Function function = new Function(FUNC_VERIFYSUPERBLOCKCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> challengeCost() {
        final Function function = new Function(FUNC_CHALLENGECOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> superblockDuration() {
        final Function function = new Function(FUNC_SUPERBLOCKDURATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public List<NewBattleEventResponse> getNewBattleEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWBATTLE_EVENT, transactionReceipt);
        ArrayList<NewBattleEventResponse> responses = new ArrayList<NewBattleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewBattleEventResponse typedResponse = new NewBattleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(2);
            typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(3);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewBattleEventResponse> newBattleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewBattleEventResponse>() {
            @Override
            public NewBattleEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWBATTLE_EVENT, log);
                NewBattleEventResponse typedResponse = new NewBattleEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(2);
                typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(3);
                return typedResponse;
            }
        });
    }

    public Flowable<NewBattleEventResponse> newBattleEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWBATTLE_EVENT));
        return newBattleEventFlowable(filter);
    }

    public List<ChallengerConvictedEventResponse> getChallengerConvictedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHALLENGERCONVICTED_EVENT, transactionReceipt);
        ArrayList<ChallengerConvictedEventResponse> responses = new ArrayList<ChallengerConvictedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChallengerConvictedEventResponse typedResponse = new ChallengerConvictedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ChallengerConvictedEventResponse> challengerConvictedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ChallengerConvictedEventResponse>() {
            @Override
            public ChallengerConvictedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHALLENGERCONVICTED_EVENT, log);
                ChallengerConvictedEventResponse typedResponse = new ChallengerConvictedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<ChallengerConvictedEventResponse> challengerConvictedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHALLENGERCONVICTED_EVENT));
        return challengerConvictedEventFlowable(filter);
    }

    public List<SubmitterConvictedEventResponse> getSubmitterConvictedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUBMITTERCONVICTED_EVENT, transactionReceipt);
        ArrayList<SubmitterConvictedEventResponse> responses = new ArrayList<SubmitterConvictedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SubmitterConvictedEventResponse typedResponse = new SubmitterConvictedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SubmitterConvictedEventResponse> submitterConvictedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SubmitterConvictedEventResponse>() {
            @Override
            public SubmitterConvictedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUBMITTERCONVICTED_EVENT, log);
                SubmitterConvictedEventResponse typedResponse = new SubmitterConvictedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<SubmitterConvictedEventResponse> submitterConvictedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUBMITTERCONVICTED_EVENT));
        return submitterConvictedEventFlowable(filter);
    }

    public List<QueryMerkleRootHashesEventResponse> getQueryMerkleRootHashesEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(QUERYMERKLEROOTHASHES_EVENT, transactionReceipt);
        ArrayList<QueryMerkleRootHashesEventResponse> responses = new ArrayList<QueryMerkleRootHashesEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            QueryMerkleRootHashesEventResponse typedResponse = new QueryMerkleRootHashesEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<QueryMerkleRootHashesEventResponse> queryMerkleRootHashesEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, QueryMerkleRootHashesEventResponse>() {
            @Override
            public QueryMerkleRootHashesEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(QUERYMERKLEROOTHASHES_EVENT, log);
                QueryMerkleRootHashesEventResponse typedResponse = new QueryMerkleRootHashesEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<QueryMerkleRootHashesEventResponse> queryMerkleRootHashesEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(QUERYMERKLEROOTHASHES_EVENT));
        return queryMerkleRootHashesEventFlowable(filter);
    }

    public List<RespondMerkleRootHashesEventResponse> getRespondMerkleRootHashesEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RESPONDMERKLEROOTHASHES_EVENT, transactionReceipt);
        ArrayList<RespondMerkleRootHashesEventResponse> responses = new ArrayList<RespondMerkleRootHashesEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RespondMerkleRootHashesEventResponse typedResponse = new RespondMerkleRootHashesEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RespondMerkleRootHashesEventResponse> respondMerkleRootHashesEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RespondMerkleRootHashesEventResponse>() {
            @Override
            public RespondMerkleRootHashesEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RESPONDMERKLEROOTHASHES_EVENT, log);
                RespondMerkleRootHashesEventResponse typedResponse = new RespondMerkleRootHashesEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<RespondMerkleRootHashesEventResponse> respondMerkleRootHashesEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RESPONDMERKLEROOTHASHES_EVENT));
        return respondMerkleRootHashesEventFlowable(filter);
    }

    public List<QueryBlockHeaderProofEventResponse> getQueryBlockHeaderProofEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(QUERYBLOCKHEADERPROOF_EVENT, transactionReceipt);
        ArrayList<QueryBlockHeaderProofEventResponse> responses = new ArrayList<QueryBlockHeaderProofEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            QueryBlockHeaderProofEventResponse typedResponse = new QueryBlockHeaderProofEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<QueryBlockHeaderProofEventResponse> queryBlockHeaderProofEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, QueryBlockHeaderProofEventResponse>() {
            @Override
            public QueryBlockHeaderProofEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(QUERYBLOCKHEADERPROOF_EVENT, log);
                QueryBlockHeaderProofEventResponse typedResponse = new QueryBlockHeaderProofEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<QueryBlockHeaderProofEventResponse> queryBlockHeaderProofEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(QUERYBLOCKHEADERPROOF_EVENT));
        return queryBlockHeaderProofEventFlowable(filter);
    }

    public List<RespondBlockHeaderProofEventResponse> getRespondBlockHeaderProofEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RESPONDBLOCKHEADERPROOF_EVENT, transactionReceipt);
        ArrayList<RespondBlockHeaderProofEventResponse> responses = new ArrayList<RespondBlockHeaderProofEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RespondBlockHeaderProofEventResponse typedResponse = new RespondBlockHeaderProofEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RespondBlockHeaderProofEventResponse> respondBlockHeaderProofEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RespondBlockHeaderProofEventResponse>() {
            @Override
            public RespondBlockHeaderProofEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RESPONDBLOCKHEADERPROOF_EVENT, log);
                RespondBlockHeaderProofEventResponse typedResponse = new RespondBlockHeaderProofEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<RespondBlockHeaderProofEventResponse> respondBlockHeaderProofEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RESPONDBLOCKHEADERPROOF_EVENT));
        return respondBlockHeaderProofEventFlowable(filter);
    }

    public List<RespondLastBlockHeaderEventResponse> getRespondLastBlockHeaderEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RESPONDLASTBLOCKHEADER_EVENT, transactionReceipt);
        ArrayList<RespondLastBlockHeaderEventResponse> responses = new ArrayList<RespondLastBlockHeaderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RespondLastBlockHeaderEventResponse typedResponse = new RespondLastBlockHeaderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.blockSha256Hash = (Bytes32) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RespondLastBlockHeaderEventResponse> respondLastBlockHeaderEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RespondLastBlockHeaderEventResponse>() {
            @Override
            public RespondLastBlockHeaderEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RESPONDLASTBLOCKHEADER_EVENT, log);
                RespondLastBlockHeaderEventResponse typedResponse = new RespondLastBlockHeaderEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.blockSha256Hash = (Bytes32) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<RespondLastBlockHeaderEventResponse> respondLastBlockHeaderEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RESPONDLASTBLOCKHEADER_EVENT));
        return respondLastBlockHeaderEventFlowable(filter);
    }

    public List<ErrorBattleEventResponse> getErrorBattleEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ERRORBATTLE_EVENT, transactionReceipt);
        ArrayList<ErrorBattleEventResponse> responses = new ArrayList<ErrorBattleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorBattleEventResponse typedResponse = new ErrorBattleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ErrorBattleEventResponse> errorBattleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ErrorBattleEventResponse>() {
            @Override
            public ErrorBattleEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ERRORBATTLE_EVENT, log);
                ErrorBattleEventResponse typedResponse = new ErrorBattleEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ErrorBattleEventResponse> errorBattleEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ERRORBATTLE_EVENT));
        return errorBattleEventFlowable(filter);
    }

    public RemoteCall<TransactionReceipt> setSyscoinClaimManager(Address _syscoinClaimManager) {
        final Function function = new Function(
                FUNC_SETSYSCOINCLAIMMANAGER, 
                Arrays.<Type>asList(_syscoinClaimManager), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> beginBattleSession(Bytes32 superblockHash, Address submitter, Address challenger) {
        final Function function = new Function(
                FUNC_BEGINBATTLESESSION, 
                Arrays.<Type>asList(superblockHash, submitter, challenger), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> queryMerkleRootHashes(Bytes32 superblockHash, Bytes32 sessionId) {
        final Function function = new Function(
                FUNC_QUERYMERKLEROOTHASHES, 
                Arrays.<Type>asList(superblockHash, sessionId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> respondMerkleRootHashes(Bytes32 superblockHash, Bytes32 sessionId, DynamicArray<Bytes32> blockHashes) {
        final Function function = new Function(
                FUNC_RESPONDMERKLEROOTHASHES, 
                Arrays.<Type>asList(superblockHash, sessionId, blockHashes), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> queryBlockHeaderProof(Bytes32 sessionId) {
        final Function function = new Function(
                FUNC_QUERYBLOCKHEADERPROOF, 
                Arrays.<Type>asList(sessionId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> respondLastBlockHeader(Bytes32 sessionId, DynamicBytes blockHeader) {
        final Function function = new Function(
                FUNC_RESPONDLASTBLOCKHEADER, 
                Arrays.<Type>asList(sessionId, blockHeader), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> respondBlockHeaderProof(Bytes32 sessionId, DynamicArray<Uint256> _siblingsMap) {
        final Function function = new Function(
                FUNC_RESPONDBLOCKHEADERPROOF, 
                Arrays.<Type>asList(sessionId, _siblingsMap), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> verifySuperblock(Bytes32 sessionId) {
        final Function function = new Function(
                FUNC_VERIFYSUPERBLOCK, 
                Arrays.<Type>asList(sessionId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> timeout(Bytes32 sessionId) {
        final Function function = new Function(
                FUNC_TIMEOUT, 
                Arrays.<Type>asList(sessionId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Bool> getChallengerHitTimeout(Bytes32 sessionId) {
        final Function function = new Function(FUNC_GETCHALLENGERHITTIMEOUT, 
                Arrays.<Type>asList(sessionId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> getSubmitterHitTimeout(Bytes32 sessionId) {
        final Function function = new Function(FUNC_GETSUBMITTERHITTIMEOUT, 
                Arrays.<Type>asList(sessionId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Bytes32>> getSyscoinBlockHashes(Bytes32 sessionId) {
        final Function function = new Function(FUNC_GETSYSCOINBLOCKHASHES, 
                Arrays.<Type>asList(sessionId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSuperblockBySession(Bytes32 sessionId) {
        final Function function = new Function(FUNC_GETSUPERBLOCKBYSESSION, 
                Arrays.<Type>asList(sessionId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint8> getSessionStatus(Bytes32 sessionId) {
        final Function function = new Function(FUNC_GETSESSIONSTATUS, 
                Arrays.<Type>asList(sessionId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint8> getSessionChallengeState(Bytes32 sessionId) {
        final Function function = new Function(FUNC_GETSESSIONCHALLENGESTATE, 
                Arrays.<Type>asList(sessionId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    @Deprecated
    public static SyscoinBattleManager load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SyscoinBattleManager(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SyscoinBattleManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SyscoinBattleManager(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SyscoinBattleManager load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SyscoinBattleManager(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SyscoinBattleManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SyscoinBattleManager(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SyscoinBattleManager> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, Uint8 _network, Address _superblocks, Uint256 _superblockDuration, Uint256 _superblockTimeout) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_network, _superblocks, _superblockDuration, _superblockTimeout));
        return deployRemoteCall(SyscoinBattleManager.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<SyscoinBattleManager> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, Uint8 _network, Address _superblocks, Uint256 _superblockDuration, Uint256 _superblockTimeout) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_network, _superblocks, _superblockDuration, _superblockTimeout));
        return deployRemoteCall(SyscoinBattleManager.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SyscoinBattleManager> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, Uint8 _network, Address _superblocks, Uint256 _superblockDuration, Uint256 _superblockTimeout) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_network, _superblocks, _superblockDuration, _superblockTimeout));
        return deployRemoteCall(SyscoinBattleManager.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SyscoinBattleManager> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, Uint8 _network, Address _superblocks, Uint256 _superblockDuration, Uint256 _superblockTimeout) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_network, _superblocks, _superblockDuration, _superblockTimeout));
        return deployRemoteCall(SyscoinBattleManager.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class NewBattleEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Bytes32 sessionId;

        public Address submitter;

        public Address challenger;
    }

    public static class ChallengerConvictedEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Bytes32 sessionId;

        public Address challenger;
    }

    public static class SubmitterConvictedEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Bytes32 sessionId;

        public Address submitter;
    }

    public static class QueryMerkleRootHashesEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Bytes32 sessionId;

        public Address submitter;
    }

    public static class RespondMerkleRootHashesEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Bytes32 sessionId;

        public Address challenger;
    }

    public static class QueryBlockHeaderProofEventResponse {
        public Log log;

        public Bytes32 sessionId;
    }

    public static class RespondBlockHeaderProofEventResponse {
        public Log log;

        public Bytes32 sessionId;

        public Address challenger;
    }

    public static class RespondLastBlockHeaderEventResponse {
        public Log log;

        public Bytes32 sessionId;

        public Bytes32 blockSha256Hash;
    }

    public static class ErrorBattleEventResponse {
        public Log log;

        public Bytes32 sessionId;

        public Uint256 err;
    }
}
