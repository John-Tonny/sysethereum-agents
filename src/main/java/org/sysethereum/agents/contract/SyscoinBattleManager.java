package org.sysethereum.agents.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple9;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.3.0.
 */
public class SyscoinBattleManager extends Contract {
    private static final String BINARY = "0x608060405234801561001057600080fd5b506040516080806129f483398101604090815281516020830151918301516060909301516003805492949285919060ff1916600183600281111561005057fe5b021790555060048054600160a060020a031916600160a060020a039490941693909317909255600155600255506129688061008c6000396000f3006080604052600436106101245763ffffffff60e060020a600035041663089845e181146101295780630f2c63ff1461018957806318b011de146101a45780633678c143146101cb578063455e6166146101ec5780635403af47146102015780635704a5fa1461021657806357bd24fb1461027e57806361bd8d66146102965780636ca640a1146102ab57806371a8c18a146102c0578063795ea18e146102ec5780637dbd28321461030457806390b6f6991461038d57806399b32f3a146103a2578063a6c07c96146103ba578063aa447e22146103d2578063ba16d600146103ea578063c1fab98b146103ff578063d035c403146104a4578063d1daeede146104b9578063e462a8f2146104e3578063eda1970b146104fb578063f1afcfa614610510575b600080fd5b34801561013557600080fd5b5060408051602060046044358181013583810280860185019096528085526101879583359560248035963696956064959394920192918291850190849080828437509497506105259650505050505050565b005b34801561019557600080fd5b5061018760043560243561060d565b3480156101b057600080fd5b506101b96106f3565b60408051918252519081900360200190f35b3480156101d757600080fd5b50610187600160a060020a03600435166106f9565b3480156101f857600080fd5b506101b961075f565b34801561020d57600080fd5b506101b961076b565b34801561022257600080fd5b5061022e600435610771565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561026a578181015183820152602001610252565b505050509050019250505060405180910390f35b34801561028a57600080fd5b506101b96004356107d5565b3480156102a257600080fd5b506101b96107ea565b3480156102b757600080fd5b506101b96107f1565b3480156102cc57600080fd5b506102d86004356107fd565b604080519115158252519081900360200190f35b3480156102f857600080fd5b506101b9600435610832565b34801561031057600080fd5b5061031c600435610921565b604080518a8152602081018a9052600160a060020a03808a169282019290925290871660608201526080810186905260a0810185905260c0810184905260e08101839052610100810182600881111561037157fe5b60ff168152602001995050505050505050505060405180910390f35b34801561039957600080fd5b506101b961097b565b3480156103ae57600080fd5b506102d8600435610982565b3480156103c657600080fd5b506101876004356109b4565b3480156103de57600080fd5b50610187600435610a2d565b3480156103f657600080fd5b506101b9610b0d565b34801561040b57600080fd5b506040805160206004602480358281013584810280870186019097528086526101879684359636966044959194909101929182918501908490808284375050604080516020888301358a018035601f8101839004830284018301909452838352979a89359a8a8301359a91999098506060909101965091945090810192508190840183828082843750949750610b199650505050505050565b3480156104b057600080fd5b506101b9610bf3565b3480156104c557600080fd5b506101b9600435600160a060020a0360243581169060443516610bfa565b3480156104ef57600080fd5b5061022e600435610dcd565b34801561050757600080fd5b506101b9610ef5565b34801561051c57600080fd5b506101b9610efb565b60008281526020819052604081206002015481908490600160a060020a0316331461054f57600080fd5b600085815260208190526040902092506105698385610f01565b9150811561059f576040805186815260208101849052815160008051602061291d833981519152929181900390910190a1610605565b60078301805460010190819055426004850155600584015560038301546040805188815260208101889052600160a060020a0390921682820152517fa35dfb6661c6bfda214c0a2820d9b4bd1a673e2c303cf1578b5948a6f63b5a669181900360600190a15b505050505050565b60008181526020819052604081206003015481908390600160a060020a0316331461063757600080fd5b60008481526020819052604090209250610650836110e1565b91508115610686576040805185815260208101849052815160008051602061291d833981519152929181900390910190a16106ec565b60078301805460010190819055426004850155600684015560028301546040805187815260208101879052600160a060020a0390921682820152517f0817bf136ff95abb2d41d10a9fa5ff6652ff71c13e1b46717fae65db16423c9b9181900360600190a15b5050505050565b60025481565b6003546101009004600160a060020a031615801561071f5750600160a060020a03811615155b151561072a57600080fd5b60038054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b670de0b6b3a76484d081565b619c4081565b600081815260208181526040918290206008018054835181840281018401909452808452606093928301828280156107c957602002820191906000526020600020905b815481526001909101906020018083116107b4575b50505050509050919050565b60009081526020819052604090206001015490565b6206b6c081565b670de0b6b3a76ab6c081565b600081815260208190526040812060058101546006820154118015610829575060025481600401540142115b91505b50919050565b60008181526020819052604081206008600b82015460ff16600881111561085557fe5b148061087a57508060050154816006015411801561087a575060025481600401540142115b156108a957600281015460018201546108a0918591600160a060020a039091169061116f565b6000915061082c565b806006015481600501541180156108c7575060025481600401540142115b156108ed57600381015460018201546108a0918591600160a060020a03909116906111f8565b6040805184815261c36e6020820152815160008051602061291d833981519152929181900390910190a15061c36e92915050565b600060208190529081526040902080546001820154600283015460038401546004850154600586015460068701546007880154600b9098015496979596600160a060020a0395861696959094169492939192909160ff1689565b6205c49081565b600081815260208190526040812060068101546005820154118015610829575060025460049091015401421192915050565b6000818152602081905260408120906109cd8284611281565b905080600114156109fe57600382015460018301546109f9918591600160a060020a03909116906111f8565b610a28565b8060021415610a285760028201546001830154610a28918591600160a060020a039091169061116f565b505050565b60008181526020819052604081206003015481908390600160a060020a03163314610a5757600080fd5b60008481526020819052604090209250610a708361135e565b91508115610aa6576040805185815260208101849052815160008051602061291d833981519152929181900390910190a1610b07565b600783018054600101908190554260048501556006840155600283015460408051868152600160a060020a03909216602083015280517f1de6ec50cb1878c1fbd1d31236292b0b61842e5306019868eaff7e0c4492bd2f9281900390910190a15b50505050565b670de0b6b3a764000081565b60008581526020819052604081206002015481908790600160a060020a03163314610b4357600080fd5b600088815260208190526040812085519094501115610b9c57610b66838561144d565b91508115610b9c576040805189815260208101849052815160008051602061291d833981519152929181900390910190a1610be9565b610ba88387878a6115de565b91508115801590610bba575060018214155b15610be9576040805189815260208101849052815160008051602061291d833981519152929181900390910190a15b5050505050505050565b62035b6081565b600354600090819081906101009004600160a060020a0316338114610c1e57600080fd5b6040805160208082018a90523382840152825180830384018152606090920192839052815191929182918401908083835b60208310610c6e5780518252601f199092019160209182019101610c4f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209250600080846000191660001916815260200190815260200160002091508282600001816000191690555086826001018160001916905550858260020160006101000a815481600160a060020a030219169083600160a060020a03160217905550848260030160006101000a815481600160a060020a030219169083600160a060020a03160217905550428260040181905550600082600601819055506001826005018190555060018260070181905550600182600b0160006101000a81548160ff02191690836008811115610d6d57fe5b02179055506040805188815260208101859052600160a060020a03808916828401528716606082015290517f403956bdc140717d54d4573786b4e9e773ef2e6e325e2c061476eb47711770de9181900360800190a1509095945050505050565b6060600080825b600085815260208190526040902060090154831015610e39576000858152602081905260409020600901805484908110610e0a57fe5b600091825260209091206001600290920201015460ff161515610e2e576001909101905b600190920191610dd4565b81604051908082528060200260200182016040528015610e63578160200160208202803883390190505b50905060009150600092505b600085815260208190526040902060090154831015610eed576000858152602081905260409020600901805484908110610ea557fe5b600091825260209091206001600290920201015460ff161515610ee257828183815181101515610ed157fe5b602090810290910101526001909101905b600190920191610e6f565b949350505050565b6184d081565b60015481565b600080600080610f143362035b60611729565b1515610f245761c38c93506110d8565b600886015415610f3357600080fd5b6002600b87015460ff166008811115610f4857fe5b14156110d257610f5b86600101546117cd565b505050505095505050509250846001865103815181101515610f7957fe5b602090810290910101518214610f935761c3e693506110d8565b6040517ff9b5d7c000000000000000000000000000000000000000000000000000000000815260206004820181815287516024840152875173__SyscoinMessageLibrary_________________9363f9b5d7c0938a9392839260440191808601910280838360005b83811015611013578181015183820152602001610ffb565b505050509050019250505060206040518083038186803b15801561103657600080fd5b505af415801561104a573d6000803e3d6000fd5b505050506040513d602081101561106057600080fd5b505183146110725761c37893506110d8565b61108486600101543362035b606118fe565b90508015611094578093506110d8565b84516110a990600888019060208801906127da565b5084516110b96009880182612827565b50600b8601805460ff19166003179055600093506110d8565b61c36493505b50505092915050565b6000806110f1336205c490611729565b15156111015761c38c915061082c565b6001600b84015460ff16600881111561111657fe5b141561116557600b8301805460ff19166002179055600383015433600160a060020a039091161461114357fe5b6111558360010154336205c4906118fe565b905080156108a05780915061082c565b5061c36492915050565b6000838152602081905260409020600381015460028201546111a19186918591600160a060020a0390811691166119af565b6111aa84611a46565b6040805183815260208101869052600160a060020a0385168183015290517faab6a8f22c7ab5131c1cdc1c0000e123efd38efadfef092cef78be507d16542e9181900360600190a150505050565b60008381526020819052604090206002810154600382015461122a9186918591600160a060020a0390811691166119af565b61123384611a46565b6040805183815260208101869052600160a060020a0385168183015290517fda9b5fdafb0f67d811425d3f095917a63329d60d3db3aa456b5247a8f3b88b119181900360600190a150505050565b6000806006600b85015460ff16600881111561129957fe5b141561132e576112a884611ad2565b905080156112e2576040805184815260208101839052815160008051602061291d833981519152929181900390910190a160029150611357565b6112eb84611c58565b90508015611325576040805184815260208101839052815160008051602061291d833981519152929181900390910190a160029150611357565b60019150611357565b6008600b85015460ff16600881111561134357fe5b14156113525760029150611357565b600091505b5092915050565b600080600061136f33619c40611729565b151561137f5761c38c9250611446565b6003600b85015460ff16600881111561139457fe5b14156114405760018401546000908152600a850160205260408120925060018301546c01000000000000000000000000900460ff1660028111156113d457fe5b146113de57600080fd5b6113ef846001015433619c406118fe565b905080156113ff57809250611446565b6001820180546c010000000000000000000000006cff00000000000000000000000019909116179055600b8401805460ff1916600417905560009250611446565b61c36492505b5050919050565b60008060008061145f33619c40611729565b151561146f5761c38c93506110d8565b6004600b87015460ff16600881111561148457fe5b14156110d2576114978560006050611d8d565b600887018054919450849160001981019081106114b057fe5b600091825260209091200154146114cb5761c3e693506110d8565b6114d9866001015486611e46565b15156114e95761c37393506110d8565b60018601546000908152600a8701602052604090209150600260018301546c01000000000000000000000000900460ff16600281111561152557fe5b141561153457600093506110d8565b61153f828487611ea8565b9050801561154f578093506110d8565b611560866001015433619c406118fe565b90508015611570578093506110d8565b600182810180546cff00000000000000000000000019166c02000000000000000000000000179055860154604080519182526020820185905280517ff09fb097b6b0e6b8bf9e7bbc57886fd27db5698fb049f341655032728facfd149281900390910190a1600093506110d8565b600080600080600060608787518115156115f457fe5b04945060008a600901805490501193508892505b8789018310156116af57848984030291506116298260018703840189612023565b8051909150851461163657fe5b808a6009018481548110151561164857fe5b9060005260206000209060020201600001908051906020019061166c929190612853565b5060018a6009018481548110151561168057fe5b600091825260209091206002909102016001908101805460ff1916921515929092179091559290920191611608565b600092505b60098a01548310156117015760098a018054849081106116d057fe5b600091825260209091206001600290920201015460ff1615156116f65760009350611701565b6001909201916116b4565b8315611717576117108a6120ab565b955061171c565b600195505b5050505050949350505050565b600354604080517fe1254fba000000000000000000000000000000000000000000000000000000008152600160a060020a03858116600483015291516000938593610100909104169163e1254fba91602480830192602092919082900301818887803b15801561179857600080fd5b505af11580156117ac573d6000803e3d6000fd5b505050506040513d60208110156117c257600080fd5b505110159392505050565b60048054604080517f6e5b707100000000000000000000000000000000000000000000000000000000815292830184905251600092839283928392839283928392839283928392600160a060020a0390921691636e5b70719160248083019261014092919082900301818787803b15801561184757600080fd5b505af115801561185b573d6000803e3d6000fd5b505050506040513d61014081101561187257600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505099509950995099509950995099509950995099509193959799509193959799565b600354604080517fc2569e5a00000000000000000000000000000000000000000000000000000000815260048101869052600160a060020a03858116602483015260448201859052915160009361010090049092169163c2569e5a9160648082019260209290919082900301818787803b15801561197b57600080fd5b505af115801561198f573d6000803e3d6000fd5b505050506040513d60208110156119a557600080fd5b5051949350505050565b600354604080517f748a00e20000000000000000000000000000000000000000000000000000000081526004810187905260248101869052600160a060020a038581166044830152848116606483015291516101009093049091169163748a00e29160848082019260009290919082900301818387803b158015611a3257600080fd5b505af1158015610be9573d6000803e3d6000fd5b60008181526020819052604081208181556001810182905560028101805473ffffffffffffffffffffffffffffffffffffffff1990811690915560038201805490911690556004810182905560058101829055600681018290556007810182905590611ab5600883018261288e565b611ac36009830160006128af565b50600b01805460ff1916905550565b60008060008060008060008060008960080180549050111515611af95761c3e69750611c4c565b611b0689600101546117cd565b909192939495969798509091929394959697509091929394955090919293509091509050508097508196508299505050508860080160018a6008018054905003815481101515611b5257fe5b600091825260208083209091015460018c01548352600a8c01909152604090912060088b0154919450925060021015611bba576008890180546001198101908110611b9957fe5b60009182526020909120015482549091508114611bba5761c40e9750611c4c565b828414611bcb5761c3e69750611c4c565b600182015467ffffffffffffffff168714611bea5761c3739750611c4c565b600260018301546c01000000000000000000000000900460ff166002811115611c0f57fe5b14611c1e5761c3f09750611c4c565b611c27856117cd565b50959d505050508b8b11159450611c4793505050505761c3739750611c4c565b600097505b50505050505050919050565b6000806000806000806000806000611c738a600101546117cd565b9091929394959697985090919293949596509091929394509091509050809950819b50829750839850849c505050505050600088111515611cb85761c3c89850611d80565b600063ffffffff841611611cd05761c3d29850611d80565b60008411611ce25761c4189850611d80565b611ceb876117cd565b90919293949596979850909192939495965090919293949550909192939450909192935090919250909150905080975081935050508960080180549050860163ffffffff168563ffffffff16141515611d4c578463ffffffff169850611d80565b818811611d5d5761c4049850611d80565b611d6b8a87848b888861225f565b90508015611d7b57809850611d80565b600098505b5050505050505050919050565b6000610eed6002611d9f868686612508565b6040805160208082019390935281518082038401815290820191829052805190928291908401908083835b60208310611de95780518252601f199092019160209182019101611dca565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015611e2a573d6000803e3d6000fd5b5050506040513d6020811015611e3f57600080fd5b505161252f565b6000806000611e548461255a565b63ffffffff169150611e65856117cd565b50959850505050858711801595509350611e9f9250505057506001805482811515611e8c57fe5b040360015483811515611e9b57fe5b0410155b95945050505050565b60008073__SyscoinMessageLibrary_________________6376837a1384600087600190046040518463ffffffff1660e060020a0281526004018080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015611f28578181015183820152602001611f10565b50505050905090810190601f168015611f555780820380516001836020036101000a031916815260200191505b5094505050505060206040518083038186803b158015611f7457600080fd5b505af4158015611f88573d6000803e3d6000fd5b505050506040513d6020811015611f9e57600080fd5b505190508015611fb05780915061201b565b611fb98361255a565b60018601805467ffffffffffffffff191663ffffffff92909216919091179055611fe28361256d565b8560010160086101000a81548163ffffffff021916908363ffffffff16021790555061200d8361257a565b855560028501849055600091505b509392505050565b6060806000858503600101604051908082528060200260200182016040528015612057578160200160208202803883390190505b509150600090505b85850381116120a2578386820181518110151561207857fe5b90602001906020020151828281518110151561209057fe5b6020908102909101015260010161205f565b50949350505050565b60008060006120bd84600101546117cd565b50505060088b015460098c01549798509690961495506120df94505050505057fe5b6008840154600110156121b157600091505b60088401548210156121ac576008840180548291612192918590811061211357fe5b90600052602060002001546001900484876009018681548110151561213457fe5b6000918252602091829020600290910201805460408051828502810185019091528181529283018282801561218857602002820191906000526020600020905b815481526020019060010190808311612174575b505050505061258b565b146121a157614e529250611446565b6001909101906120f1565b6121de565b60088401805460009081106121c257fe5b60009182526020909120015481146121de57614e529250611446565b600b8401805460ff191660061790556007840180546001908101918290554260048701556005860191909155840154600385015460408051928352600160a060020a03909116602083015280517fccc5933d082c4ab89700e29da032d358526b9b17a38fc7257b0a81627eb251929281900390910190a15060009392505050565b60018601546000908152600a87016020526040812081905b600889015463ffffffff831610156124c757600260035460ff16600281111561229c57fe5b1461240b5773__SyscoinMessageLibrary_________________63f28843856040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156122e857600080fd5b505af41580156122fc573d6000803e3d6000fd5b505050506040513d602081101561231257600080fd5b505160070b63ffffffff60018a8501011681151561232c57fe5b0760070b151561240b57604080517fb199c898000000000000000000000000000000000000000000000000000000008152600787810b900b600482015263ffffffff86166024820152905173__SyscoinMessageLibrary_________________9163b199c898916044808301926020929190829003018186803b1580156123b257600080fd5b505af41580156123c6573d6000803e3d6000fd5b505050506040513d60208110156123dc57600080fd5b5051600182015490945063ffffffff80861668010000000000000000909204161461240b5761c3d292506124fc565b60008463ffffffff1611156124bc57604080517f304ef8ac00000000000000000000000000000000000000000000000000000000815263ffffffff86166004820152905173__SyscoinMessageLibrary_________________9163304ef8ac916024808301926020929190829003018186803b15801561248a57600080fd5b505af415801561249e573d6000803e3d6000fd5b505050506040513d60208110156124b457600080fd5b505196909601955b600182019150612277565b600260035460ff1660028111156124da57fe5b141580156124e85750858714155b156124f75761c3c892506124fc565b600092505b50509695505050505050565b60006040516020818486602089010160025afa151561252657600080fd5b51949350505050565b600060405160005b6020811015612552578381601f031a81830153600101612537565b505192915050565b6000612567826044612608565b92915050565b6000612567826048612608565b60248101516000906108298161252f565b60008381808080805b87518510156125fa5787858151811015156125ab57fe5b60209081029091010151935060028906925082600114156125d05750829050846125dd565b8215156125dd5750849050825b6125e782826126c3565b9550600289049850600185019450612594565b509398975050505050505050565b6000828260030181518110151561261b57fe5b90602001015160f860020a900460f860020a0260f860020a9004630100000002838360020181518110151561264c57fe5b90602001015160f860020a900460f860020a0260f860020a90046201000002848460010181518110151561267c57fe5b90602001015160f860020a900460f860020a0260f860020a90046101000285858151811015156126a857fe5b016020015160f860020a908190048102040101019392505050565b60006127d36002806126d48661252f565b6126dd8661252f565b60405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083106127325780518252601f199092019160209182019101612713565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015612773573d6000803e3d6000fd5b5050506040513d602081101561278857600080fd5b505160408051602081810193909352815180820384018152908201918290528051909282919084019080838360208310611de95780518252601f199092019160209182019101611dca565b9392505050565b828054828255906000526020600020908101928215612817579160200282015b8281111561281757825182556020909201916001909101906127fa565b506128239291506128d0565b5090565b815481835581811115610a2857600202816002028360005260206000209182019101610a2891906128ed565b828054828255906000526020600020908101928215612817579160200282015b82811115612817578251825591602001919060010190612873565b50805460008255906000526020600020908101906128ac91906128d0565b50565b50805460008255600202906000526020600020908101906128ac91906128ed565b6128ea91905b8082111561282357600081556001016128d6565b90565b6128ea91905b80821115612823576000612907828261288e565b5060018101805460ff191690556002016128f3560080235326defb5d335564dd77860b0a010e19446427d3d78d155cabd064ca9c2aa165627a7a72305820d1139fecaf3672003f34c4854fc14608fbe957dde7813511b933a1db328ed01f0029";

    public static final String FUNC_SUPERBLOCKTIMEOUT = "superblockTimeout";

    public static final String FUNC_MINPROPOSALDEPOSIT = "minProposalDeposit";

    public static final String FUNC_RESPONDBLOCKHEADERPROOFCOST = "respondBlockHeaderProofCost";

    public static final String FUNC_SUPERBLOCKCOST = "superblockCost";

    public static final String FUNC_MINCHALLENGEDEPOSIT = "minChallengeDeposit";

    public static final String FUNC_SESSIONS = "sessions";

    public static final String FUNC_RESPONDMERKLEROOTHASHESCOST = "respondMerkleRootHashesCost";

    public static final String FUNC_MINREWARD = "minReward";

    public static final String FUNC_VERIFYSUPERBLOCKCOST = "verifySuperblockCost";

    public static final String FUNC_CHALLENGECOST = "challengeCost";

    public static final String FUNC_SUPERBLOCKDURATION = "superblockDuration";

    public static final String FUNC_SETSYSCOINCLAIMMANAGER = "setSyscoinClaimManager";

    public static final String FUNC_BEGINBATTLESESSION = "beginBattleSession";

    public static final String FUNC_QUERYMERKLEROOTHASHES = "queryMerkleRootHashes";

    public static final String FUNC_RESPONDMERKLEROOTHASHES = "respondMerkleRootHashes";

    public static final String FUNC_QUERYBLOCKHEADERPROOF = "queryBlockHeaderProof";

    public static final String FUNC_RESPONDBLOCKHEADERPROOF = "respondBlockHeaderProof";

    public static final String FUNC_VERIFYSUPERBLOCK = "verifySuperblock";

    public static final String FUNC_TIMEOUT = "timeout";

    public static final String FUNC_GETCHALLENGERHITTIMEOUT = "getChallengerHitTimeout";

    public static final String FUNC_GETSUBMITTERHITTIMEOUT = "getSubmitterHitTimeout";

    public static final String FUNC_GETSYSCOINBLOCKHASHES = "getSyscoinBlockHashes";

    public static final String FUNC_GETSUPERBLOCKBYSESSION = "getSuperblockBySession";

    public static final String FUNC_GETMISSINGBLOCKSIBLINGS = "getMissingBlockSiblings";

    public static final Event NEWBATTLE_EVENT = new Event("NewBattle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event CHALLENGERCONVICTED_EVENT = new Event("ChallengerConvicted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUBMITTERCONVICTED_EVENT = new Event("SubmitterConvicted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event QUERYMERKLEROOTHASHES_EVENT = new Event("QueryMerkleRootHashes", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event RESPONDMERKLEROOTHASHES_EVENT = new Event("RespondMerkleRootHashes", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event QUERYBLOCKHEADERPROOF_EVENT = new Event("QueryBlockHeaderProof", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event RESPONDBLOCKHEADERPROOF_EVENT = new Event("RespondBlockHeaderProof", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event RESPONDLASTBLOCKHEADER_EVENT = new Event("RespondLastBlockHeader", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event ERRORBATTLE_EVENT = new Event("ErrorBattle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("4", "0xB8c5b18c548aa1536Cfa13CEC3BC3d3bbC2150Dd");
    }

    @Deprecated
    protected SyscoinBattleManager(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SyscoinBattleManager(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SyscoinBattleManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SyscoinBattleManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Uint256> superblockTimeout() {
        final Function function = new Function(FUNC_SUPERBLOCKTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minProposalDeposit() {
        final Function function = new Function(FUNC_MINPROPOSALDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> respondBlockHeaderProofCost() {
        final Function function = new Function(FUNC_RESPONDBLOCKHEADERPROOFCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> superblockCost() {
        final Function function = new Function(FUNC_SUPERBLOCKCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minChallengeDeposit() {
        final Function function = new Function(FUNC_MINCHALLENGEDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple9<Bytes32, Bytes32, Address, Address, Uint256, Uint256, Uint256, Uint256, Uint8>> sessions(Bytes32 param0) {
        final Function function = new Function(FUNC_SESSIONS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
        return new RemoteCall<Tuple9<Bytes32, Bytes32, Address, Address, Uint256, Uint256, Uint256, Uint256, Uint8>>(
                new Callable<Tuple9<Bytes32, Bytes32, Address, Address, Uint256, Uint256, Uint256, Uint256, Uint8>>() {
                    @Override
                    public Tuple9<Bytes32, Bytes32, Address, Address, Uint256, Uint256, Uint256, Uint256, Uint8> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple9<Bytes32, Bytes32, Address, Address, Uint256, Uint256, Uint256, Uint256, Uint8>(
                                (Bytes32) results.get(0), 
                                (Bytes32) results.get(1), 
                                (Address) results.get(2), 
                                (Address) results.get(3), 
                                (Uint256) results.get(4), 
                                (Uint256) results.get(5), 
                                (Uint256) results.get(6), 
                                (Uint256) results.get(7), 
                                (Uint8) results.get(8));
                    }
                });
    }

    public RemoteCall<Uint256> respondMerkleRootHashesCost() {
        final Function function = new Function(FUNC_RESPONDMERKLEROOTHASHESCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minReward() {
        final Function function = new Function(FUNC_MINREWARD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> verifySuperblockCost() {
        final Function function = new Function(FUNC_VERIFYSUPERBLOCKCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> challengeCost() {
        final Function function = new Function(FUNC_CHALLENGECOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> superblockDuration() {
        final Function function = new Function(FUNC_SUPERBLOCKDURATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public List<NewBattleEventResponse> getNewBattleEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWBATTLE_EVENT, transactionReceipt);
        ArrayList<NewBattleEventResponse> responses = new ArrayList<NewBattleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewBattleEventResponse typedResponse = new NewBattleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(2);
            typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(3);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewBattleEventResponse> newBattleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewBattleEventResponse>() {
            @Override
            public NewBattleEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWBATTLE_EVENT, log);
                NewBattleEventResponse typedResponse = new NewBattleEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(2);
                typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(3);
                return typedResponse;
            }
        });
    }

    public Flowable<NewBattleEventResponse> newBattleEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWBATTLE_EVENT));
        return newBattleEventFlowable(filter);
    }

    public List<ChallengerConvictedEventResponse> getChallengerConvictedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHALLENGERCONVICTED_EVENT, transactionReceipt);
        ArrayList<ChallengerConvictedEventResponse> responses = new ArrayList<ChallengerConvictedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChallengerConvictedEventResponse typedResponse = new ChallengerConvictedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ChallengerConvictedEventResponse> challengerConvictedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ChallengerConvictedEventResponse>() {
            @Override
            public ChallengerConvictedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHALLENGERCONVICTED_EVENT, log);
                ChallengerConvictedEventResponse typedResponse = new ChallengerConvictedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<ChallengerConvictedEventResponse> challengerConvictedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHALLENGERCONVICTED_EVENT));
        return challengerConvictedEventFlowable(filter);
    }

    public List<SubmitterConvictedEventResponse> getSubmitterConvictedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUBMITTERCONVICTED_EVENT, transactionReceipt);
        ArrayList<SubmitterConvictedEventResponse> responses = new ArrayList<SubmitterConvictedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SubmitterConvictedEventResponse typedResponse = new SubmitterConvictedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SubmitterConvictedEventResponse> submitterConvictedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SubmitterConvictedEventResponse>() {
            @Override
            public SubmitterConvictedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUBMITTERCONVICTED_EVENT, log);
                SubmitterConvictedEventResponse typedResponse = new SubmitterConvictedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<SubmitterConvictedEventResponse> submitterConvictedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUBMITTERCONVICTED_EVENT));
        return submitterConvictedEventFlowable(filter);
    }

    public List<QueryMerkleRootHashesEventResponse> getQueryMerkleRootHashesEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(QUERYMERKLEROOTHASHES_EVENT, transactionReceipt);
        ArrayList<QueryMerkleRootHashesEventResponse> responses = new ArrayList<QueryMerkleRootHashesEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            QueryMerkleRootHashesEventResponse typedResponse = new QueryMerkleRootHashesEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<QueryMerkleRootHashesEventResponse> queryMerkleRootHashesEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, QueryMerkleRootHashesEventResponse>() {
            @Override
            public QueryMerkleRootHashesEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(QUERYMERKLEROOTHASHES_EVENT, log);
                QueryMerkleRootHashesEventResponse typedResponse = new QueryMerkleRootHashesEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<QueryMerkleRootHashesEventResponse> queryMerkleRootHashesEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(QUERYMERKLEROOTHASHES_EVENT));
        return queryMerkleRootHashesEventFlowable(filter);
    }

    public List<RespondMerkleRootHashesEventResponse> getRespondMerkleRootHashesEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RESPONDMERKLEROOTHASHES_EVENT, transactionReceipt);
        ArrayList<RespondMerkleRootHashesEventResponse> responses = new ArrayList<RespondMerkleRootHashesEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RespondMerkleRootHashesEventResponse typedResponse = new RespondMerkleRootHashesEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RespondMerkleRootHashesEventResponse> respondMerkleRootHashesEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RespondMerkleRootHashesEventResponse>() {
            @Override
            public RespondMerkleRootHashesEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RESPONDMERKLEROOTHASHES_EVENT, log);
                RespondMerkleRootHashesEventResponse typedResponse = new RespondMerkleRootHashesEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<RespondMerkleRootHashesEventResponse> respondMerkleRootHashesEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RESPONDMERKLEROOTHASHES_EVENT));
        return respondMerkleRootHashesEventFlowable(filter);
    }

    public List<QueryBlockHeaderProofEventResponse> getQueryBlockHeaderProofEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(QUERYBLOCKHEADERPROOF_EVENT, transactionReceipt);
        ArrayList<QueryBlockHeaderProofEventResponse> responses = new ArrayList<QueryBlockHeaderProofEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            QueryBlockHeaderProofEventResponse typedResponse = new QueryBlockHeaderProofEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<QueryBlockHeaderProofEventResponse> queryBlockHeaderProofEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, QueryBlockHeaderProofEventResponse>() {
            @Override
            public QueryBlockHeaderProofEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(QUERYBLOCKHEADERPROOF_EVENT, log);
                QueryBlockHeaderProofEventResponse typedResponse = new QueryBlockHeaderProofEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<QueryBlockHeaderProofEventResponse> queryBlockHeaderProofEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(QUERYBLOCKHEADERPROOF_EVENT));
        return queryBlockHeaderProofEventFlowable(filter);
    }

    public List<RespondBlockHeaderProofEventResponse> getRespondBlockHeaderProofEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RESPONDBLOCKHEADERPROOF_EVENT, transactionReceipt);
        ArrayList<RespondBlockHeaderProofEventResponse> responses = new ArrayList<RespondBlockHeaderProofEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RespondBlockHeaderProofEventResponse typedResponse = new RespondBlockHeaderProofEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RespondBlockHeaderProofEventResponse> respondBlockHeaderProofEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RespondBlockHeaderProofEventResponse>() {
            @Override
            public RespondBlockHeaderProofEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RESPONDBLOCKHEADERPROOF_EVENT, log);
                RespondBlockHeaderProofEventResponse typedResponse = new RespondBlockHeaderProofEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<RespondBlockHeaderProofEventResponse> respondBlockHeaderProofEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RESPONDBLOCKHEADERPROOF_EVENT));
        return respondBlockHeaderProofEventFlowable(filter);
    }

    public List<RespondLastBlockHeaderEventResponse> getRespondLastBlockHeaderEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RESPONDLASTBLOCKHEADER_EVENT, transactionReceipt);
        ArrayList<RespondLastBlockHeaderEventResponse> responses = new ArrayList<RespondLastBlockHeaderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RespondLastBlockHeaderEventResponse typedResponse = new RespondLastBlockHeaderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.blockSha256Hash = (Bytes32) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RespondLastBlockHeaderEventResponse> respondLastBlockHeaderEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RespondLastBlockHeaderEventResponse>() {
            @Override
            public RespondLastBlockHeaderEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RESPONDLASTBLOCKHEADER_EVENT, log);
                RespondLastBlockHeaderEventResponse typedResponse = new RespondLastBlockHeaderEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.blockSha256Hash = (Bytes32) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<RespondLastBlockHeaderEventResponse> respondLastBlockHeaderEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RESPONDLASTBLOCKHEADER_EVENT));
        return respondLastBlockHeaderEventFlowable(filter);
    }

    public List<ErrorBattleEventResponse> getErrorBattleEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ERRORBATTLE_EVENT, transactionReceipt);
        ArrayList<ErrorBattleEventResponse> responses = new ArrayList<ErrorBattleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorBattleEventResponse typedResponse = new ErrorBattleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ErrorBattleEventResponse> errorBattleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ErrorBattleEventResponse>() {
            @Override
            public ErrorBattleEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ERRORBATTLE_EVENT, log);
                ErrorBattleEventResponse typedResponse = new ErrorBattleEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ErrorBattleEventResponse> errorBattleEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ERRORBATTLE_EVENT));
        return errorBattleEventFlowable(filter);
    }

    public RemoteCall<TransactionReceipt> setSyscoinClaimManager(Address _syscoinClaimManager) {
        final Function function = new Function(
                FUNC_SETSYSCOINCLAIMMANAGER, 
                Arrays.<Type>asList(_syscoinClaimManager), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> beginBattleSession(Bytes32 superblockHash, Address submitter, Address challenger) {
        final Function function = new Function(
                FUNC_BEGINBATTLESESSION, 
                Arrays.<Type>asList(superblockHash, submitter, challenger), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> queryMerkleRootHashes(Bytes32 superblockHash, Bytes32 sessionId) {
        final Function function = new Function(
                FUNC_QUERYMERKLEROOTHASHES, 
                Arrays.<Type>asList(superblockHash, sessionId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> respondMerkleRootHashes(Bytes32 superblockHash, Bytes32 sessionId, DynamicArray<Bytes32> blockHashes) {
        final Function function = new Function(
                FUNC_RESPONDMERKLEROOTHASHES, 
                Arrays.<Type>asList(superblockHash, sessionId, blockHashes), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> queryBlockHeaderProof(Bytes32 sessionId) {
        final Function function = new Function(
                FUNC_QUERYBLOCKHEADERPROOF, 
                Arrays.<Type>asList(sessionId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> respondBlockHeaderProof(Bytes32 sessionId, DynamicArray<Uint256> _siblingsMap, Uint256 startingIndex, Uint256 count, DynamicBytes blockHeader) {
        final Function function = new Function(
                FUNC_RESPONDBLOCKHEADERPROOF, 
                Arrays.<Type>asList(sessionId, _siblingsMap, startingIndex, count, blockHeader), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> verifySuperblock(Bytes32 sessionId) {
        final Function function = new Function(
                FUNC_VERIFYSUPERBLOCK, 
                Arrays.<Type>asList(sessionId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> timeout(Bytes32 sessionId) {
        final Function function = new Function(
                FUNC_TIMEOUT, 
                Arrays.<Type>asList(sessionId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Bool> getChallengerHitTimeout(Bytes32 sessionId) {
        final Function function = new Function(FUNC_GETCHALLENGERHITTIMEOUT, 
                Arrays.<Type>asList(sessionId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> getSubmitterHitTimeout(Bytes32 sessionId) {
        final Function function = new Function(FUNC_GETSUBMITTERHITTIMEOUT, 
                Arrays.<Type>asList(sessionId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Bytes32>> getSyscoinBlockHashes(Bytes32 sessionId) {
        final Function function = new Function(FUNC_GETSYSCOINBLOCKHASHES, 
                Arrays.<Type>asList(sessionId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSuperblockBySession(Bytes32 sessionId) {
        final Function function = new Function(FUNC_GETSUPERBLOCKBYSESSION, 
                Arrays.<Type>asList(sessionId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Uint256>> getMissingBlockSiblings(Bytes32 sessionId) {
        final Function function = new Function(FUNC_GETMISSINGBLOCKSIBLINGS, 
                Arrays.<Type>asList(sessionId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    @Deprecated
    public static SyscoinBattleManager load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SyscoinBattleManager(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SyscoinBattleManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SyscoinBattleManager(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SyscoinBattleManager load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SyscoinBattleManager(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SyscoinBattleManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SyscoinBattleManager(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SyscoinBattleManager> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, Uint8 _network, Address _superblocks, Uint256 _superblockDuration, Uint256 _superblockTimeout) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_network, _superblocks, _superblockDuration, _superblockTimeout));
        return deployRemoteCall(SyscoinBattleManager.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<SyscoinBattleManager> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, Uint8 _network, Address _superblocks, Uint256 _superblockDuration, Uint256 _superblockTimeout) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_network, _superblocks, _superblockDuration, _superblockTimeout));
        return deployRemoteCall(SyscoinBattleManager.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SyscoinBattleManager> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, Uint8 _network, Address _superblocks, Uint256 _superblockDuration, Uint256 _superblockTimeout) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_network, _superblocks, _superblockDuration, _superblockTimeout));
        return deployRemoteCall(SyscoinBattleManager.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SyscoinBattleManager> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, Uint8 _network, Address _superblocks, Uint256 _superblockDuration, Uint256 _superblockTimeout) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_network, _superblocks, _superblockDuration, _superblockTimeout));
        return deployRemoteCall(SyscoinBattleManager.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class NewBattleEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Bytes32 sessionId;

        public Address submitter;

        public Address challenger;
    }

    public static class ChallengerConvictedEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Bytes32 sessionId;

        public Address challenger;
    }

    public static class SubmitterConvictedEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Bytes32 sessionId;

        public Address submitter;
    }

    public static class QueryMerkleRootHashesEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Bytes32 sessionId;

        public Address submitter;
    }

    public static class RespondMerkleRootHashesEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Bytes32 sessionId;

        public Address challenger;
    }

    public static class QueryBlockHeaderProofEventResponse {
        public Log log;

        public Bytes32 sessionId;

        public Address submitter;
    }

    public static class RespondBlockHeaderProofEventResponse {
        public Log log;

        public Bytes32 sessionId;

        public Address challenger;
    }

    public static class RespondLastBlockHeaderEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Bytes32 blockSha256Hash;
    }

    public static class ErrorBattleEventResponse {
        public Log log;

        public Bytes32 sessionId;

        public Uint256 err;
    }
}
