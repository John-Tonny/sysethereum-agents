package org.sysethereum.agents.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.3.0.
 */
public class SyscoinClaimManager extends Contract {
    private static final String BINARY = "0x608060405234801561001057600080fd5b50604051613b10380380613b10833981810160405260c081101561003357600080fd5b508051602082015160408301516060840151608085015160a090950151600280546001600160a01b039687166001600160a01b0319918216179091556003805496909516951694909417909255600655600755600491909155600555613a728061009e6000396000f3fe6080604052600436106102255760003560e01c806361bd8d6611610123578063bf0e1edb116100ab578063dac1d7641161006f578063dac1d76414610782578063e1254fba146107ac578063eda1970b146107df578063eff0f592146107f4578063fc7e286d1461086d57610225565b8063bf0e1edb146106b0578063c2569e5a146106da578063c3d3290f14610719578063c44205e314610743578063d035c4031461076d57610225565b806390b6f699116100f257806390b6f6991461060e5780639c57588f146106235780639e84477d1461065c578063a8b4633f14610671578063ba16d6001461069b57610225565b806361bd8d66146105865780636ca640a11461059b578063748a00e2146105b057806390a14aea146105f957610225565b8063329af83f116101b157806343207e631161017557806343207e63146104de578063455e61661461050857806355e4286b1461051d57806357872488146105475780635bf7d5db1461055c57610225565b8063329af83f146103f657806333289a461461042757806333337b83146104515780633352f1a4146104ac57806340732c89146104d657610225565b806313be4f9e116101f857806313be4f9e146103425780631797e5e91461036c57806318b011de1461039357806327b425a6146103a857806329118a9b146103bd57610225565b8063032e558714610230578063040aa57a146102aa5780630ac0d9c9146102ee5780630d5f5d6914610318575b61022d6108a0565b50005b34801561023c57600080fd5b5061025a6004803603602081101561025357600080fd5b50356108c1565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561029657818101518382015260200161027e565b505050509050019250505060405180910390f35b3480156102b657600080fd5b506102da600480360360408110156102cd57600080fd5b5080359060200135610934565b604080519115158252519081900360200190f35b3480156102fa57600080fd5b506102da6004803603602081101561031157600080fd5b503561115f565b34801561032457600080fd5b506102da6004803603602081101561033b57600080fd5b5035611244565b34801561034e57600080fd5b506102da6004803603602081101561036557600080fd5b503561125c565b34801561037857600080fd5b506103816117a6565b60408051918252519081900360200190f35b34801561039f57600080fd5b506103816117ac565b3480156103b457600080fd5b506103816117b2565b3480156103c957600080fd5b50610381600480360360408110156103e057600080fd5b50803590602001356001600160a01b03166117b8565b34801561040257600080fd5b5061040b6118cb565b604080516001600160a01b039092168252519081900360200190f35b34801561043357600080fd5b506103816004803603602081101561044a57600080fd5b50356118da565b34801561045d57600080fd5b50610493600480360360a081101561047457600080fd5b50803590602081013590604081013590606081013590608001356119a5565b6040805192835260208301919091528051918290030190f35b3480156104b857600080fd5b506102da600480360360208110156104cf57600080fd5b5035611f3c565b6103816108a0565b3480156104ea57600080fd5b506103816004803603602081101561050157600080fd5b5035612512565b34801561051457600080fd5b5061038161252f565b34801561052957600080fd5b506104936004803603602081101561054057600080fd5b503561253b565b34801561055357600080fd5b50610381612974565b34801561056857600080fd5b5061040b6004803603602081101561057f57600080fd5b503561297a565b34801561059257600080fd5b50610381612999565b3480156105a757600080fd5b506103816129a0565b3480156105bc57600080fd5b506105f7600480360360808110156105d357600080fd5b508035906020810135906001600160a01b03604082013581169160600135166129ac565b005b34801561060557600080fd5b5061040b612b69565b34801561061a57600080fd5b50610381612b78565b34801561062f57600080fd5b506103816004803603604081101561064657600080fd5b50803590602001356001600160a01b0316612b7f565b34801561066857600080fd5b50610381612bab565b34801561067d57600080fd5b506102da6004803603602081101561069457600080fd5b5035612bb1565b3480156106a757600080fd5b50610381612c96565b3480156106bc57600080fd5b50610381600480360360208110156106d357600080fd5b5035612ca2565b3480156106e657600080fd5b50610381600480360360608110156106fd57600080fd5b508035906001600160a01b036020820135169060400135612cb7565b34801561072557600080fd5b506103816004803603602081101561073c57600080fd5b5035612ec2565b34801561074f57600080fd5b506102da6004803603602081101561076657600080fd5b5035612ed7565b34801561077957600080fd5b50610381612ef4565b34801561078e57600080fd5b506102da600480360360208110156107a557600080fd5b5035612efb565b3480156107b857600080fd5b50610381600480360360208110156107cf57600080fd5b50356001600160a01b0316612f19565b3480156107eb57600080fd5b50610381612f34565b34801561080057600080fd5b5061081e6004803603602081101561081757600080fd5b5035612f3a565b604080519889526001600160a01b0390971660208901528787019590955260608701939093526080860191909152151560a0850152151560c0840152151560e083015251908190036101000190f35b34801561087957600080fd5b506103816004803603602081101561089057600080fd5b50356001600160a01b0316612f90565b60006108ac3334612fa2565b50336000908152602081905260409020545b90565b600081815260016020908152604091829020600381018054845181850281018501909552808552606094929383018282801561092657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610908575b50505050509150505b919050565b6000818152600160208190526040822082919084905b868214610bd75760408051610120810182528254815260018301546001600160a01b0316602080830191909152600284015482840152600384018054845181840281018401909552808552610a2d94869360608601939192908301828280156109dc57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109be575b5050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613025565b610a68576040805188815261c3a0602082015281516000805160206139fd833981519152929181900390910190a16000945050505050611159565b600254604080516365702c0f60e11b81526004810185905290516003926001600160a01b03169163cae0581e916024808301926020929190829003018186803b158015610ab457600080fd5b505afa158015610ac8573d6000803e3d6000fd5b505050506040513d6020811015610ade57600080fd5b50516005811115610aeb57fe5b14610b27576040805188815261c364602082015281516000805160206139fd833981519152929181900390910190a16000945050505050611159565b828015610b375750600381015415155b15610b4157600092505b60025460408051632af00c6760e11b81526004810185905290516001600160a01b03909216916355e018ce91602480820192602092909190829003018186803b158015610b8d57600080fd5b505afa158015610ba1573d6000803e3d6000fd5b505050506040513d6020811015610bb757600080fd5b50516000818152600160208190526040909120950194909250905061094a565b600454841015610c18576040805188815261c3dc602082015281516000805160206139fd833981519152929181900390910190a16000945050505050611159565b600254604080516365702c0f60e11b81526004810185905290516003926001600160a01b03169163cae0581e916024808301926020929190829003018186803b158015610c6457600080fd5b505afa158015610c78573d6000803e3d6000fd5b505050506040513d6020811015610c8e57600080fd5b50516005811115610c9b57fe5b14610cd7576040805188815261c364602082015281516000805160206139fd833981519152929181900390910190a16000945050505050611159565b60025460408051632af00c6760e11b8152600481018a905290516000926001600160a01b0316916355e018ce916024808301926020929190829003018186803b158015610d2357600080fd5b505afa158015610d37573d6000803e3d6000fd5b505050506040513d6020811015610d4d57600080fd5b505190506004600254604080516365702c0f60e11b81526004810185905290516001600160a01b039092169163cae0581e91602480820192602092909190829003018186803b158015610d9f57600080fd5b505afa158015610db3573d6000803e3d6000fd5b505050506040513d6020811015610dc957600080fd5b50516005811115610dd657fe5b14610e13576040805189815261c364602082015281516000805160206139fd833981519152929181900390910190a1600095505050505050611159565b600254604080516395b45ee760e01b8152600481018b905233602482015290516000926001600160a01b0316916395b45ee791604480830192602092919082900301818787803b158015610e6657600080fd5b505af1158015610e7a573d6000803e3d6000fd5b505050506040513d6020811015610e9057600080fd5b505190508015610ed257604080518a81526020810183905281516000805160206139fd833981519152929181900390910190a160009650505050505050611159565b6001830154604080518b81526001600160a01b03909216602083015280517fd2d92ada663f6bc7872c4132f968080a631f3d0faa9310ba1c86d1c54e470b289281900390910190a1610f248984613037565b6001830154610f3d908a906001600160a01b03166130fe565b5050841561114e57606086604051908082528060200260200182016040528015610f71578160200160208202803883390190505b50899550905060005b8a86146110195785828281518110610f8e57fe5b60209081029190910181019190915260025460408051632af00c6760e11b8152600481018a905290516001600160a01b03909216926355e018ce92602480840193829003018186803b158015610fe357600080fd5b505afa158015610ff7573d6000803e3d6000fd5b505050506040513d602081101561100d57600080fd5b50519550600101610f7a565b801561114b5760018103905081818151811061103157fe5b602090810291909101810151600081815260018352604080822060025482516395b45ee760e01b8152600481018690523360248201529251949b509099506001600160a01b0316936395b45ee79360448084019492939192918390030190829087803b1580156110a057600080fd5b505af11580156110b4573d6000803e3d6000fd5b505050506040513d60208110156110ca57600080fd5b5051925082156110d957600080fd5b6001850154604080518881526001600160a01b03909216602083015280517fd2d92ada663f6bc7872c4132f968080a631f3d0faa9310ba1c86d1c54e470b289281900390910190a161112b8686613037565b60018501546111449087906001600160a01b03166130fe565b5050611019565b50505b600196505050505050505b92915050565b600081815260016020818152604080842081516101208101835281548152938101546001600160a01b031684840152600281015484830152600381018054835181860281018601909452808452611159959492936060860193909291908301828280156109dc576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109be575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613025565b60009081526001602052604090206008015460ff1690565b600081815260016020818152604080842081516101208101835281548152938101546001600160a01b03168484015260028101548483015260038101805483518186028101860190945280845291946113429490938693606086019391928301828280156109dc576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109be575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613025565b61137a576040805184815261c3a0602082015281516000805160206139fd833981519152929181900390910190a1600091505061092f565b60025460408051632e40019160e01b81526004810186905290516000926001600160a01b031691632e400191916024808301926020929190829003018186803b1580156113c657600080fd5b505afa1580156113da573d6000803e3d6000fd5b505050506040513d60208110156113f057600080fd5b50516002546040805163f06d520d60e01b8152905163ffffffff90931693506000926001600160a01b039092169163f06d520d91600480820192602092909190829003018186803b15801561144457600080fd5b505afa158015611458573d6000803e3d6000fd5b505050506040513d602081101561146e57600080fd5b50516004805460025460408051632e40019160e01b815293840185905251939450908501926001600160a01b0390911691632e400191916024808301926020929190829003018186803b1580156114c457600080fd5b505afa1580156114d8573d6000803e3d6000fd5b505050506040513d60208110156114ee57600080fd5b505163ffffffff161015611532576040805186815261c3dc602082015281516000805160206139fd833981519152929181900390910190a16000935050505061092f565b6002546040805163c0dde98b60e01b81526004810185905290516001600160a01b039092169163c0dde98b91602480820192602092909190829003018186803b15801561157e57600080fd5b505afa158015611592573d6000803e3d6000fd5b505050506040513d60208110156115a857600080fd5b5051905084811461179b57600254604080516365702c0f60e11b81526004810188905290516000926001600160a01b03169163cae0581e916024808301926020929190829003018186803b1580156115ff57600080fd5b505afa158015611613573d6000803e3d6000fd5b505050506040513d602081101561162957600080fd5b50519050600381600581111561163b57fe5b14611677576040805187815261c364602082015281516000805160206139fd833981519152929181900390910190a1600094505050505061092f565b6008840154610100900460ff166116bf576040805187815261c3b4602082015281516000805160206139fd833981519152929181900390910190a1600094505050505061092f565b60025460408051633a102bc360e11b81526004810189905233602482015281516001600160a01b03909316926374205786926044808401939192918290030181600087803b15801561171057600080fd5b505af1158015611724573d6000803e3d6000fd5b505050506040513d604081101561173a57600080fd5b50506001840154604080518881526001600160a01b03909216602083015280517f944668cff98bcc4e0c3851b8682999d1e5c0bf2b32e8e035d71db8f40fd0ded79281900390910190a161178e86856132bf565b600194505050505061092f565b506000949350505050565b619c4081565b60075481565b60045481565b600082815260016020818152604080842081516101208101835281548152938101546001600160a01b031684840152600281015484830152600381018054835181860281018601909452808452919461189e9490938693606086019391928301828280156109dc576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109be575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613025565b6118a757600080fd5b6001600160a01b038316600090815260049091016020526040902054905092915050565b6003546001600160a01b031681565b336000908152602081905260408120548211156118f657600080fd5b33600090815260208190526040902054611916908363ffffffff6134b616565b33600081815260208190526040808220939093559151909184156108fc02918591818181858888f19350505050158015611954573d6000803e3d6000fd5b50604080513381526020810184905281517f4482101800a5c2e900f4156e57e05e19ffd7b366cde579553d723fd3abb2180e929181900390910190a150503360009081526020819052604090205490565b60025460009081906001600160a01b03166119bf57600080fd5b33600090815260208190526040902054670de0b6b3a76484d01115611a1657604080516000815261c38c602082015281516000805160206139fd833981519152929181900390910190a15061c38c90506000611f32565b4260065486011115611a5a57604080516000815261c373602082015281516000805160206139fd833981519152929181900390910190a15061c37390506000611f32565b60025460408051635c2ac68960e11b8152600481018a9052602481018990526044810188905260648101879052608481018690523360a4820152815160009384936001600160a01b039091169263b8558d129260c4808301939282900301818787803b158015611ac957600080fd5b505af1158015611add573d6000803e3d6000fd5b505050506040513d6040811015611af357600080fd5b50805160209091015190925090508115611b3a57604080518281526020810184905281516000805160206139fd833981519152929181900390910190a19092509050611f32565b60008181526001602081815260409283902083516101208101855281548152928101546001600160a01b0316838301526002810154838501526003810180548551818502810185019096528086529194611c1f949386936060860193918301828280156109dc576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109be575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613025565b15611e1a57600881015460009062010000900460ff1615156001148015611c555750600882015460ff6101009091041615156001145b8015611c6e575060018201546001600160a01b03163314155b90508015611e0e576004600254604080516365702c0f60e11b8152600481018b905290516001600160a01b039092169163cae0581e91602480820192602092909190829003018186803b158015611cc457600080fd5b505afa158015611cd8573d6000803e3d6000fd5b505050506040513d6020811015611cee57600080fd5b50516005811115611cfb57fe5b1415611d79576002546040805163f06d520d60e01b8152905189926001600160a01b03169163f06d520d916004808301926020929190829003018186803b158015611d4557600080fd5b505afa158015611d59573d6000803e3d6000fd5b505050506040513d6020811015611d6f57600080fd5b5051149050611e0e565b600254604080516365702c0f60e11b8152600481018a905290516003926001600160a01b03169163cae0581e916024808301926020929190829003018186803b158015611dc557600080fd5b505afa158015611dd9573d6000803e3d6000fd5b505050506040513d6020811015611def57600080fd5b50516005811115611dfc57fe5b1415611e0a57506001611e0e565b5060005b80611e1857600080fd5b505b8181556001810180546001600160a01b0319163317905560006005820181905560088201805462ffffff1916905542600283018190556007805490910190830155611e6860038301826139b5565b506005546040805163612b4f2d60e11b815260048101859052336024820152604481019290925251309163c2569e5a9160648083019260209291908290030181600087803b158015611eb957600080fd5b505af1158015611ecd573d6000803e3d6000fd5b505050506040513d6020811015611ee357600080fd5b505192508215611eef57fe5b6040805183815233602082015281517fb3a62becdc21cd20cda5d5537311e57b217d497022fa1d6fa233fe5d736011ad929181900390910190a150600093509150505b9550959350505050565b600081815260016020818152604080842081516101208101835281548152938101546001600160a01b03168484015260028101548483015260038101805483518186028101860190945280845291946120229490938693606086019391928301828280156109dc576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109be575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613025565b61205a576040805184815261c3a0602082015281516000805160206139fd833981519152929181900390910190a1600091505061092f565b600881015460ff161561209b576040805184815261c3aa602082015281516000805160206139fd833981519152929181900390910190a1600091505061092f565b600881015462010000900460ff161561219a5760088101805461ff001916610100179055600254815460408051633a102bc360e11b8152600481019290925233602483015280516001600160a01b039093169263742057869260448082019392918290030181600087803b15801561211257600080fd5b505af1158015612126573d6000803e3d6000fd5b505050506040513d604081101561213c57600080fd5b50506001810154604080518581526001600160a01b03909216602083015280517f944668cff98bcc4e0c3851b8682999d1e5c0bf2b32e8e035d71db8f40fd0ded79281900390910190a161219083826132bf565b600091505061092f565b806007015442116121d9576040805184815261c36e602082015281516000805160206139fd833981519152929181900390910190a1600091505061092f565b60038101546005820154101561221d576040805184815261c3aa602082015281516000805160206139fd833981519152929181900390910190a1600091505061092f565b60088101805461ff001916610100179055600381015460009061235057600254825460408051632af00c6760e11b81526004810192909252516000926001600160a01b0316916355e018ce916024808301926020929190829003018186803b15801561228857600080fd5b505afa15801561229c573d6000803e3d6000fd5b505050506040513d60208110156122b257600080fd5b5051600254604080516365702c0f60e11b81526004810184905290519293506000926001600160a01b039092169163cae0581e91602480820192602092909190829003018186803b15801561230657600080fd5b505afa15801561231a573d6000803e3d6000fd5b505050506040513d602081101561233057600080fd5b50519050600481600581111561234257fe5b141561234d57600192505b50505b8015612440576002548254604080516395b45ee760e01b81526004810192909252336024830152516001600160a01b03909216916395b45ee7916044808201926020929091908290030181600087803b1580156123ac57600080fd5b505af11580156123c0573d6000803e3d6000fd5b505050506040513d60208110156123d657600080fd5b505060018201546123f19085906001600160a01b03166130fe565b50506001820154604080518681526001600160a01b03909216602083015280517fd2d92ada663f6bc7872c4132f968080a631f3d0faa9310ba1c86d1c54e470b289281900390910190a1612508565b6002548254604080516327426f7560e01b8152600481019290925233602483015280516001600160a01b03909316926327426f759260448082019392918290030181600087803b15801561249357600080fd5b505af11580156124a7573d6000803e3d6000fd5b505050506040513d60408110156124bd57600080fd5b50506001820154604080518681526001600160a01b03909216602083015280517f68c34be3e9c7221898bee267017dda5f7344326a8825b2d4427dfeaba0fa19299281900390910190a15b5060019392505050565b600090815260016020526040902060058101546003909101540390565b670de0b6b3a76484d081565b60025460009081906001600160a01b031661255557600080fd5b60008381526001602081815260409283902083516101208101855281548152928101546001600160a01b031683830152600281015483850152600381018054855181850281018501909652808652919461263a949386936060860193918301828280156109dc576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109be575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613025565b612676576040805185815261c3a0602082015281516000805160206139fd833981519152929181900390910190a161c3a084925092505061296f565b6008810154610100900460ff16156126c0576040805185815261c3b4602082015281516000805160206139fd833981519152929181900390910190a161c3b484925092505061296f565b33600090815260208190526040902054670de0b6b3a76ab6c01115612717576040805185815261c38c602082015281516000805160206139fd833981519152929181900390910190a161c38c84925092505061296f565b60005b600382015481101561279b57336001600160a01b031682600301828154811061273f57fe5b6000918252602090912001546001600160a01b03161415612793576040805186815261c3be602082015281516000805160206139fd833981519152929181900390910190a161c3be8593509350505061296f565b60010161271a565b506002546040805163c1f67ab360e01b81526004810187905233602482015290516000926001600160a01b03169163c1f67ab391604480830192602092919082900301818787803b1580156127ef57600080fd5b505af1158015612803573d6000803e3d6000fd5b505050506040513d602081101561281957600080fd5b50519050801561285957604080518681526020810183905281516000805160206139fd833981519152929181900390910190a192506000915061296f9050565b6005546040805163612b4f2d60e11b815260048101889052336024820152604481019290925251309163c2569e5a9160648083019260209291908290030181600087803b1580156128a957600080fd5b505af11580156128bd573d6000803e3d6000fd5b505050506040513d60208110156128d357600080fd5b5051905080156128df57fe5b6007805442019083015560038201805460018101825560009182526020918290200180546001600160a01b03191633908117909155604080518881529283019190915280517f4e4ec862758a1fd984d86a07836cbea0bb7aec069cc98cd7a543266b270e42e49281900390910190a1600882015460ff166129655761296385613513565b505b6000859350935050505b915091565b60065481565b600090815260016020819052604090912001546001600160a01b031690565b6206b6c081565b670de0b6b3a76ab6c081565b6003546001600160a01b031633146129c357600080fd5b60008381526001602081815260409283902083516101208101855281548152928101546001600160a01b0316838301526002810154838501526003810180548551818502810185019096528086529194612aa8949386936060860193918301828280156109dc576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109be575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613025565b612ab157600080fd5b60088101805460ff1916905560018101546001600160a01b0383811691161415612aed5760088101805462ff0000191662010000179055612b19565b60018101546001600160a01b0384811691161415612b1457612b0e84613513565b50612b19565b600080fd5b604080518681526001600160a01b03808616602083015284168183015290517f1a6e323d263407d13632ff217899ae9353a07223d311df6db8d80cad6a57c2d59181900360600190a15050505050565b6002546001600160a01b031681565b6205c49081565b60008281526001602090815260408083206001600160a01b038516845260060190915290205492915050565b60055481565b600081815260016020526040812060028054604080516365702c0f60e11b81526004810187905290516001600160a01b039092169163cae0581e91602480820192602092909190829003018186803b158015612c0c57600080fd5b505afa158015612c20573d6000803e3d6000fd5b505050506040513d6020811015612c3657600080fd5b50516005811115612c4357fe5b148015612c5b5750600881015462010000900460ff16155b8015612c6c5750600881015460ff16155b8015612c7b5750806007015442115b8015612c8f57506003810154600582015410155b9392505050565b670de0b6b3a764000081565b60009081526001602052604090206007015490565b6003546000906001600160a01b0316331480612cd257503330145b612cdb57600080fd5b60008481526001602081815260409283902083516101208101855281548152928101546001600160a01b0316838301526002810154838501526003810180548551818502810185019096528086529194612dc0949386936060860193918301828280156109dc576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109be575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613025565b612dcf5761c3a0915050612c8f565b6001600160a01b038416600090815260208190526040902054831115612dfa5761c38c915050612c8f565b6001600160a01b038416600090815260208190526040902054612e23908463ffffffff6134b616565b6001600160a01b038516600090815260208181526040808320939093556004840190522054612e58908463ffffffff61389816565b6001600160a01b038516600081815260048401602090815260409182902093909355805188815292830191909152818101859052517ff49b89a01f8b7e79e855801f268b5df3d7c88c4bc61293934fc1f9c52ddfeb319181900360600190a1506000949350505050565b60009081526001602052604090206002015490565b600090815260016020526040902060080154610100900460ff1690565b62035b6081565b60009081526001602052604090206008015462010000900460ff1690565b6001600160a01b031660009081526020819052604090205490565b6184d081565b60016020819052600091825260409091208054918101546002820154600583015460078401546008909401546001600160a01b0390931693919290919060ff808216916101008104821691620100009091041688565b60006020819052908152604090205481565b6001600160a01b038216600090815260208190526040902054612fcb908263ffffffff61389816565b6001600160a01b0383166000818152602081815260409182902093909355805191825291810183905281517fd15c9547ea5c06670c0010ce19bc32d54682a4b3801ece7f3ab0c3f17106b4bb929181900390910190a15050565b602001516001600160a01b0316151590565b600080805b60038401548110156130dc5783600301818154811061305757fe5b60009182526020808320909101546001600160a01b039081168084526004880190925260408084205460018901549092168452909220549094509092506130a4908363ffffffff61389816565b6001808601546001600160a01b039081166000908152600488016020526040808220949094559086168152918220919091550161303c565b5060018301546130f69085906001600160a01b03166130fe565b505050505050565b600082815260016020818152604080842081516101208101835281548152938101546001600160a01b031684840152600281015484830152600381018054835181860281018601909452808452869592946131e7948693606086019391929091908301828280156109dc576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109be575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613025565b6131fa575061c3a09150600090506132b8565b6008810154610100900460ff1661321a575061c3649150600090506132b8565b6001600160a01b038416600090815260048201602090815260408083208054908490559183905290912054613255908263ffffffff61389816565b6001600160a01b0386166000818152602081815260409182902093909355805189815292830191909152818101839052517faafcd902e5217659ba924addbacae78ebf6a7c77409df0d0065b9ebca01298739181900360600190a1600093509150505b9250929050565b60018101546001600160a01b0316600090815260048201602052604081205490805b83600501548110156133415761333784600401600086600301848154811061330557fe5b60009182526020808320909101546001600160a01b03168352820192909252604001902054839063ffffffff61389816565b91506001016132e1565b811561336b5760018401546001600160a01b03166000908152600485016020526040812055613387565b60018401546133849086906001600160a01b03166130fe565b50505b50600080805b856005015483101561345f578560030183815481106133a857fe5b6000918252602090912001546001600160a01b03169150831561340a576001600160a01b03821660009081526004870160205260409020546134039085906133f790889063ffffffff6138f216565b9063ffffffff61394b16565b905061340e565b5060005b6001600160a01b0382166000908152600487016020526040902054613439908263ffffffff61389816565b6001600160a01b038316600090815260048801602052604090205560019092019161338d565b600092505b60038601548310156134ad5785600301838154811061347f57fe5b6000918252602090912001546001600160a01b031691506134a087836130fe565b5050826001019250613464565b50505050505050565b60008282111561350d576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600081815260016020818152604080842081516101208101835281548152938101546001600160a01b03168484015260028101548483015260038101805483518186028101860190945280845291946135f99490938693606086019391928301828280156109dc576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109be575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613025565b613631576040805184815261c3a0602082015281516000805160206139fd833981519152929181900390910190a1600091505061092f565b6008810154610100900460ff16806136535750600881015462010000900460ff165b1561368c576040805184815261c3b4602082015281516000805160206139fd833981519152929181900390910190a1600091505061092f565b600881015460ff16156136cd576040805184815261c3aa602082015281516000805160206139fd833981519152929181900390910190a1600091505061092f565b60038101546005820154101561388f57600380546001830154600584015492840180546000946001600160a01b039485169463d1daeede948a94911692909190811061371557fe5b6000918252602080832090910154604080516001600160e01b031960e089901b16815260048101969096526001600160a01b0394851660248701529316604485015291516064808501949192918390030190829087803b15801561377857600080fd5b505af115801561378c573d6000803e3d6000fd5b505050506040513d60208110156137a257600080fd5b50516005830154600384018054929350839260068601926000929181106137c557fe5b60009182526020808320909101546001600160a01b039081168452908301939093526040909101902091909155600183015460058401546003850180547f6d3b2a0e9b0833bfb42336839231773ea07aed87bb2fdee34c960696ea11f849948994169290811061383157fe5b60009182526020918290200154604080519485526001600160a01b0393841692850192909252919091168282015260608201849052519081900360800190a15060088101805460ff1916600190811790915560058201805490910190555b50600192915050565b600082820183811015612c8f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008261390157506000611159565b8282028284828161390e57fe5b0414612c8f5760405162461bcd60e51b8152600401808060200182810382526021815260200180613a1d6021913960400191505060405180910390fd5b60008082116139a1576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b60008284816139ac57fe5b04949350505050565b8154818355818111156139d9576000838152602090206139d99181019083016139de565b505050565b6108be91905b808211156139f857600081556001016139e4565b509056fe94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa33536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a265627a7a723058202158738541d452be2a5190c45fa5059bca9f79545dbb2e5b2c47f4ee934e535c64736f6c634300050a0032";

    public static final String FUNC_RESPONDLASTBLOCKHEADERCOST = "respondLastBlockHeaderCost";

    public static final String FUNC_SUPERBLOCKTIMEOUT = "superblockTimeout";

    public static final String FUNC_SUPERBLOCKCONFIRMATIONS = "superblockConfirmations";

    public static final String FUNC_TRUSTEDSYSCOINBATTLEMANAGER = "trustedSyscoinBattleManager";

    public static final String FUNC_WITHDRAWDEPOSIT = "withdrawDeposit";

    public static final String FUNC_MAKEDEPOSIT = "makeDeposit";

    public static final String FUNC_MINPROPOSALDEPOSIT = "minProposalDeposit";

    public static final String FUNC_SUPERBLOCKDELAY = "superblockDelay";

    public static final String FUNC_SUPERBLOCKCOST = "superblockCost";

    public static final String FUNC_MINCHALLENGEDEPOSIT = "minChallengeDeposit";

    public static final String FUNC_TRUSTEDSUPERBLOCKS = "trustedSuperblocks";

    public static final String FUNC_RESPONDMERKLEROOTHASHESCOST = "respondMerkleRootHashesCost";

    public static final String FUNC_BATTLEREWARD = "battleReward";

    public static final String FUNC_MINREWARD = "minReward";

    public static final String FUNC_VERIFYSUPERBLOCKCOST = "verifySuperblockCost";

    public static final String FUNC_CHALLENGECOST = "challengeCost";

    public static final String FUNC_CLAIMS = "claims";

    public static final String FUNC_DEPOSITS = "deposits";

    public static final String FUNC_BONDDEPOSIT = "bondDeposit";

    public static final String FUNC_GETBONDEDDEPOSIT = "getBondedDeposit";

    public static final String FUNC_GETDEPOSIT = "getDeposit";

    public static final String FUNC_PROPOSESUPERBLOCK = "proposeSuperblock";

    public static final String FUNC_CHALLENGESUPERBLOCK = "challengeSuperblock";

    public static final String FUNC_CHECKCLAIMFINISHED = "checkClaimFinished";

    public static final String FUNC_CONFIRMCLAIM = "confirmClaim";

    public static final String FUNC_REJECTCLAIM = "rejectClaim";

    public static final String FUNC_SESSIONDECIDED = "sessionDecided";

    public static final String FUNC_GETINBATTLEANDSEMIAPPROVABLE = "getInBattleAndSemiApprovable";

    public static final String FUNC_GETCLAIMSUBMITTER = "getClaimSubmitter";

    public static final String FUNC_GETNEWSUPERBLOCKEVENTTIMESTAMP = "getNewSuperblockEventTimestamp";

    public static final String FUNC_GETCLAIMEXISTS = "getClaimExists";

    public static final String FUNC_GETCLAIMDECIDED = "getClaimDecided";

    public static final String FUNC_GETCLAIMINVALID = "getClaimInvalid";

    public static final String FUNC_GETCLAIMVERIFICATIONONGOING = "getClaimVerificationOngoing";

    public static final String FUNC_GETCLAIMCHALLENGETIMEOUT = "getClaimChallengeTimeout";

    public static final String FUNC_GETCLAIMREMAININGCHALLENGERS = "getClaimRemainingChallengers";

    public static final String FUNC_GETSESSION = "getSession";

    public static final String FUNC_GETCLAIMCHALLENGERS = "getClaimChallengers";

    public static final Event DEPOSITBONDED_EVENT = new Event("DepositBonded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DEPOSITUNBONDED_EVENT = new Event("DepositUnbonded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SUPERBLOCKCLAIMCREATED_EVENT = new Event("SuperblockClaimCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUPERBLOCKCLAIMCHALLENGED_EVENT = new Event("SuperblockClaimChallenged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUPERBLOCKBATTLEDECIDED_EVENT = new Event("SuperblockBattleDecided", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUPERBLOCKCLAIMSUCCESSFUL_EVENT = new Event("SuperblockClaimSuccessful", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUPERBLOCKCLAIMPENDING_EVENT = new Event("SuperblockClaimPending", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUPERBLOCKCLAIMFAILED_EVENT = new Event("SuperblockClaimFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event VERIFICATIONGAMESTARTED_EVENT = new Event("VerificationGameStarted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event ERRORCLAIM_EVENT = new Event("ErrorClaim", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DEPOSITMADE_EVENT = new Event("DepositMade", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DEPOSITWITHDRAWN_EVENT = new Event("DepositWithdrawn", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("4", "0x8fe2E7419C18915d7FE2771829F5cb0d5bd29c16");
    }

    @Deprecated
    protected SyscoinClaimManager(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SyscoinClaimManager(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SyscoinClaimManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SyscoinClaimManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Uint256> respondLastBlockHeaderCost() {
        final Function function = new Function(FUNC_RESPONDLASTBLOCKHEADERCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> superblockTimeout() {
        final Function function = new Function(FUNC_SUPERBLOCKTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> superblockConfirmations() {
        final Function function = new Function(FUNC_SUPERBLOCKCONFIRMATIONS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Address> trustedSyscoinBattleManager() {
        final Function function = new Function(FUNC_TRUSTEDSYSCOINBATTLEMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> withdrawDeposit(Uint256 amount) {
        final Function function = new Function(
                FUNC_WITHDRAWDEPOSIT, 
                Arrays.<Type>asList(amount), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> makeDeposit(BigInteger weiValue) {
        final Function function = new Function(
                FUNC_MAKEDEPOSIT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<Uint256> minProposalDeposit() {
        final Function function = new Function(FUNC_MINPROPOSALDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> superblockDelay() {
        final Function function = new Function(FUNC_SUPERBLOCKDELAY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> superblockCost() {
        final Function function = new Function(FUNC_SUPERBLOCKCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minChallengeDeposit() {
        final Function function = new Function(FUNC_MINCHALLENGEDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Address> trustedSuperblocks() {
        final Function function = new Function(FUNC_TRUSTEDSUPERBLOCKS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> respondMerkleRootHashesCost() {
        final Function function = new Function(FUNC_RESPONDMERKLEROOTHASHESCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> battleReward() {
        final Function function = new Function(FUNC_BATTLEREWARD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minReward() {
        final Function function = new Function(FUNC_MINREWARD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> verifySuperblockCost() {
        final Function function = new Function(FUNC_VERIFYSUPERBLOCKCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> challengeCost() {
        final Function function = new Function(FUNC_CHALLENGECOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple8<Bytes32, Address, Uint256, Uint256, Uint256, Bool, Bool, Bool>> claims(Bytes32 param0) {
        final Function function = new Function(FUNC_CLAIMS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple8<Bytes32, Address, Uint256, Uint256, Uint256, Bool, Bool, Bool>>(
                new Callable<Tuple8<Bytes32, Address, Uint256, Uint256, Uint256, Bool, Bool, Bool>>() {
                    @Override
                    public Tuple8<Bytes32, Address, Uint256, Uint256, Uint256, Bool, Bool, Bool> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<Bytes32, Address, Uint256, Uint256, Uint256, Bool, Bool, Bool>(
                                (Bytes32) results.get(0), 
                                (Address) results.get(1), 
                                (Uint256) results.get(2), 
                                (Uint256) results.get(3), 
                                (Uint256) results.get(4), 
                                (Bool) results.get(5), 
                                (Bool) results.get(6), 
                                (Bool) results.get(7));
                    }
                });
    }

    public RemoteCall<Uint256> deposits(Address param0) {
        final Function function = new Function(FUNC_DEPOSITS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public List<DepositBondedEventResponse> getDepositBondedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSITBONDED_EVENT, transactionReceipt);
        ArrayList<DepositBondedEventResponse> responses = new ArrayList<DepositBondedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositBondedEventResponse typedResponse = new DepositBondedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.account = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositBondedEventResponse> depositBondedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DepositBondedEventResponse>() {
            @Override
            public DepositBondedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSITBONDED_EVENT, log);
                DepositBondedEventResponse typedResponse = new DepositBondedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.account = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<DepositBondedEventResponse> depositBondedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITBONDED_EVENT));
        return depositBondedEventFlowable(filter);
    }

    public List<DepositUnbondedEventResponse> getDepositUnbondedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSITUNBONDED_EVENT, transactionReceipt);
        ArrayList<DepositUnbondedEventResponse> responses = new ArrayList<DepositUnbondedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositUnbondedEventResponse typedResponse = new DepositUnbondedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.account = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositUnbondedEventResponse> depositUnbondedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DepositUnbondedEventResponse>() {
            @Override
            public DepositUnbondedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSITUNBONDED_EVENT, log);
                DepositUnbondedEventResponse typedResponse = new DepositUnbondedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.account = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<DepositUnbondedEventResponse> depositUnbondedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITUNBONDED_EVENT));
        return depositUnbondedEventFlowable(filter);
    }

    public List<SuperblockClaimCreatedEventResponse> getSuperblockClaimCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKCLAIMCREATED_EVENT, transactionReceipt);
        ArrayList<SuperblockClaimCreatedEventResponse> responses = new ArrayList<SuperblockClaimCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimCreatedEventResponse typedResponse = new SuperblockClaimCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockClaimCreatedEventResponse> superblockClaimCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SuperblockClaimCreatedEventResponse>() {
            @Override
            public SuperblockClaimCreatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKCLAIMCREATED_EVENT, log);
                SuperblockClaimCreatedEventResponse typedResponse = new SuperblockClaimCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockClaimCreatedEventResponse> superblockClaimCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKCLAIMCREATED_EVENT));
        return superblockClaimCreatedEventFlowable(filter);
    }

    public List<SuperblockClaimChallengedEventResponse> getSuperblockClaimChallengedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKCLAIMCHALLENGED_EVENT, transactionReceipt);
        ArrayList<SuperblockClaimChallengedEventResponse> responses = new ArrayList<SuperblockClaimChallengedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimChallengedEventResponse typedResponse = new SuperblockClaimChallengedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockClaimChallengedEventResponse> superblockClaimChallengedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SuperblockClaimChallengedEventResponse>() {
            @Override
            public SuperblockClaimChallengedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKCLAIMCHALLENGED_EVENT, log);
                SuperblockClaimChallengedEventResponse typedResponse = new SuperblockClaimChallengedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockClaimChallengedEventResponse> superblockClaimChallengedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKCLAIMCHALLENGED_EVENT));
        return superblockClaimChallengedEventFlowable(filter);
    }

    public List<SuperblockBattleDecidedEventResponse> getSuperblockBattleDecidedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKBATTLEDECIDED_EVENT, transactionReceipt);
        ArrayList<SuperblockBattleDecidedEventResponse> responses = new ArrayList<SuperblockBattleDecidedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockBattleDecidedEventResponse typedResponse = new SuperblockBattleDecidedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.winner = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse.loser = (Address) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockBattleDecidedEventResponse> superblockBattleDecidedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SuperblockBattleDecidedEventResponse>() {
            @Override
            public SuperblockBattleDecidedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKBATTLEDECIDED_EVENT, log);
                SuperblockBattleDecidedEventResponse typedResponse = new SuperblockBattleDecidedEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.winner = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse.loser = (Address) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockBattleDecidedEventResponse> superblockBattleDecidedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKBATTLEDECIDED_EVENT));
        return superblockBattleDecidedEventFlowable(filter);
    }

    public List<SuperblockClaimSuccessfulEventResponse> getSuperblockClaimSuccessfulEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKCLAIMSUCCESSFUL_EVENT, transactionReceipt);
        ArrayList<SuperblockClaimSuccessfulEventResponse> responses = new ArrayList<SuperblockClaimSuccessfulEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimSuccessfulEventResponse typedResponse = new SuperblockClaimSuccessfulEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockClaimSuccessfulEventResponse> superblockClaimSuccessfulEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SuperblockClaimSuccessfulEventResponse>() {
            @Override
            public SuperblockClaimSuccessfulEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKCLAIMSUCCESSFUL_EVENT, log);
                SuperblockClaimSuccessfulEventResponse typedResponse = new SuperblockClaimSuccessfulEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockClaimSuccessfulEventResponse> superblockClaimSuccessfulEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKCLAIMSUCCESSFUL_EVENT));
        return superblockClaimSuccessfulEventFlowable(filter);
    }

    public List<SuperblockClaimPendingEventResponse> getSuperblockClaimPendingEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKCLAIMPENDING_EVENT, transactionReceipt);
        ArrayList<SuperblockClaimPendingEventResponse> responses = new ArrayList<SuperblockClaimPendingEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimPendingEventResponse typedResponse = new SuperblockClaimPendingEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockClaimPendingEventResponse> superblockClaimPendingEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SuperblockClaimPendingEventResponse>() {
            @Override
            public SuperblockClaimPendingEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKCLAIMPENDING_EVENT, log);
                SuperblockClaimPendingEventResponse typedResponse = new SuperblockClaimPendingEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockClaimPendingEventResponse> superblockClaimPendingEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKCLAIMPENDING_EVENT));
        return superblockClaimPendingEventFlowable(filter);
    }

    public List<SuperblockClaimFailedEventResponse> getSuperblockClaimFailedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKCLAIMFAILED_EVENT, transactionReceipt);
        ArrayList<SuperblockClaimFailedEventResponse> responses = new ArrayList<SuperblockClaimFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimFailedEventResponse typedResponse = new SuperblockClaimFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockClaimFailedEventResponse> superblockClaimFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SuperblockClaimFailedEventResponse>() {
            @Override
            public SuperblockClaimFailedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKCLAIMFAILED_EVENT, log);
                SuperblockClaimFailedEventResponse typedResponse = new SuperblockClaimFailedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockClaimFailedEventResponse> superblockClaimFailedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKCLAIMFAILED_EVENT));
        return superblockClaimFailedEventFlowable(filter);
    }

    public List<VerificationGameStartedEventResponse> getVerificationGameStartedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VERIFICATIONGAMESTARTED_EVENT, transactionReceipt);
        ArrayList<VerificationGameStartedEventResponse> responses = new ArrayList<VerificationGameStartedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VerificationGameStartedEventResponse typedResponse = new VerificationGameStartedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(2);
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(3);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VerificationGameStartedEventResponse> verificationGameStartedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, VerificationGameStartedEventResponse>() {
            @Override
            public VerificationGameStartedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VERIFICATIONGAMESTARTED_EVENT, log);
                VerificationGameStartedEventResponse typedResponse = new VerificationGameStartedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(2);
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(3);
                return typedResponse;
            }
        });
    }

    public Flowable<VerificationGameStartedEventResponse> verificationGameStartedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VERIFICATIONGAMESTARTED_EVENT));
        return verificationGameStartedEventFlowable(filter);
    }

    public List<ErrorClaimEventResponse> getErrorClaimEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ERRORCLAIM_EVENT, transactionReceipt);
        ArrayList<ErrorClaimEventResponse> responses = new ArrayList<ErrorClaimEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorClaimEventResponse typedResponse = new ErrorClaimEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ErrorClaimEventResponse> errorClaimEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ErrorClaimEventResponse>() {
            @Override
            public ErrorClaimEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ERRORCLAIM_EVENT, log);
                ErrorClaimEventResponse typedResponse = new ErrorClaimEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ErrorClaimEventResponse> errorClaimEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ERRORCLAIM_EVENT));
        return errorClaimEventFlowable(filter);
    }

    public List<DepositMadeEventResponse> getDepositMadeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSITMADE_EVENT, transactionReceipt);
        ArrayList<DepositMadeEventResponse> responses = new ArrayList<DepositMadeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositMadeEventResponse typedResponse = new DepositMadeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositMadeEventResponse> depositMadeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DepositMadeEventResponse>() {
            @Override
            public DepositMadeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSITMADE_EVENT, log);
                DepositMadeEventResponse typedResponse = new DepositMadeEventResponse();
                typedResponse.log = log;
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<DepositMadeEventResponse> depositMadeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITMADE_EVENT));
        return depositMadeEventFlowable(filter);
    }

    public List<DepositWithdrawnEventResponse> getDepositWithdrawnEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSITWITHDRAWN_EVENT, transactionReceipt);
        ArrayList<DepositWithdrawnEventResponse> responses = new ArrayList<DepositWithdrawnEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositWithdrawnEventResponse typedResponse = new DepositWithdrawnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositWithdrawnEventResponse> depositWithdrawnEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DepositWithdrawnEventResponse>() {
            @Override
            public DepositWithdrawnEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSITWITHDRAWN_EVENT, log);
                DepositWithdrawnEventResponse typedResponse = new DepositWithdrawnEventResponse();
                typedResponse.log = log;
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<DepositWithdrawnEventResponse> depositWithdrawnEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITWITHDRAWN_EVENT));
        return depositWithdrawnEventFlowable(filter);
    }

    public RemoteCall<TransactionReceipt> bondDeposit(Bytes32 superblockHash, Address account, Uint256 amount) {
        final Function function = new Function(
                FUNC_BONDDEPOSIT, 
                Arrays.<Type>asList(superblockHash, account, amount), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Uint256> getBondedDeposit(Bytes32 superblockHash, Address account) {
        final Function function = new Function(FUNC_GETBONDEDDEPOSIT, 
                Arrays.<Type>asList(superblockHash, account), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getDeposit(Address account) {
        final Function function = new Function(FUNC_GETDEPOSIT, 
                Arrays.<Type>asList(account), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> proposeSuperblock(Bytes32 _blocksMerkleRoot, Uint256 _accumulatedWork, Uint256 _timestamp, Bytes32 _lastHash, Bytes32 _parentHash) {
        final Function function = new Function(
                FUNC_PROPOSESUPERBLOCK, 
                Arrays.<Type>asList(_blocksMerkleRoot, _accumulatedWork, _timestamp, _lastHash, _parentHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> challengeSuperblock(Bytes32 superblockHash) {
        final Function function = new Function(
                FUNC_CHALLENGESUPERBLOCK, 
                Arrays.<Type>asList(superblockHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> checkClaimFinished(Bytes32 superblockHash) {
        final Function function = new Function(
                FUNC_CHECKCLAIMFINISHED, 
                Arrays.<Type>asList(superblockHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> confirmClaim(Bytes32 superblockHash, Bytes32 descendantId) {
        final Function function = new Function(
                FUNC_CONFIRMCLAIM, 
                Arrays.<Type>asList(superblockHash, descendantId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> rejectClaim(Bytes32 superblockHash) {
        final Function function = new Function(
                FUNC_REJECTCLAIM, 
                Arrays.<Type>asList(superblockHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> sessionDecided(Bytes32 sessionId, Bytes32 superblockHash, Address winner, Address loser) {
        final Function function = new Function(
                FUNC_SESSIONDECIDED, 
                Arrays.<Type>asList(sessionId, superblockHash, winner, loser), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Bool> getInBattleAndSemiApprovable(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETINBATTLEANDSEMIAPPROVABLE, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Address> getClaimSubmitter(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMSUBMITTER, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getNewSuperblockEventTimestamp(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETNEWSUPERBLOCKEVENTTIMESTAMP, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> getClaimExists(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMEXISTS, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> getClaimDecided(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMDECIDED, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> getClaimInvalid(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMINVALID, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> getClaimVerificationOngoing(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMVERIFICATIONONGOING, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getClaimChallengeTimeout(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMCHALLENGETIMEOUT, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getClaimRemainingChallengers(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMREMAININGCHALLENGERS, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSession(Bytes32 superblockHash, Address challenger) {
        final Function function = new Function(FUNC_GETSESSION, 
                Arrays.<Type>asList(superblockHash, challenger), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Address>> getClaimChallengers(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMCHALLENGERS, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    @Deprecated
    public static SyscoinClaimManager load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SyscoinClaimManager(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SyscoinClaimManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SyscoinClaimManager(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SyscoinClaimManager load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SyscoinClaimManager(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SyscoinClaimManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SyscoinClaimManager(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SyscoinClaimManager> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, Address _superblocks, Address _syscoinBattleManager, Uint256 _superblockDelay, Uint256 _superblockTimeout, Uint256 _superblockConfirmations, Uint256 _battleReward) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_superblocks, _syscoinBattleManager, _superblockDelay, _superblockTimeout, _superblockConfirmations, _battleReward));
        return deployRemoteCall(SyscoinClaimManager.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<SyscoinClaimManager> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, Address _superblocks, Address _syscoinBattleManager, Uint256 _superblockDelay, Uint256 _superblockTimeout, Uint256 _superblockConfirmations, Uint256 _battleReward) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_superblocks, _syscoinBattleManager, _superblockDelay, _superblockTimeout, _superblockConfirmations, _battleReward));
        return deployRemoteCall(SyscoinClaimManager.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SyscoinClaimManager> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, Address _superblocks, Address _syscoinBattleManager, Uint256 _superblockDelay, Uint256 _superblockTimeout, Uint256 _superblockConfirmations, Uint256 _battleReward) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_superblocks, _syscoinBattleManager, _superblockDelay, _superblockTimeout, _superblockConfirmations, _battleReward));
        return deployRemoteCall(SyscoinClaimManager.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SyscoinClaimManager> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, Address _superblocks, Address _syscoinBattleManager, Uint256 _superblockDelay, Uint256 _superblockTimeout, Uint256 _superblockConfirmations, Uint256 _battleReward) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_superblocks, _syscoinBattleManager, _superblockDelay, _superblockTimeout, _superblockConfirmations, _battleReward));
        return deployRemoteCall(SyscoinClaimManager.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class DepositBondedEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address account;

        public Uint256 amount;
    }

    public static class DepositUnbondedEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address account;

        public Uint256 amount;
    }

    public static class SuperblockClaimCreatedEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address submitter;
    }

    public static class SuperblockClaimChallengedEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address challenger;
    }

    public static class SuperblockBattleDecidedEventResponse {
        public Log log;

        public Bytes32 sessionId;

        public Address winner;

        public Address loser;
    }

    public static class SuperblockClaimSuccessfulEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address submitter;
    }

    public static class SuperblockClaimPendingEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address submitter;
    }

    public static class SuperblockClaimFailedEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address submitter;
    }

    public static class VerificationGameStartedEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address submitter;

        public Address challenger;

        public Bytes32 sessionId;
    }

    public static class ErrorClaimEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Uint256 err;
    }

    public static class DepositMadeEventResponse {
        public Log log;

        public Address who;

        public Uint256 amount;
    }

    public static class DepositWithdrawnEventResponse {
        public Log log;

        public Address who;

        public Uint256 amount;
    }
}
