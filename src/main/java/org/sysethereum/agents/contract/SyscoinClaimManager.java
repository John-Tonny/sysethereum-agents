package org.sysethereum.agents.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.3.0.
 */
public class SyscoinClaimManager extends Contract {
    private static final String BINARY = "0x608060405234801561001057600080fd5b50604051613b29380380613b29833981810160405260c081101561003357600080fd5b508051602082015160408301516060840151608085015160a090950151600280546001600160a01b039687166001600160a01b0319918216179091556003805496909516951694909417909255600655600755600491909155600555613a8b8061009e6000396000f3fe6080604052600436106102255760003560e01c806361bd8d6611610123578063bf0e1edb116100ab578063dac1d7641161006f578063dac1d7641461078e578063e1254fba146107b8578063eda1970b146107eb578063eff0f59214610800578063fc7e286d1461087957610225565b8063bf0e1edb146106bc578063c2569e5a146106e6578063c3d3290f14610725578063c44205e31461074f578063d035c4031461077957610225565b806390b6f699116100f257806390b6f6991461061a5780639c57588f1461062f5780639e84477d14610668578063a8b4633f1461067d578063ba16d600146106a757610225565b806361bd8d66146105925780636ca640a1146105a7578063748a00e2146105bc57806390a14aea1461060557610225565b80632bcf947e116101b157806343207e631161017557806343207e63146104ea578063455e61661461051457806355e4286b1461052957806357872488146105535780635bf7d5db1461056857610225565b80632bcf947e146103f6578063329af83f1461045d57806333289a461461048e5780633352f1a4146104b857806340732c89146104e257610225565b806313be4f9e116101f857806313be4f9e146103425780631797e5e91461036c57806318b011de1461039357806327b425a6146103a857806329118a9b146103bd57610225565b8063032e558714610230578063040aa57a146102aa5780630ac0d9c9146102ee5780630d5f5d6914610318575b61022d6108ac565b50005b34801561023c57600080fd5b5061025a6004803603602081101561025357600080fd5b50356108cd565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561029657818101518382015260200161027e565b505050509050019250505060405180910390f35b3480156102b657600080fd5b506102da600480360360408110156102cd57600080fd5b5080359060200135610940565b604080519115158252519081900360200190f35b3480156102fa57600080fd5b506102da6004803603602081101561031157600080fd5b503561116b565b34801561032457600080fd5b506102da6004803603602081101561033b57600080fd5b5035611250565b34801561034e57600080fd5b506102da6004803603602081101561036557600080fd5b5035611268565b34801561037857600080fd5b506103816117b2565b60408051918252519081900360200190f35b34801561039f57600080fd5b506103816117b8565b3480156103b457600080fd5b506103816117be565b3480156103c957600080fd5b50610381600480360360408110156103e057600080fd5b50803590602001356001600160a01b03166117c4565b34801561040257600080fd5b50610444600480360360c081101561041957600080fd5b5080359060208101359060408101359060608101359063ffffffff6080820135169060a001356118d7565b6040805192835260208301919091528051918290030190f35b34801561046957600080fd5b50610472611e7b565b604080516001600160a01b039092168252519081900360200190f35b34801561049a57600080fd5b50610381600480360360208110156104b157600080fd5b5035611e8a565b3480156104c457600080fd5b506102da600480360360208110156104db57600080fd5b5035611f55565b6103816108ac565b3480156104f657600080fd5b506103816004803603602081101561050d57600080fd5b503561252b565b34801561052057600080fd5b50610381612548565b34801561053557600080fd5b506104446004803603602081101561054c57600080fd5b5035612554565b34801561055f57600080fd5b5061038161298d565b34801561057457600080fd5b506104726004803603602081101561058b57600080fd5b5035612993565b34801561059e57600080fd5b506103816129b2565b3480156105b357600080fd5b506103816129b9565b3480156105c857600080fd5b50610603600480360360808110156105df57600080fd5b508035906020810135906001600160a01b03604082013581169160600135166129c5565b005b34801561061157600080fd5b50610472612b82565b34801561062657600080fd5b50610381612b91565b34801561063b57600080fd5b506103816004803603604081101561065257600080fd5b50803590602001356001600160a01b0316612b98565b34801561067457600080fd5b50610381612bc4565b34801561068957600080fd5b506102da600480360360208110156106a057600080fd5b5035612bca565b3480156106b357600080fd5b50610381612caf565b3480156106c857600080fd5b50610381600480360360208110156106df57600080fd5b5035612cbb565b3480156106f257600080fd5b506103816004803603606081101561070957600080fd5b508035906001600160a01b036020820135169060400135612cd0565b34801561073157600080fd5b506103816004803603602081101561074857600080fd5b5035612edb565b34801561075b57600080fd5b506102da6004803603602081101561077257600080fd5b5035612ef0565b34801561078557600080fd5b50610381612f0d565b34801561079a57600080fd5b506102da600480360360208110156107b157600080fd5b5035612f14565b3480156107c457600080fd5b50610381600480360360208110156107db57600080fd5b50356001600160a01b0316612f32565b3480156107f757600080fd5b50610381612f4d565b34801561080c57600080fd5b5061082a6004803603602081101561082357600080fd5b5035612f53565b604080519889526001600160a01b0390971660208901528787019590955260608701939093526080860191909152151560a0850152151560c0840152151560e083015251908190036101000190f35b34801561088557600080fd5b506103816004803603602081101561089c57600080fd5b50356001600160a01b0316612fa9565b60006108b83334612fbb565b50336000908152602081905260409020545b90565b600081815260016020908152604091829020600381018054845181850281018501909552808552606094929383018282801561093257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610914575b50505050509150505b919050565b6000818152600160208190526040822082919084905b868214610be35760408051610120810182528254815260018301546001600160a01b0316602080830191909152600284015482840152600384018054845181840281018401909552808552610a3994869360608601939192908301828280156109e857602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109ca575b5050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a09091015261303e565b610a74576040805188815261c3a060208201528151600080516020613a16833981519152929181900390910190a16000945050505050611165565b600254604080516365702c0f60e11b81526004810185905290516003926001600160a01b03169163cae0581e916024808301926020929190829003018186803b158015610ac057600080fd5b505afa158015610ad4573d6000803e3d6000fd5b505050506040513d6020811015610aea57600080fd5b50516005811115610af757fe5b14610b33576040805188815261c36460208201528151600080516020613a16833981519152929181900390910190a16000945050505050611165565b828015610b435750600381015415155b15610b4d57600092505b60025460408051632af00c6760e11b81526004810185905290516001600160a01b03909216916355e018ce91602480820192602092909190829003018186803b158015610b9957600080fd5b505afa158015610bad573d6000803e3d6000fd5b505050506040513d6020811015610bc357600080fd5b505160008181526001602081905260409091209501949092509050610956565b600454841015610c24576040805188815261c3dc60208201528151600080516020613a16833981519152929181900390910190a16000945050505050611165565b600254604080516365702c0f60e11b81526004810185905290516003926001600160a01b03169163cae0581e916024808301926020929190829003018186803b158015610c7057600080fd5b505afa158015610c84573d6000803e3d6000fd5b505050506040513d6020811015610c9a57600080fd5b50516005811115610ca757fe5b14610ce3576040805188815261c36460208201528151600080516020613a16833981519152929181900390910190a16000945050505050611165565b60025460408051632af00c6760e11b8152600481018a905290516000926001600160a01b0316916355e018ce916024808301926020929190829003018186803b158015610d2f57600080fd5b505afa158015610d43573d6000803e3d6000fd5b505050506040513d6020811015610d5957600080fd5b505190506004600254604080516365702c0f60e11b81526004810185905290516001600160a01b039092169163cae0581e91602480820192602092909190829003018186803b158015610dab57600080fd5b505afa158015610dbf573d6000803e3d6000fd5b505050506040513d6020811015610dd557600080fd5b50516005811115610de257fe5b14610e1f576040805189815261c36460208201528151600080516020613a16833981519152929181900390910190a1600095505050505050611165565b600254604080516395b45ee760e01b8152600481018b905233602482015290516000926001600160a01b0316916395b45ee791604480830192602092919082900301818787803b158015610e7257600080fd5b505af1158015610e86573d6000803e3d6000fd5b505050506040513d6020811015610e9c57600080fd5b505190508015610ede57604080518a8152602081018390528151600080516020613a16833981519152929181900390910190a160009650505050505050611165565b6001830154604080518b81526001600160a01b03909216602083015280517fd2d92ada663f6bc7872c4132f968080a631f3d0faa9310ba1c86d1c54e470b289281900390910190a1610f308984613050565b6001830154610f49908a906001600160a01b0316613117565b5050841561115a57606086604051908082528060200260200182016040528015610f7d578160200160208202803883390190505b50899550905060005b8a86146110255785828281518110610f9a57fe5b60209081029190910181019190915260025460408051632af00c6760e11b8152600481018a905290516001600160a01b03909216926355e018ce92602480840193829003018186803b158015610fef57600080fd5b505afa158015611003573d6000803e3d6000fd5b505050506040513d602081101561101957600080fd5b50519550600101610f86565b80156111575760018103905081818151811061103d57fe5b602090810291909101810151600081815260018352604080822060025482516395b45ee760e01b8152600481018690523360248201529251949b509099506001600160a01b0316936395b45ee79360448084019492939192918390030190829087803b1580156110ac57600080fd5b505af11580156110c0573d6000803e3d6000fd5b505050506040513d60208110156110d657600080fd5b5051925082156110e557600080fd5b6001850154604080518881526001600160a01b03909216602083015280517fd2d92ada663f6bc7872c4132f968080a631f3d0faa9310ba1c86d1c54e470b289281900390910190a16111378686613050565b60018501546111509087906001600160a01b0316613117565b5050611025565b50505b600196505050505050505b92915050565b600081815260016020818152604080842081516101208101835281548152938101546001600160a01b031684840152600281015484830152600381018054835181860281018601909452808452611165959492936060860193909291908301828280156109e8576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109ca575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a09091015261303e565b60009081526001602052604090206008015460ff1690565b600081815260016020818152604080842081516101208101835281548152938101546001600160a01b031684840152600281015484830152600381018054835181860281018601909452808452919461134e9490938693606086019391928301828280156109e8576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109ca575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a09091015261303e565b611386576040805184815261c3a060208201528151600080516020613a16833981519152929181900390910190a1600091505061093b565b60025460408051632e40019160e01b81526004810186905290516000926001600160a01b031691632e400191916024808301926020929190829003018186803b1580156113d257600080fd5b505afa1580156113e6573d6000803e3d6000fd5b505050506040513d60208110156113fc57600080fd5b50516002546040805163f06d520d60e01b8152905163ffffffff90931693506000926001600160a01b039092169163f06d520d91600480820192602092909190829003018186803b15801561145057600080fd5b505afa158015611464573d6000803e3d6000fd5b505050506040513d602081101561147a57600080fd5b50516004805460025460408051632e40019160e01b815293840185905251939450908501926001600160a01b0390911691632e400191916024808301926020929190829003018186803b1580156114d057600080fd5b505afa1580156114e4573d6000803e3d6000fd5b505050506040513d60208110156114fa57600080fd5b505163ffffffff16101561153e576040805186815261c3dc60208201528151600080516020613a16833981519152929181900390910190a16000935050505061093b565b6002546040805163c0dde98b60e01b81526004810185905290516001600160a01b039092169163c0dde98b91602480820192602092909190829003018186803b15801561158a57600080fd5b505afa15801561159e573d6000803e3d6000fd5b505050506040513d60208110156115b457600080fd5b505190508481146117a757600254604080516365702c0f60e11b81526004810188905290516000926001600160a01b03169163cae0581e916024808301926020929190829003018186803b15801561160b57600080fd5b505afa15801561161f573d6000803e3d6000fd5b505050506040513d602081101561163557600080fd5b50519050600381600581111561164757fe5b14611683576040805187815261c36460208201528151600080516020613a16833981519152929181900390910190a1600094505050505061093b565b6008840154610100900460ff166116cb576040805187815261c3b460208201528151600080516020613a16833981519152929181900390910190a1600094505050505061093b565b60025460408051633a102bc360e11b81526004810189905233602482015281516001600160a01b03909316926374205786926044808401939192918290030181600087803b15801561171c57600080fd5b505af1158015611730573d6000803e3d6000fd5b505050506040513d604081101561174657600080fd5b50506001840154604080518881526001600160a01b03909216602083015280517f944668cff98bcc4e0c3851b8682999d1e5c0bf2b32e8e035d71db8f40fd0ded79281900390910190a161179a86856132d8565b600194505050505061093b565b506000949350505050565b619c4081565b60075481565b60045481565b600082815260016020818152604080842081516101208101835281548152938101546001600160a01b03168484015260028101548483015260038101805483518186028101860190945280845291946118aa9490938693606086019391928301828280156109e8576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109ca575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a09091015261303e565b6118b357600080fd5b6001600160a01b038316600090815260049091016020526040902054905092915050565b60025460009081906001600160a01b03166118f157600080fd5b33600090815260208190526040902054670de0b6b3a76484d0111561194857604080516000815261c38c60208201528151600080516020613a16833981519152929181900390910190a15061c38c90506000611e70565b426006548701111561198c57604080516000815261c37360208201528151600080516020613a16833981519152929181900390910190a15061c37390506000611e70565b60025460408051639e20c80360e01b8152600481018b9052602481018a9052604481018990526064810188905263ffffffff8716608482015260a481018690523360c4820152815160009384936001600160a01b0390911692639e20c8039260e4808301939282900301818787803b158015611a0757600080fd5b505af1158015611a1b573d6000803e3d6000fd5b505050506040513d6040811015611a3157600080fd5b50805160209091015190925090508115611a785760408051828152602081018490528151600080516020613a16833981519152929181900390910190a19092509050611e70565b60008181526001602081815260409283902083516101208101855281548152928101546001600160a01b0316838301526002810154838501526003810180548551818502810185019096528086529194611b5d949386936060860193918301828280156109e8576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109ca575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a09091015261303e565b15611d5857600881015460009062010000900460ff1615156001148015611b935750600882015460ff6101009091041615156001145b8015611bac575060018201546001600160a01b03163314155b90508015611d4c576004600254604080516365702c0f60e11b8152600481018b905290516001600160a01b039092169163cae0581e91602480820192602092909190829003018186803b158015611c0257600080fd5b505afa158015611c16573d6000803e3d6000fd5b505050506040513d6020811015611c2c57600080fd5b50516005811115611c3957fe5b1415611cb7576002546040805163f06d520d60e01b8152905189926001600160a01b03169163f06d520d916004808301926020929190829003018186803b158015611c8357600080fd5b505afa158015611c97573d6000803e3d6000fd5b505050506040513d6020811015611cad57600080fd5b5051149050611d4c565b600254604080516365702c0f60e11b8152600481018a905290516003926001600160a01b03169163cae0581e916024808301926020929190829003018186803b158015611d0357600080fd5b505afa158015611d17573d6000803e3d6000fd5b505050506040513d6020811015611d2d57600080fd5b50516005811115611d3a57fe5b1415611d4857506001611d4c565b5060005b80611d5657600080fd5b505b8181556001810180546001600160a01b0319163317905560006005820181905560088201805462ffffff1916905542600283018190556007805490910190830155611da660038301826139ce565b506005546040805163612b4f2d60e11b815260048101859052336024820152604481019290925251309163c2569e5a9160648083019260209291908290030181600087803b158015611df757600080fd5b505af1158015611e0b573d6000803e3d6000fd5b505050506040513d6020811015611e2157600080fd5b505192508215611e2d57fe5b6040805183815233602082015281517fb3a62becdc21cd20cda5d5537311e57b217d497022fa1d6fa233fe5d736011ad929181900390910190a150600093509150505b965096945050505050565b6003546001600160a01b031681565b33600090815260208190526040812054821115611ea657600080fd5b33600090815260208190526040902054611ec6908363ffffffff6134cf16565b33600081815260208190526040808220939093559151909184156108fc02918591818181858888f19350505050158015611f04573d6000803e3d6000fd5b50604080513381526020810184905281517f4482101800a5c2e900f4156e57e05e19ffd7b366cde579553d723fd3abb2180e929181900390910190a150503360009081526020819052604090205490565b600081815260016020818152604080842081516101208101835281548152938101546001600160a01b031684840152600281015484830152600381018054835181860281018601909452808452919461203b9490938693606086019391928301828280156109e8576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109ca575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a09091015261303e565b612073576040805184815261c3a060208201528151600080516020613a16833981519152929181900390910190a1600091505061093b565b600881015460ff16156120b4576040805184815261c3aa60208201528151600080516020613a16833981519152929181900390910190a1600091505061093b565b600881015462010000900460ff16156121b35760088101805461ff001916610100179055600254815460408051633a102bc360e11b8152600481019290925233602483015280516001600160a01b039093169263742057869260448082019392918290030181600087803b15801561212b57600080fd5b505af115801561213f573d6000803e3d6000fd5b505050506040513d604081101561215557600080fd5b50506001810154604080518581526001600160a01b03909216602083015280517f944668cff98bcc4e0c3851b8682999d1e5c0bf2b32e8e035d71db8f40fd0ded79281900390910190a16121a983826132d8565b600091505061093b565b806007015442116121f2576040805184815261c36e60208201528151600080516020613a16833981519152929181900390910190a1600091505061093b565b600381015460058201541015612236576040805184815261c3aa60208201528151600080516020613a16833981519152929181900390910190a1600091505061093b565b60088101805461ff001916610100179055600381015460009061236957600254825460408051632af00c6760e11b81526004810192909252516000926001600160a01b0316916355e018ce916024808301926020929190829003018186803b1580156122a157600080fd5b505afa1580156122b5573d6000803e3d6000fd5b505050506040513d60208110156122cb57600080fd5b5051600254604080516365702c0f60e11b81526004810184905290519293506000926001600160a01b039092169163cae0581e91602480820192602092909190829003018186803b15801561231f57600080fd5b505afa158015612333573d6000803e3d6000fd5b505050506040513d602081101561234957600080fd5b50519050600481600581111561235b57fe5b141561236657600192505b50505b8015612459576002548254604080516395b45ee760e01b81526004810192909252336024830152516001600160a01b03909216916395b45ee7916044808201926020929091908290030181600087803b1580156123c557600080fd5b505af11580156123d9573d6000803e3d6000fd5b505050506040513d60208110156123ef57600080fd5b5050600182015461240a9085906001600160a01b0316613117565b50506001820154604080518681526001600160a01b03909216602083015280517fd2d92ada663f6bc7872c4132f968080a631f3d0faa9310ba1c86d1c54e470b289281900390910190a1612521565b6002548254604080516327426f7560e01b8152600481019290925233602483015280516001600160a01b03909316926327426f759260448082019392918290030181600087803b1580156124ac57600080fd5b505af11580156124c0573d6000803e3d6000fd5b505050506040513d60408110156124d657600080fd5b50506001820154604080518681526001600160a01b03909216602083015280517f68c34be3e9c7221898bee267017dda5f7344326a8825b2d4427dfeaba0fa19299281900390910190a15b5060019392505050565b600090815260016020526040902060058101546003909101540390565b670de0b6b3a76484d081565b60025460009081906001600160a01b031661256e57600080fd5b60008381526001602081815260409283902083516101208101855281548152928101546001600160a01b0316838301526002810154838501526003810180548551818502810185019096528086529194612653949386936060860193918301828280156109e8576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109ca575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a09091015261303e565b61268f576040805185815261c3a060208201528151600080516020613a16833981519152929181900390910190a161c3a0849250925050612988565b6008810154610100900460ff16156126d9576040805185815261c3b460208201528151600080516020613a16833981519152929181900390910190a161c3b4849250925050612988565b33600090815260208190526040902054670de0b6b3a76ab6c01115612730576040805185815261c38c60208201528151600080516020613a16833981519152929181900390910190a161c38c849250925050612988565b60005b60038201548110156127b457336001600160a01b031682600301828154811061275857fe5b6000918252602090912001546001600160a01b031614156127ac576040805186815261c3be60208201528151600080516020613a16833981519152929181900390910190a161c3be85935093505050612988565b600101612733565b506002546040805163c1f67ab360e01b81526004810187905233602482015290516000926001600160a01b03169163c1f67ab391604480830192602092919082900301818787803b15801561280857600080fd5b505af115801561281c573d6000803e3d6000fd5b505050506040513d602081101561283257600080fd5b5051905080156128725760408051868152602081018390528151600080516020613a16833981519152929181900390910190a19250600091506129889050565b6005546040805163612b4f2d60e11b815260048101889052336024820152604481019290925251309163c2569e5a9160648083019260209291908290030181600087803b1580156128c257600080fd5b505af11580156128d6573d6000803e3d6000fd5b505050506040513d60208110156128ec57600080fd5b5051905080156128f857fe5b6007805442019083015560038201805460018101825560009182526020918290200180546001600160a01b03191633908117909155604080518881529283019190915280517f4e4ec862758a1fd984d86a07836cbea0bb7aec069cc98cd7a543266b270e42e49281900390910190a1600882015460ff1661297e5761297c8561352c565b505b6000859350935050505b915091565b60065481565b600090815260016020819052604090912001546001600160a01b031690565b6206b6c081565b670de0b6b3a76ab6c081565b6003546001600160a01b031633146129dc57600080fd5b60008381526001602081815260409283902083516101208101855281548152928101546001600160a01b0316838301526002810154838501526003810180548551818502810185019096528086529194612ac1949386936060860193918301828280156109e8576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109ca575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a09091015261303e565b612aca57600080fd5b60088101805460ff1916905560018101546001600160a01b0383811691161415612b065760088101805462ff0000191662010000179055612b32565b60018101546001600160a01b0384811691161415612b2d57612b278461352c565b50612b32565b600080fd5b604080518681526001600160a01b03808616602083015284168183015290517f1a6e323d263407d13632ff217899ae9353a07223d311df6db8d80cad6a57c2d59181900360600190a15050505050565b6002546001600160a01b031681565b6205c49081565b60008281526001602090815260408083206001600160a01b038516845260060190915290205492915050565b60055481565b600081815260016020526040812060028054604080516365702c0f60e11b81526004810187905290516001600160a01b039092169163cae0581e91602480820192602092909190829003018186803b158015612c2557600080fd5b505afa158015612c39573d6000803e3d6000fd5b505050506040513d6020811015612c4f57600080fd5b50516005811115612c5c57fe5b148015612c745750600881015462010000900460ff16155b8015612c855750600881015460ff16155b8015612c945750806007015442115b8015612ca857506003810154600582015410155b9392505050565b670de0b6b3a764000081565b60009081526001602052604090206007015490565b6003546000906001600160a01b0316331480612ceb57503330145b612cf457600080fd5b60008481526001602081815260409283902083516101208101855281548152928101546001600160a01b0316838301526002810154838501526003810180548551818502810185019096528086529194612dd9949386936060860193918301828280156109e8576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109ca575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a09091015261303e565b612de85761c3a0915050612ca8565b6001600160a01b038416600090815260208190526040902054831115612e135761c38c915050612ca8565b6001600160a01b038416600090815260208190526040902054612e3c908463ffffffff6134cf16565b6001600160a01b038516600090815260208181526040808320939093556004840190522054612e71908463ffffffff6138b116565b6001600160a01b038516600081815260048401602090815260409182902093909355805188815292830191909152818101859052517ff49b89a01f8b7e79e855801f268b5df3d7c88c4bc61293934fc1f9c52ddfeb319181900360600190a1506000949350505050565b60009081526001602052604090206002015490565b600090815260016020526040902060080154610100900460ff1690565b62035b6081565b60009081526001602052604090206008015462010000900460ff1690565b6001600160a01b031660009081526020819052604090205490565b6184d081565b60016020819052600091825260409091208054918101546002820154600583015460078401546008909401546001600160a01b0390931693919290919060ff808216916101008104821691620100009091041688565b60006020819052908152604090205481565b6001600160a01b038216600090815260208190526040902054612fe4908263ffffffff6138b116565b6001600160a01b0383166000818152602081815260409182902093909355805191825291810183905281517fd15c9547ea5c06670c0010ce19bc32d54682a4b3801ece7f3ab0c3f17106b4bb929181900390910190a15050565b602001516001600160a01b0316151590565b600080805b60038401548110156130f55783600301818154811061307057fe5b60009182526020808320909101546001600160a01b039081168084526004880190925260408084205460018901549092168452909220549094509092506130bd908363ffffffff6138b116565b6001808601546001600160a01b0390811660009081526004880160205260408082209490945590861681529182209190915501613055565b50600183015461310f9085906001600160a01b0316613117565b505050505050565b600082815260016020818152604080842081516101208101835281548152938101546001600160a01b03168484015260028101548483015260038101805483518186028101860190945280845286959294613200948693606086019391929091908301828280156109e8576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109ca575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a09091015261303e565b613213575061c3a09150600090506132d1565b6008810154610100900460ff16613233575061c3649150600090506132d1565b6001600160a01b03841660009081526004820160209081526040808320805490849055918390529091205461326e908263ffffffff6138b116565b6001600160a01b0386166000818152602081815260409182902093909355805189815292830191909152818101839052517faafcd902e5217659ba924addbacae78ebf6a7c77409df0d0065b9ebca01298739181900360600190a1600093509150505b9250929050565b60018101546001600160a01b0316600090815260048201602052604081205490805b836005015481101561335a5761335084600401600086600301848154811061331e57fe5b60009182526020808320909101546001600160a01b03168352820192909252604001902054839063ffffffff6138b116565b91506001016132fa565b81156133845760018401546001600160a01b031660009081526004850160205260408120556133a0565b600184015461339d9086906001600160a01b0316613117565b50505b50600080805b8560050154831015613478578560030183815481106133c157fe5b6000918252602090912001546001600160a01b031691508315613423576001600160a01b038216600090815260048701602052604090205461341c90859061341090889063ffffffff61390b16565b9063ffffffff61396416565b9050613427565b5060005b6001600160a01b0382166000908152600487016020526040902054613452908263ffffffff6138b116565b6001600160a01b03831660009081526004880160205260409020556001909201916133a6565b600092505b60038601548310156134c65785600301838154811061349857fe5b6000918252602090912001546001600160a01b031691506134b98783613117565b505082600101925061347d565b50505050505050565b600082821115613526576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600081815260016020818152604080842081516101208101835281548152938101546001600160a01b03168484015260028101548483015260038101805483518186028101860190945280845291946136129490938693606086019391928301828280156109e8576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109ca575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a09091015261303e565b61364a576040805184815261c3a060208201528151600080516020613a16833981519152929181900390910190a1600091505061093b565b6008810154610100900460ff168061366c5750600881015462010000900460ff165b156136a5576040805184815261c3b460208201528151600080516020613a16833981519152929181900390910190a1600091505061093b565b600881015460ff16156136e6576040805184815261c3aa60208201528151600080516020613a16833981519152929181900390910190a1600091505061093b565b6003810154600582015410156138a857600380546001830154600584015492840180546000946001600160a01b039485169463d1daeede948a94911692909190811061372e57fe5b6000918252602080832090910154604080516001600160e01b031960e089901b16815260048101969096526001600160a01b0394851660248701529316604485015291516064808501949192918390030190829087803b15801561379157600080fd5b505af11580156137a5573d6000803e3d6000fd5b505050506040513d60208110156137bb57600080fd5b50516005830154600384018054929350839260068601926000929181106137de57fe5b60009182526020808320909101546001600160a01b039081168452908301939093526040909101902091909155600183015460058401546003850180547f6d3b2a0e9b0833bfb42336839231773ea07aed87bb2fdee34c960696ea11f849948994169290811061384a57fe5b60009182526020918290200154604080519485526001600160a01b0393841692850192909252919091168282015260608201849052519081900360800190a15060088101805460ff1916600190811790915560058201805490910190555b50600192915050565b600082820183811015612ca8576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008261391a57506000611165565b8282028284828161392757fe5b0414612ca85760405162461bcd60e51b8152600401808060200182810382526021815260200180613a366021913960400191505060405180910390fd5b60008082116139ba576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b60008284816139c557fe5b04949350505050565b8154818355818111156139f2576000838152602090206139f29181019083016139f7565b505050565b6108ca91905b80821115613a1157600081556001016139fd565b509056fe94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa33536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a265627a7a72305820b4a49fa326e6214f14ee9cfabe7960105ad8ad9e9350c088052b77d8788dce9364736f6c634300050a0032";

    public static final String FUNC_RESPONDLASTBLOCKHEADERCOST = "respondLastBlockHeaderCost";

    public static final String FUNC_SUPERBLOCKTIMEOUT = "superblockTimeout";

    public static final String FUNC_SUPERBLOCKCONFIRMATIONS = "superblockConfirmations";

    public static final String FUNC_TRUSTEDSYSCOINBATTLEMANAGER = "trustedSyscoinBattleManager";

    public static final String FUNC_WITHDRAWDEPOSIT = "withdrawDeposit";

    public static final String FUNC_MAKEDEPOSIT = "makeDeposit";

    public static final String FUNC_MINPROPOSALDEPOSIT = "minProposalDeposit";

    public static final String FUNC_SUPERBLOCKDELAY = "superblockDelay";

    public static final String FUNC_SUPERBLOCKCOST = "superblockCost";

    public static final String FUNC_MINCHALLENGEDEPOSIT = "minChallengeDeposit";

    public static final String FUNC_TRUSTEDSUPERBLOCKS = "trustedSuperblocks";

    public static final String FUNC_RESPONDMERKLEROOTHASHESCOST = "respondMerkleRootHashesCost";

    public static final String FUNC_BATTLEREWARD = "battleReward";

    public static final String FUNC_MINREWARD = "minReward";

    public static final String FUNC_VERIFYSUPERBLOCKCOST = "verifySuperblockCost";

    public static final String FUNC_CHALLENGECOST = "challengeCost";

    public static final String FUNC_CLAIMS = "claims";

    public static final String FUNC_DEPOSITS = "deposits";

    public static final String FUNC_BONDDEPOSIT = "bondDeposit";

    public static final String FUNC_GETBONDEDDEPOSIT = "getBondedDeposit";

    public static final String FUNC_GETDEPOSIT = "getDeposit";

    public static final String FUNC_PROPOSESUPERBLOCK = "proposeSuperblock";

    public static final String FUNC_CHALLENGESUPERBLOCK = "challengeSuperblock";

    public static final String FUNC_CHECKCLAIMFINISHED = "checkClaimFinished";

    public static final String FUNC_CONFIRMCLAIM = "confirmClaim";

    public static final String FUNC_REJECTCLAIM = "rejectClaim";

    public static final String FUNC_SESSIONDECIDED = "sessionDecided";

    public static final String FUNC_GETINBATTLEANDSEMIAPPROVABLE = "getInBattleAndSemiApprovable";

    public static final String FUNC_GETCLAIMSUBMITTER = "getClaimSubmitter";

    public static final String FUNC_GETNEWSUPERBLOCKEVENTTIMESTAMP = "getNewSuperblockEventTimestamp";

    public static final String FUNC_GETCLAIMEXISTS = "getClaimExists";

    public static final String FUNC_GETCLAIMDECIDED = "getClaimDecided";

    public static final String FUNC_GETCLAIMINVALID = "getClaimInvalid";

    public static final String FUNC_GETCLAIMVERIFICATIONONGOING = "getClaimVerificationOngoing";

    public static final String FUNC_GETCLAIMCHALLENGETIMEOUT = "getClaimChallengeTimeout";

    public static final String FUNC_GETCLAIMREMAININGCHALLENGERS = "getClaimRemainingChallengers";

    public static final String FUNC_GETSESSION = "getSession";

    public static final String FUNC_GETCLAIMCHALLENGERS = "getClaimChallengers";

    public static final Event DEPOSITBONDED_EVENT = new Event("DepositBonded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DEPOSITUNBONDED_EVENT = new Event("DepositUnbonded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SUPERBLOCKCLAIMCREATED_EVENT = new Event("SuperblockClaimCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUPERBLOCKCLAIMCHALLENGED_EVENT = new Event("SuperblockClaimChallenged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUPERBLOCKBATTLEDECIDED_EVENT = new Event("SuperblockBattleDecided", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUPERBLOCKCLAIMSUCCESSFUL_EVENT = new Event("SuperblockClaimSuccessful", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUPERBLOCKCLAIMPENDING_EVENT = new Event("SuperblockClaimPending", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUPERBLOCKCLAIMFAILED_EVENT = new Event("SuperblockClaimFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event VERIFICATIONGAMESTARTED_EVENT = new Event("VerificationGameStarted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event ERRORCLAIM_EVENT = new Event("ErrorClaim", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DEPOSITMADE_EVENT = new Event("DepositMade", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DEPOSITWITHDRAWN_EVENT = new Event("DepositWithdrawn", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("4", "0x5d46423355191AE956B6A744eF0065f3f879AC01");
    }

    @Deprecated
    protected SyscoinClaimManager(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SyscoinClaimManager(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SyscoinClaimManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SyscoinClaimManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Uint256> respondLastBlockHeaderCost() {
        final Function function = new Function(FUNC_RESPONDLASTBLOCKHEADERCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> superblockTimeout() {
        final Function function = new Function(FUNC_SUPERBLOCKTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> superblockConfirmations() {
        final Function function = new Function(FUNC_SUPERBLOCKCONFIRMATIONS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Address> trustedSyscoinBattleManager() {
        final Function function = new Function(FUNC_TRUSTEDSYSCOINBATTLEMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> withdrawDeposit(Uint256 amount) {
        final Function function = new Function(
                FUNC_WITHDRAWDEPOSIT, 
                Arrays.<Type>asList(amount), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> makeDeposit(BigInteger weiValue) {
        final Function function = new Function(
                FUNC_MAKEDEPOSIT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<Uint256> minProposalDeposit() {
        final Function function = new Function(FUNC_MINPROPOSALDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> superblockDelay() {
        final Function function = new Function(FUNC_SUPERBLOCKDELAY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> superblockCost() {
        final Function function = new Function(FUNC_SUPERBLOCKCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minChallengeDeposit() {
        final Function function = new Function(FUNC_MINCHALLENGEDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Address> trustedSuperblocks() {
        final Function function = new Function(FUNC_TRUSTEDSUPERBLOCKS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> respondMerkleRootHashesCost() {
        final Function function = new Function(FUNC_RESPONDMERKLEROOTHASHESCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> battleReward() {
        final Function function = new Function(FUNC_BATTLEREWARD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minReward() {
        final Function function = new Function(FUNC_MINREWARD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> verifySuperblockCost() {
        final Function function = new Function(FUNC_VERIFYSUPERBLOCKCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> challengeCost() {
        final Function function = new Function(FUNC_CHALLENGECOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple8<Bytes32, Address, Uint256, Uint256, Uint256, Bool, Bool, Bool>> claims(Bytes32 param0) {
        final Function function = new Function(FUNC_CLAIMS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple8<Bytes32, Address, Uint256, Uint256, Uint256, Bool, Bool, Bool>>(
                new Callable<Tuple8<Bytes32, Address, Uint256, Uint256, Uint256, Bool, Bool, Bool>>() {
                    @Override
                    public Tuple8<Bytes32, Address, Uint256, Uint256, Uint256, Bool, Bool, Bool> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<Bytes32, Address, Uint256, Uint256, Uint256, Bool, Bool, Bool>(
                                (Bytes32) results.get(0), 
                                (Address) results.get(1), 
                                (Uint256) results.get(2), 
                                (Uint256) results.get(3), 
                                (Uint256) results.get(4), 
                                (Bool) results.get(5), 
                                (Bool) results.get(6), 
                                (Bool) results.get(7));
                    }
                });
    }

    public RemoteCall<Uint256> deposits(Address param0) {
        final Function function = new Function(FUNC_DEPOSITS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public List<DepositBondedEventResponse> getDepositBondedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSITBONDED_EVENT, transactionReceipt);
        ArrayList<DepositBondedEventResponse> responses = new ArrayList<DepositBondedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositBondedEventResponse typedResponse = new DepositBondedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.account = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositBondedEventResponse> depositBondedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DepositBondedEventResponse>() {
            @Override
            public DepositBondedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSITBONDED_EVENT, log);
                DepositBondedEventResponse typedResponse = new DepositBondedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.account = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<DepositBondedEventResponse> depositBondedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITBONDED_EVENT));
        return depositBondedEventFlowable(filter);
    }

    public List<DepositUnbondedEventResponse> getDepositUnbondedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSITUNBONDED_EVENT, transactionReceipt);
        ArrayList<DepositUnbondedEventResponse> responses = new ArrayList<DepositUnbondedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositUnbondedEventResponse typedResponse = new DepositUnbondedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.account = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositUnbondedEventResponse> depositUnbondedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DepositUnbondedEventResponse>() {
            @Override
            public DepositUnbondedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSITUNBONDED_EVENT, log);
                DepositUnbondedEventResponse typedResponse = new DepositUnbondedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.account = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<DepositUnbondedEventResponse> depositUnbondedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITUNBONDED_EVENT));
        return depositUnbondedEventFlowable(filter);
    }

    public List<SuperblockClaimCreatedEventResponse> getSuperblockClaimCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKCLAIMCREATED_EVENT, transactionReceipt);
        ArrayList<SuperblockClaimCreatedEventResponse> responses = new ArrayList<SuperblockClaimCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimCreatedEventResponse typedResponse = new SuperblockClaimCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockClaimCreatedEventResponse> superblockClaimCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SuperblockClaimCreatedEventResponse>() {
            @Override
            public SuperblockClaimCreatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKCLAIMCREATED_EVENT, log);
                SuperblockClaimCreatedEventResponse typedResponse = new SuperblockClaimCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockClaimCreatedEventResponse> superblockClaimCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKCLAIMCREATED_EVENT));
        return superblockClaimCreatedEventFlowable(filter);
    }

    public List<SuperblockClaimChallengedEventResponse> getSuperblockClaimChallengedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKCLAIMCHALLENGED_EVENT, transactionReceipt);
        ArrayList<SuperblockClaimChallengedEventResponse> responses = new ArrayList<SuperblockClaimChallengedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimChallengedEventResponse typedResponse = new SuperblockClaimChallengedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockClaimChallengedEventResponse> superblockClaimChallengedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SuperblockClaimChallengedEventResponse>() {
            @Override
            public SuperblockClaimChallengedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKCLAIMCHALLENGED_EVENT, log);
                SuperblockClaimChallengedEventResponse typedResponse = new SuperblockClaimChallengedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockClaimChallengedEventResponse> superblockClaimChallengedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKCLAIMCHALLENGED_EVENT));
        return superblockClaimChallengedEventFlowable(filter);
    }

    public List<SuperblockBattleDecidedEventResponse> getSuperblockBattleDecidedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKBATTLEDECIDED_EVENT, transactionReceipt);
        ArrayList<SuperblockBattleDecidedEventResponse> responses = new ArrayList<SuperblockBattleDecidedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockBattleDecidedEventResponse typedResponse = new SuperblockBattleDecidedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.winner = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse.loser = (Address) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockBattleDecidedEventResponse> superblockBattleDecidedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SuperblockBattleDecidedEventResponse>() {
            @Override
            public SuperblockBattleDecidedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKBATTLEDECIDED_EVENT, log);
                SuperblockBattleDecidedEventResponse typedResponse = new SuperblockBattleDecidedEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.winner = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse.loser = (Address) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockBattleDecidedEventResponse> superblockBattleDecidedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKBATTLEDECIDED_EVENT));
        return superblockBattleDecidedEventFlowable(filter);
    }

    public List<SuperblockClaimSuccessfulEventResponse> getSuperblockClaimSuccessfulEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKCLAIMSUCCESSFUL_EVENT, transactionReceipt);
        ArrayList<SuperblockClaimSuccessfulEventResponse> responses = new ArrayList<SuperblockClaimSuccessfulEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimSuccessfulEventResponse typedResponse = new SuperblockClaimSuccessfulEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockClaimSuccessfulEventResponse> superblockClaimSuccessfulEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SuperblockClaimSuccessfulEventResponse>() {
            @Override
            public SuperblockClaimSuccessfulEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKCLAIMSUCCESSFUL_EVENT, log);
                SuperblockClaimSuccessfulEventResponse typedResponse = new SuperblockClaimSuccessfulEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockClaimSuccessfulEventResponse> superblockClaimSuccessfulEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKCLAIMSUCCESSFUL_EVENT));
        return superblockClaimSuccessfulEventFlowable(filter);
    }

    public List<SuperblockClaimPendingEventResponse> getSuperblockClaimPendingEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKCLAIMPENDING_EVENT, transactionReceipt);
        ArrayList<SuperblockClaimPendingEventResponse> responses = new ArrayList<SuperblockClaimPendingEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimPendingEventResponse typedResponse = new SuperblockClaimPendingEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockClaimPendingEventResponse> superblockClaimPendingEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SuperblockClaimPendingEventResponse>() {
            @Override
            public SuperblockClaimPendingEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKCLAIMPENDING_EVENT, log);
                SuperblockClaimPendingEventResponse typedResponse = new SuperblockClaimPendingEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockClaimPendingEventResponse> superblockClaimPendingEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKCLAIMPENDING_EVENT));
        return superblockClaimPendingEventFlowable(filter);
    }

    public List<SuperblockClaimFailedEventResponse> getSuperblockClaimFailedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKCLAIMFAILED_EVENT, transactionReceipt);
        ArrayList<SuperblockClaimFailedEventResponse> responses = new ArrayList<SuperblockClaimFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimFailedEventResponse typedResponse = new SuperblockClaimFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockClaimFailedEventResponse> superblockClaimFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SuperblockClaimFailedEventResponse>() {
            @Override
            public SuperblockClaimFailedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKCLAIMFAILED_EVENT, log);
                SuperblockClaimFailedEventResponse typedResponse = new SuperblockClaimFailedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockClaimFailedEventResponse> superblockClaimFailedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKCLAIMFAILED_EVENT));
        return superblockClaimFailedEventFlowable(filter);
    }

    public List<VerificationGameStartedEventResponse> getVerificationGameStartedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VERIFICATIONGAMESTARTED_EVENT, transactionReceipt);
        ArrayList<VerificationGameStartedEventResponse> responses = new ArrayList<VerificationGameStartedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VerificationGameStartedEventResponse typedResponse = new VerificationGameStartedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(2);
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(3);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VerificationGameStartedEventResponse> verificationGameStartedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, VerificationGameStartedEventResponse>() {
            @Override
            public VerificationGameStartedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VERIFICATIONGAMESTARTED_EVENT, log);
                VerificationGameStartedEventResponse typedResponse = new VerificationGameStartedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(2);
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(3);
                return typedResponse;
            }
        });
    }

    public Flowable<VerificationGameStartedEventResponse> verificationGameStartedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VERIFICATIONGAMESTARTED_EVENT));
        return verificationGameStartedEventFlowable(filter);
    }

    public List<ErrorClaimEventResponse> getErrorClaimEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ERRORCLAIM_EVENT, transactionReceipt);
        ArrayList<ErrorClaimEventResponse> responses = new ArrayList<ErrorClaimEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorClaimEventResponse typedResponse = new ErrorClaimEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ErrorClaimEventResponse> errorClaimEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ErrorClaimEventResponse>() {
            @Override
            public ErrorClaimEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ERRORCLAIM_EVENT, log);
                ErrorClaimEventResponse typedResponse = new ErrorClaimEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ErrorClaimEventResponse> errorClaimEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ERRORCLAIM_EVENT));
        return errorClaimEventFlowable(filter);
    }

    public List<DepositMadeEventResponse> getDepositMadeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSITMADE_EVENT, transactionReceipt);
        ArrayList<DepositMadeEventResponse> responses = new ArrayList<DepositMadeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositMadeEventResponse typedResponse = new DepositMadeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositMadeEventResponse> depositMadeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DepositMadeEventResponse>() {
            @Override
            public DepositMadeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSITMADE_EVENT, log);
                DepositMadeEventResponse typedResponse = new DepositMadeEventResponse();
                typedResponse.log = log;
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<DepositMadeEventResponse> depositMadeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITMADE_EVENT));
        return depositMadeEventFlowable(filter);
    }

    public List<DepositWithdrawnEventResponse> getDepositWithdrawnEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSITWITHDRAWN_EVENT, transactionReceipt);
        ArrayList<DepositWithdrawnEventResponse> responses = new ArrayList<DepositWithdrawnEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositWithdrawnEventResponse typedResponse = new DepositWithdrawnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositWithdrawnEventResponse> depositWithdrawnEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DepositWithdrawnEventResponse>() {
            @Override
            public DepositWithdrawnEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSITWITHDRAWN_EVENT, log);
                DepositWithdrawnEventResponse typedResponse = new DepositWithdrawnEventResponse();
                typedResponse.log = log;
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<DepositWithdrawnEventResponse> depositWithdrawnEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITWITHDRAWN_EVENT));
        return depositWithdrawnEventFlowable(filter);
    }

    public RemoteCall<TransactionReceipt> bondDeposit(Bytes32 superblockHash, Address account, Uint256 amount) {
        final Function function = new Function(
                FUNC_BONDDEPOSIT, 
                Arrays.<Type>asList(superblockHash, account, amount), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Uint256> getBondedDeposit(Bytes32 superblockHash, Address account) {
        final Function function = new Function(FUNC_GETBONDEDDEPOSIT, 
                Arrays.<Type>asList(superblockHash, account), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getDeposit(Address account) {
        final Function function = new Function(FUNC_GETDEPOSIT, 
                Arrays.<Type>asList(account), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> proposeSuperblock(Bytes32 _blocksMerkleRoot, Uint256 _accumulatedWork, Uint256 _timestamp, Bytes32 _lastHash, Uint32 _lastBits, Bytes32 _parentHash) {
        final Function function = new Function(
                FUNC_PROPOSESUPERBLOCK, 
                Arrays.<Type>asList(_blocksMerkleRoot, _accumulatedWork, _timestamp, _lastHash, _lastBits, _parentHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> challengeSuperblock(Bytes32 superblockHash) {
        final Function function = new Function(
                FUNC_CHALLENGESUPERBLOCK, 
                Arrays.<Type>asList(superblockHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> checkClaimFinished(Bytes32 superblockHash) {
        final Function function = new Function(
                FUNC_CHECKCLAIMFINISHED, 
                Arrays.<Type>asList(superblockHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> confirmClaim(Bytes32 superblockHash, Bytes32 descendantId) {
        final Function function = new Function(
                FUNC_CONFIRMCLAIM, 
                Arrays.<Type>asList(superblockHash, descendantId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> rejectClaim(Bytes32 superblockHash) {
        final Function function = new Function(
                FUNC_REJECTCLAIM, 
                Arrays.<Type>asList(superblockHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> sessionDecided(Bytes32 sessionId, Bytes32 superblockHash, Address winner, Address loser) {
        final Function function = new Function(
                FUNC_SESSIONDECIDED, 
                Arrays.<Type>asList(sessionId, superblockHash, winner, loser), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Bool> getInBattleAndSemiApprovable(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETINBATTLEANDSEMIAPPROVABLE, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Address> getClaimSubmitter(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMSUBMITTER, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getNewSuperblockEventTimestamp(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETNEWSUPERBLOCKEVENTTIMESTAMP, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> getClaimExists(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMEXISTS, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> getClaimDecided(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMDECIDED, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> getClaimInvalid(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMINVALID, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> getClaimVerificationOngoing(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMVERIFICATIONONGOING, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getClaimChallengeTimeout(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMCHALLENGETIMEOUT, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getClaimRemainingChallengers(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMREMAININGCHALLENGERS, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSession(Bytes32 superblockHash, Address challenger) {
        final Function function = new Function(FUNC_GETSESSION, 
                Arrays.<Type>asList(superblockHash, challenger), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Address>> getClaimChallengers(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMCHALLENGERS, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    @Deprecated
    public static SyscoinClaimManager load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SyscoinClaimManager(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SyscoinClaimManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SyscoinClaimManager(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SyscoinClaimManager load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SyscoinClaimManager(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SyscoinClaimManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SyscoinClaimManager(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SyscoinClaimManager> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, Address _superblocks, Address _syscoinBattleManager, Uint256 _superblockDelay, Uint256 _superblockTimeout, Uint256 _superblockConfirmations, Uint256 _battleReward) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_superblocks, _syscoinBattleManager, _superblockDelay, _superblockTimeout, _superblockConfirmations, _battleReward));
        return deployRemoteCall(SyscoinClaimManager.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<SyscoinClaimManager> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, Address _superblocks, Address _syscoinBattleManager, Uint256 _superblockDelay, Uint256 _superblockTimeout, Uint256 _superblockConfirmations, Uint256 _battleReward) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_superblocks, _syscoinBattleManager, _superblockDelay, _superblockTimeout, _superblockConfirmations, _battleReward));
        return deployRemoteCall(SyscoinClaimManager.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SyscoinClaimManager> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, Address _superblocks, Address _syscoinBattleManager, Uint256 _superblockDelay, Uint256 _superblockTimeout, Uint256 _superblockConfirmations, Uint256 _battleReward) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_superblocks, _syscoinBattleManager, _superblockDelay, _superblockTimeout, _superblockConfirmations, _battleReward));
        return deployRemoteCall(SyscoinClaimManager.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SyscoinClaimManager> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, Address _superblocks, Address _syscoinBattleManager, Uint256 _superblockDelay, Uint256 _superblockTimeout, Uint256 _superblockConfirmations, Uint256 _battleReward) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_superblocks, _syscoinBattleManager, _superblockDelay, _superblockTimeout, _superblockConfirmations, _battleReward));
        return deployRemoteCall(SyscoinClaimManager.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class DepositBondedEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address account;

        public Uint256 amount;
    }

    public static class DepositUnbondedEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address account;

        public Uint256 amount;
    }

    public static class SuperblockClaimCreatedEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address submitter;
    }

    public static class SuperblockClaimChallengedEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address challenger;
    }

    public static class SuperblockBattleDecidedEventResponse {
        public Log log;

        public Bytes32 sessionId;

        public Address winner;

        public Address loser;
    }

    public static class SuperblockClaimSuccessfulEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address submitter;
    }

    public static class SuperblockClaimPendingEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address submitter;
    }

    public static class SuperblockClaimFailedEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address submitter;
    }

    public static class VerificationGameStartedEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address submitter;

        public Address challenger;

        public Bytes32 sessionId;
    }

    public static class ErrorClaimEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Uint256 err;
    }

    public static class DepositMadeEventResponse {
        public Log log;

        public Address who;

        public Uint256 amount;
    }

    public static class DepositWithdrawnEventResponse {
        public Log log;

        public Address who;

        public Uint256 amount;
    }
}
