package org.sysethereum.agents.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.3.0.
 */
public class SyscoinClaimManager extends Contract {
    private static final String BINARY = "0x608060405234801561001057600080fd5b5060405160c0806139c983398101604090815281516020830151918301516060840151608085015160a09095015160028054600160a060020a03958616600160a060020a031991821617909155600380549590961694169390931790935560065560079190915560049190915560055561393a8061008f6000396000f3006080604052600436106101d75763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663032e558781146101e2578063040aa57a1461024a5780630ac0d9c9146102795780630d5f5d691461029157806313be4f9e146102a95780631797e5e9146102c157806318b011de146102e857806327b425a6146102fd57806329118a9b14610312578063329af83f1461033657806333289a46146103675780633352f1a41461037f57806340732c891461039757806343207e631461039f578063455e6166146103b757806355e4286b146103cc57806357872488146103fd57806359f5f7aa146104125780635bf7d5db1461043f57806361bd8d66146104575780636ca640a11461046c578063748a00e21461048157806390a14aea146104b057806390b6f699146104c55780639c57588f146104da5780639e84477d146104fe578063a8b4633f14610513578063ba16d6001461052b578063bf0e1edb14610540578063c2569e5a14610558578063c3d3290f1461057f578063c44205e314610597578063d035c403146105af578063dac1d764146105c4578063e1254fba146105dc578063eda1970b146105fd578063eff0f59214610612578063fc7e286d14610679575b6101df61069a565b50005b3480156101ee57600080fd5b506101fa6004356106bb565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561023657818101518382015260200161021e565b505050509050019250505060405180910390f35b34801561025657600080fd5b5061026560043560243561072d565b604080519115158252519081900360200190f35b34801561028557600080fd5b50610265600435610f9a565b34801561029d57600080fd5b50610265600435611085565b3480156102b557600080fd5b5061026560043561109d565b3480156102cd57600080fd5b506102d6611669565b60408051918252519081900360200190f35b3480156102f457600080fd5b506102d661166f565b34801561030957600080fd5b506102d6611675565b34801561031e57600080fd5b506102d6600435600160a060020a036024351661167b565b34801561034257600080fd5b5061034b611790565b60408051600160a060020a039092168252519081900360200190f35b34801561037357600080fd5b506102d660043561179f565b34801561038b57600080fd5b5061026560043561186a565b6102d661069a565b3480156103ab57600080fd5b506102d6600435611e95565b3480156103c357600080fd5b506102d6611eb2565b3480156103d857600080fd5b506103e4600435611ebe565b6040805192835260208301919091528051918290030190f35b34801561040957600080fd5b506102d661233f565b34801561041e57600080fd5b506103e460043560243560443560643560843563ffffffff60a43516612345565b34801561044b57600080fd5b5061034b60043561295b565b34801561046357600080fd5b506102d661297a565b34801561047857600080fd5b506102d6612981565b34801561048d57600080fd5b506104ae600435602435600160a060020a036044358116906064351661298d565b005b3480156104bc57600080fd5b5061034b612b50565b3480156104d157600080fd5b506102d6612b5f565b3480156104e657600080fd5b506102d6600435600160a060020a0360243516612b66565b34801561050a57600080fd5b506102d6612b92565b34801561051f57600080fd5b50610265600435612b98565b34801561053757600080fd5b506102d6612c82565b34801561054c57600080fd5b506102d6600435612c8e565b34801561056457600080fd5b506102d6600435600160a060020a0360243516604435612ca3565b34801561058b57600080fd5b506102d6600435612eb5565b3480156105a357600080fd5b50610265600435612eca565b3480156105bb57600080fd5b506102d6612ee7565b3480156105d057600080fd5b50610265600435612eee565b3480156105e857600080fd5b506102d6600160a060020a0360043516612f0c565b34801561060957600080fd5b506102d6612f27565b34801561061e57600080fd5b5061062a600435612f2d565b60408051988952600160a060020a0390971660208901528787019590955260608701939093526080860191909152151560a0850152151560c0840152151560e083015251908190036101000190f35b34801561068557600080fd5b506102d6600160a060020a0360043516612f83565b60006106a63334612f95565b50336000908152602081905260409020545b90565b600081815260016020908152604091829020600381018054845181850281018501909552808552606094929383018282801561072057602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610702575b5050505050915050919050565b60008181526001602081905260408220829190849083806060815b858b146109da576040805161012081018252865481526001870154600160a060020a031660208083019190915260028801548284015260038801805484518184028101840190955280855261082b948a9360608601939192908301828280156107da57602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116107bc575b5050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613018565b151561086457604080518c815261c3a0602082015281516000805160206138ef833981519152929181900390910190a160009850610f8c565b6002546040805160e160020a6365702c0f028152600481018990529051600392600160a060020a03169163cae0581e9160248083019260209291908290030181600087803b1580156108b557600080fd5b505af11580156108c9573d6000803e3d6000fd5b505050506040513d60208110156108df57600080fd5b505160058111156108ec57fe5b1461092457604080518c815261c364602082015281516000805160206138ef833981519152929181900390910190a160009850610f8c565b868015610935575060038501546000105b1561093f57600096505b6002546040805160e160020a632af00c67028152600481018990529051600160a060020a03909216916355e018ce916024808201926020929091908290030181600087803b15801561099057600080fd5b505af11580156109a4573d6000803e3d6000fd5b505050506040513d60208110156109ba57600080fd5b505160008181526001602081905260409091209901989096509450610748565b600454881015610a1757604080518c815261c3dc602082015281516000805160206138ef833981519152929181900390910190a160009850610f8c565b6002546040805160e160020a6365702c0f028152600481018990529051600392600160a060020a03169163cae0581e9160248083019260209291908290030181600087803b158015610a6857600080fd5b505af1158015610a7c573d6000803e3d6000fd5b505050506040513d6020811015610a9257600080fd5b50516005811115610a9f57fe5b14610ad757604080518c815261c364602082015281516000805160206138ef833981519152929181900390910190a160009850610f8c565b6002546040805160e160020a632af00c67028152600481018e90529051600160a060020a03909216916355e018ce916024808201926020929091908290030181600087803b158015610b2857600080fd5b505af1158015610b3c573d6000803e3d6000fd5b505050506040513d6020811015610b5257600080fd5b5051935060046002546040805160e160020a6365702c0f028152600481018890529051600160a060020a039092169163cae0581e916024808201926020929091908290030181600087803b158015610ba957600080fd5b505af1158015610bbd573d6000803e3d6000fd5b505050506040513d6020811015610bd357600080fd5b50516005811115610be057fe5b14610c1857604080518c815261c364602082015281516000805160206138ef833981519152929181900390910190a160009850610f8c565b600254604080517f95b45ee7000000000000000000000000000000000000000000000000000000008152600481018e90523360248201529051600160a060020a03909216916395b45ee7916044808201926020929091908290030181600087803b158015610c8557600080fd5b505af1158015610c99573d6000803e3d6000fd5b505050506040513d6020811015610caf57600080fd5b505192508215610ceb57604080518c81526020810185905281516000805160206138ef833981519152929181900390910190a160009850610f8c565b6001850154604080518d8152600160a060020a03909216602083015280517fd2d92ada663f6bc7872c4132f968080a631f3d0faa9310ba1c86d1c54e470b289281900390910190a1610d3d8b8661302a565b6001850154610d56908c90600160a060020a03166130f2565b50508615610f875787604051908082528060200260200182016040528015610d88578160200160208202803883390190505b509150899550600090505b858b14610e3857858282815181101515610da957fe5b60209081029091018101919091526002546040805160e160020a632af00c67028152600481018a90529051600160a060020a03909216926355e018ce926024808401938290030181600087803b158015610e0257600080fd5b505af1158015610e16573d6000803e3d6000fd5b505050506040513d6020811015610e2c57600080fd5b50519550600101610d93565b6000811115610f87576001810390508181815181101515610e5557fe5b6020908102909101810151600081815260018352604080822060025482517f95b45ee7000000000000000000000000000000000000000000000000000000008152600481018690523360248201529251949b50909950600160a060020a0316936395b45ee79360448084019492939192918390030190829087803b158015610edc57600080fd5b505af1158015610ef0573d6000803e3d6000fd5b505050506040513d6020811015610f0657600080fd5b505192508215610f1557600080fd5b600185015460408051888152600160a060020a03909216602083015280517fd2d92ada663f6bc7872c4132f968080a631f3d0faa9310ba1c86d1c54e470b289281900390910190a1610f67868661302a565b6001850154610f80908790600160a060020a03166130f2565b5050610e38565b600198505b505050505050505092915050565b60008181526001602081815260408084208151610120810183528154815293810154600160a060020a03168484015260028101548483015260038101805483518186028101860190945280845261107f959492936060860193909291908301828280156107da57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116107bc575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613018565b92915050565b60009081526001602052604090206008015460ff1690565b60008181526001602081815260408084208151610120810183528154815293810154600160a060020a0316848401526002810154848301526003810180548351818602810186019094528084529194869485948594611187948993606086019392908301828280156107da57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116107bc575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613018565b15156111c0576040805187815261c3a0602082015281516000805160206138ef833981519152929181900390910190a160009450611660565b600254604080517f2e400191000000000000000000000000000000000000000000000000000000008152600481018990529051600160a060020a0390921691632e400191916024808201926020929091908290030181600087803b15801561122757600080fd5b505af115801561123b573d6000803e3d6000fd5b505050506040513d602081101561125157600080fd5b5051600254604080517ff06d520d000000000000000000000000000000000000000000000000000000008152905163ffffffff9093169550600160a060020a039091169163f06d520d916004808201926020929091908290030181600087803b1580156112bd57600080fd5b505af11580156112d1573d6000803e3d6000fd5b505050506040513d60208110156112e757600080fd5b505160048054600254604080517f2e4001910000000000000000000000000000000000000000000000000000000081529384018590525193955090860192600160a060020a0390911691632e4001919160248083019260209291908290030181600087803b15801561135857600080fd5b505af115801561136c573d6000803e3d6000fd5b505050506040513d602081101561138257600080fd5b505163ffffffff1610156113c3576040805187815261c3dc602082015281516000805160206138ef833981519152929181900390910190a160009450611660565b600254604080517fc0dde98b000000000000000000000000000000000000000000000000000000008152600481018690529051600160a060020a039092169163c0dde98b916024808201926020929091908290030181600087803b15801561142a57600080fd5b505af115801561143e573d6000803e3d6000fd5b505050506040513d602081101561145457600080fd5b5051915085821461165b576002546040805160e160020a6365702c0f028152600481018990529051600160a060020a039092169163cae0581e916024808201926020929091908290030181600087803b1580156114b057600080fd5b505af11580156114c4573d6000803e3d6000fd5b505050506040513d60208110156114da57600080fd5b5051905060038160058111156114ec57fe5b14611524576040805187815261c364602082015281516000805160206138ef833981519152929181900390910190a160009450611660565b6008840154610100900460ff16151561156a576040805187815261c3b4602082015281516000805160206138ef833981519152929181900390910190a160009450611660565b600254604080517f74205786000000000000000000000000000000000000000000000000000000008152600481018990523360248201528151600160a060020a03909316926374205786926044808401939192918290030181600087803b1580156115d457600080fd5b505af11580156115e8573d6000803e3d6000fd5b505050506040513d60408110156115fe57600080fd5b5050600184015460408051888152600160a060020a03909216602083015280517f944668cff98bcc4e0c3851b8682999d1e5c0bf2b32e8e035d71db8f40fd0ded79281900390910190a161165286856132b6565b60019450611660565b600094505b50505050919050565b619c4081565b60075481565b60045481565b60008281526001602081815260408084208151610120810183528154815293810154600160a060020a03168484015260028101548483015260038101805483518186028101860190945280845291946117619490938693606086019391928301828280156107da57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116107bc575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613018565b151561176c57600080fd5b600160a060020a038316600090815260048201602052604090205491505092915050565b600354600160a060020a031681565b336000908152602081905260408120548211156117bb57600080fd5b336000908152602081905260409020546117db908363ffffffff6134af16565b33600081815260208190526040808220939093559151909184156108fc02918591818181858888f19350505050158015611819573d6000803e3d6000fd5b50604080513381526020810184905281517f4482101800a5c2e900f4156e57e05e19ffd7b366cde579553d723fd3abb2180e929181900390910190a150503360009081526020819052604090205490565b60008181526001602081815260408084208151610120810183528154815293810154600160a060020a0316848401526002810154848301526003810180548351818602810186019094528084529194869485948594611954948993606086019392908301828280156107da57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116107bc575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613018565b151561198d576040805187815261c3a0602082015281516000805160206138ef833981519152929181900390910190a160009450611660565b600884015460ff16156119cd576040805187815261c3aa602082015281516000805160206138ef833981519152929181900390910190a160009450611660565b600884015462010000900460ff1615611ae45760088401805461ff0019166101001790556002548454604080517f7420578600000000000000000000000000000000000000000000000000000000815260048101929092523360248301528051600160a060020a039093169263742057869260448082019392918290030181600087803b158015611a5d57600080fd5b505af1158015611a71573d6000803e3d6000fd5b505050506040513d6040811015611a8757600080fd5b5050600184015460408051888152600160a060020a03909216602083015280517f944668cff98bcc4e0c3851b8682999d1e5c0bf2b32e8e035d71db8f40fd0ded79281900390910190a1611adb86856132b6565b60009450611660565b60078401544211611b22576040805187815261c36e602082015281516000805160206138ef833981519152929181900390910190a160009450611660565b600384015460058501541015611b65576040805187815261c3aa602082015281516000805160206138ef833981519152929181900390910190a160009450611660565b60088401805461ff0019166101001790556003840154600093501515611c9f5760025484546040805160e160020a632af00c67028152600481019290925251600160a060020a03909216916355e018ce916024808201926020929091908290030181600087803b158015611bd857600080fd5b505af1158015611bec573d6000803e3d6000fd5b505050506040513d6020811015611c0257600080fd5b50516002546040805160e160020a6365702c0f028152600481018490529051929450600160a060020a039091169163cae0581e916024808201926020929091908290030181600087803b158015611c5857600080fd5b505af1158015611c6c573d6000803e3d6000fd5b505050506040513d6020811015611c8257600080fd5b505190506004816005811115611c9457fe5b1415611c9f57600192505b8215611da8576002548454604080517f95b45ee7000000000000000000000000000000000000000000000000000000008152600481019290925233602483015251600160a060020a03909216916395b45ee7916044808201926020929091908290030181600087803b158015611d1457600080fd5b505af1158015611d28573d6000803e3d6000fd5b505050506040513d6020811015611d3e57600080fd5b50506001840154611d59908790600160a060020a03166130f2565b5050600184015460408051888152600160a060020a03909216602083015280517fd2d92ada663f6bc7872c4132f968080a631f3d0faa9310ba1c86d1c54e470b289281900390910190a1611e89565b6002548454604080517f27426f7500000000000000000000000000000000000000000000000000000000815260048101929092523360248301528051600160a060020a03909316926327426f759260448082019392918290030181600087803b158015611e1457600080fd5b505af1158015611e28573d6000803e3d6000fd5b505050506040513d6040811015611e3e57600080fd5b5050600184015460408051888152600160a060020a03909216602083015280517f68c34be3e9c7221898bee267017dda5f7344326a8825b2d4427dfeaba0fa19299281900390910190a15b50600195945050505050565b600090815260016020526040902060058101546003909101540390565b670de0b6b3a76484d081565b6002546000908190819081908190600160a060020a03161515611ee057600080fd5b6000868152600160208181526040928390208351610120810185528154815292810154600160a060020a031683830152600281015483850152600381018054855181850281018501909652808652919750611fc89488936060860193919291908301828280156107da57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116107bc575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613018565b1515612005576040805187815261c3a0602082015281516000805160206138ef833981519152929181900390910190a161c3a08694509450612337565b6008830154610100900460ff161561204e576040805187815261c3b4602082015281516000805160206138ef833981519152929181900390910190a161c3b48694509450612337565b33600090815260208190526040902054670de0b6b3a76ab6c011156120a4576040805187815261c38c602082015281516000805160206138ef833981519152929181900390910190a161c38c8694509450612337565b600091505b600383015482101561212557600383018054339190849081106120c857fe5b600091825260209091200154600160a060020a0316141561211a576040805187815261c3be602082015281516000805160206138ef833981519152929181900390910190a161c3be8694509450612337565b8160010191506120a9565b600254604080517fc1f67ab3000000000000000000000000000000000000000000000000000000008152600481018990523360248201529051600160a060020a039092169163c1f67ab3916044808201926020929091908290030181600087803b15801561219257600080fd5b505af11580156121a6573d6000803e3d6000fd5b505050506040513d60208110156121bc57600080fd5b5051905080156121fb57604080518781526020810183905281516000805160206138ef833981519152929181900390910190a193506000925083612337565b600554604080517fc2569e5a00000000000000000000000000000000000000000000000000000000815260048101899052336024820152604481019290925251309163c2569e5a9160648083019260209291908290030181600087803b15801561226457600080fd5b505af1158015612278573d6000803e3d6000fd5b505050506040513d602081101561228e57600080fd5b50519050801561229a57fe5b60078054420190840155600383018054600181018255600091825260209182902001805473ffffffffffffffffffffffffffffffffffffffff191633908117909155604080518981529283019190915280517f4e4ec862758a1fd984d86a07836cbea0bb7aec069cc98cd7a543266b270e42e49281900390910190a1600883015460ff16151561232f5761232d866134c1565b505b600086945094505b505050915091565b60065481565b60025460009081908190819081908190600160a060020a0316151561236957600080fd5b33600090815260208190526040902054670de0b6b3a76484d011156123c157604080516000815261c38c602082015281516000805160206138ef833981519152929181900390910190a161c38c95506000945061294c565b426006548b01111561240657604080516000815261c373602082015281516000805160206138ef833981519152929181900390910190a161c37395506000945061294c565b600254604080517f9adcca18000000000000000000000000000000000000000000000000000000008152600481018f9052602481018e9052604481018d9052606481018c9052608481018b905263ffffffff8a1660a48201523360c48201528151600160a060020a0390931692639adcca189260e4808401939192918290030181600087803b15801561249857600080fd5b505af11580156124ac573d6000803e3d6000fd5b505050506040513d60408110156124c257600080fd5b5080516020909101519094509250831561250a57604080518481526020810186905281516000805160206138ef833981519152929181900390910190a183839550955061294c565b6000838152600160208181526040928390208351610120810185528154815292810154600160a060020a0316838301526002810154838501526003810180548551818502810185019096528086529196506125f29487936060860193919291908301828280156107da57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116107bc575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613018565b1561280f57600882015462010000900460ff16151560011480156126255750600882015460ff6101009091041615156001145b801561263e57506001820154600160a060020a03163314155b905080156128035760046002546040805160e160020a6365702c0f028152600481018c90529051600160a060020a039092169163cae0581e916024808201926020929091908290030181600087803b15801561269957600080fd5b505af11580156126ad573d6000803e3d6000fd5b505050506040513d60208110156126c357600080fd5b505160058111156126d057fe5b141561276957600254604080517ff06d520d00000000000000000000000000000000000000000000000000000000815290518a92600160a060020a03169163f06d520d9160048083019260209291908290030181600087803b15801561273557600080fd5b505af1158015612749573d6000803e3d6000fd5b505050506040513d602081101561275f57600080fd5b5051149050612803565b6002546040805160e160020a6365702c0f028152600481018b90529051600392600160a060020a03169163cae0581e9160248083019260209291908290030181600087803b1580156127ba57600080fd5b505af11580156127ce573d6000803e3d6000fd5b505050506040513d60208110156127e457600080fd5b505160058111156127f157fe5b14156127ff57506001612803565b5060005b80151561280f57600080fd5b82825560018201805473ffffffffffffffffffffffffffffffffffffffff19163317905560006005830181905560088301805462ffffff191690554260028401819055600780549091019084015561286a60038401826138a7565b50600554604080517fc2569e5a00000000000000000000000000000000000000000000000000000000815260048101869052336024820152604481019290925251309163c2569e5a9160648083019260209291908290030181600087803b1580156128d457600080fd5b505af11580156128e8573d6000803e3d6000fd5b505050506040513d60208110156128fe57600080fd5b50519350831561290a57fe5b6040805184815233602082015281517fb3a62becdc21cd20cda5d5537311e57b217d497022fa1d6fa233fe5d736011ad929181900390910190a1600083955095505b50505050965096945050505050565b60009081526001602081905260409091200154600160a060020a031690565b6206b6c081565b670de0b6b3a76ab6c081565b600354600090600160a060020a031633146129a757600080fd5b506000838152600160208181526040928390208351610120810185528154815292810154600160a060020a0316838301526002810154838501526003810180548551818502810185019096528086529194612a8d949386936060860193918301828280156107da57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116107bc575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613018565b1515612a9857600080fd5b60088101805460ff191690556001810154600160a060020a0383811691161415612ad45760088101805462ff0000191662010000179055612b00565b6001810154600160a060020a0384811691161415612afb57612af5846134c1565b50612b00565b600080fd5b60408051868152600160a060020a03808616602083015284168183015290517f1a6e323d263407d13632ff217899ae9353a07223d311df6db8d80cad6a57c2d59181900360600190a15050505050565b600254600160a060020a031681565b6205c49081565b6000828152600160209081526040808320600160a060020a038516845260060190915290205492915050565b60055481565b6000818152600160205260408120600280546040805160e160020a6365702c0f028152600481018790529051600160a060020a039092169163cae0581e916024808201926020929091908290030181600087803b158015612bf857600080fd5b505af1158015612c0c573d6000803e3d6000fd5b505050506040513d6020811015612c2257600080fd5b50516005811115612c2f57fe5b148015612c475750600881015462010000900460ff16155b8015612c585750600881015460ff16155b8015612c675750806007015442115b8015612c7b57506003810154600582015410155b9392505050565b670de0b6b3a764000081565b60009081526001602052604090206007015490565b6003546000908190600160a060020a0316331480612cc057503330145b1515612ccb57600080fd5b506000848152600160208181526040928390208351610120810185528154815292810154600160a060020a0316838301526002810154838501526003810180548551818502810185019096528086529194612db1949386936060860193918301828280156107da57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116107bc575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613018565b1515612dc15761c3a09150612ead565b600160a060020a038416600090815260208190526040902054831115612deb5761c38c9150612ead565b600160a060020a038416600090815260208190526040902054612e14908463ffffffff6134af16565b600160a060020a038516600090815260208181526040808320939093556004840190522054612e49908463ffffffff61385c16565b600160a060020a038516600081815260048401602090815260409182902093909355805188815292830191909152818101859052517ff49b89a01f8b7e79e855801f268b5df3d7c88c4bc61293934fc1f9c52ddfeb319181900360600190a1600091505b509392505050565b60009081526001602052604090206002015490565b600090815260016020526040902060080154610100900460ff1690565b62035b6081565b60009081526001602052604090206008015462010000900460ff1690565b600160a060020a031660009081526020819052604090205490565b6184d081565b6001602081905260009182526040909120805491810154600282015460058301546007840154600890940154600160a060020a0390931693919290919060ff808216916101008104821691620100009091041688565b60006020819052908152604090205481565b600160a060020a038216600090815260208190526040902054612fbe908263ffffffff61385c16565b600160a060020a0383166000818152602081815260409182902093909355805191825291810183905281517fd15c9547ea5c06670c0010ce19bc32d54682a4b3801ece7f3ab0c3f17106b4bb929181900390910190a15050565b60200151600160a060020a0316151590565b600080805b60038401548110156130d0576003840180548290811061304b57fe5b6000918252602080832090910154600160a060020a03908116808452600488019092526040808420546001890154909216845290922054909450909250613098908363ffffffff61385c16565b600180860154600160a060020a039081166000908152600488016020526040808220949094559086168152918220919091550161302f565b60018401546130e9908690600160a060020a03166130f2565b50505050505050565b60008281526001602081815260408084208151610120810183528154815293810154600160a060020a0316848401526002810154848301526003810180548351818602810186019094528084528695929486946131d99493879360608601938301828280156107da57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116107bc575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613018565b15156131ed5761c3a09350600092506132ad565b6008820154610100900460ff16151561320e5761c3649350600092506132ad565b50600160a060020a03841660009081526004820160209081526040808320805490849055918390529091205461324a908263ffffffff61385c16565b600160a060020a0386166000818152602081815260409182902093909355805189815292830191909152818101839052517faafcd902e5217659ba924addbacae78ebf6a7c77409df0d0065b9ebca01298739181900360600190a1600081935093505b50509250929050565b6001810154600160a060020a03166000908152600482016020526040812054908080805b856005015483101561333f57613332866004016000886003018681548110151561330057fe5b6000918252602080832090910154600160a060020a03168352820192909252604001902054859063ffffffff61385c16565b93508260010192506132da565b600084111561336c576001860154600160a060020a03166000908152600487016020526040812055613388565b6001860154613385908890600160a060020a03166130f2565b50505b600092505b856005015483101561346057600386018054849081106133a957fe5b6000918252602082200154600160a060020a0316925084111561340b57600160a060020a03821660009081526004870160205260409020546134049085906133f890889063ffffffff61386916565b9063ffffffff61389216565b905061340f565b5060005b600160a060020a038216600090815260048701602052604090205461343a908263ffffffff61385c16565b600160a060020a038316600090815260048801602052604090205560019092019161338d565b600092505b60038601548310156130e9576003860180548490811061348157fe5b600091825260209091200154600160a060020a031691506134a287836130f2565b5050826001019250613465565b6000828211156134bb57fe5b50900390565b60008181526001602081815260408084208151610120810183528154815293810154600160a060020a031684840152600281015484830152600381018054835181860281018601909452808452919486946135ab94919387936060860193929091908301828280156107da57602002820191906000526020600020908154600160a060020a031681526001909101906020018083116107bc575050509183525050600582015460208201526007820154604082015260089091015460ff8082161515606084015261010082048116151560808401526201000090910416151560a090910152613018565b15156135e4576040805185815261c3a0602082015281516000805160206138ef833981519152929181900390910190a160009250613855565b6008820154610100900460ff16806136065750600882015462010000900460ff165b1561363e576040805185815261c3b4602082015281516000805160206138ef833981519152929181900390910190a160009250613855565b600882015460ff161561367e576040805185815261c3aa602082015281516000805160206138ef833981519152929181900390910190a160009250613855565b6003820154600583015410156138505760038054600184015460058501549285018054600160a060020a039384169463d1daeede948a9416929181106136c057fe5b6000918252602080832090910154604080517c010000000000000000000000000000000000000000000000000000000063ffffffff89160281526004810196909652600160a060020a0394851660248701529316604485015291516064808501949192918390030190829087803b15801561373a57600080fd5b505af115801561374e573d6000803e3d6000fd5b505050506040513d602081101561376457600080fd5b505160058301546003840180549293508392600686019260009291811061378757fe5b6000918252602080832090910154600160a060020a039081168452908301939093526040909101902091909155600183015460058401546003850180547f6d3b2a0e9b0833bfb42336839231773ea07aed87bb2fdee34c960696ea11f84994899416929081106137f357fe5b6000918252602091829020015460408051948552600160a060020a0393841692850192909252919091168282015260608201849052519081900360800190a160088201805460ff1916600190811790915560058301805490910190555b600192505b5050919050565b8181018281101561107f57fe5b600082151561387a5750600061107f565b5081810281838281151561388a57fe5b041461107f57fe5b6000818381151561389f57fe5b049392505050565b8154818355818111156138cb576000838152602090206138cb9181019083016138d0565b505050565b6106b891905b808211156138ea57600081556001016138d6565b5090560094bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa33a165627a7a7230582076f5b0dbf1782b4342951bda2d2c0b521e925c1347082a58d184bbf0b6e765cf0029";

    public static final String FUNC_RESPONDLASTBLOCKHEADERCOST = "respondLastBlockHeaderCost";

    public static final String FUNC_SUPERBLOCKTIMEOUT = "superblockTimeout";

    public static final String FUNC_SUPERBLOCKCONFIRMATIONS = "superblockConfirmations";

    public static final String FUNC_TRUSTEDSYSCOINBATTLEMANAGER = "trustedSyscoinBattleManager";

    public static final String FUNC_WITHDRAWDEPOSIT = "withdrawDeposit";

    public static final String FUNC_MAKEDEPOSIT = "makeDeposit";

    public static final String FUNC_MINPROPOSALDEPOSIT = "minProposalDeposit";

    public static final String FUNC_SUPERBLOCKDELAY = "superblockDelay";

    public static final String FUNC_SUPERBLOCKCOST = "superblockCost";

    public static final String FUNC_MINCHALLENGEDEPOSIT = "minChallengeDeposit";

    public static final String FUNC_TRUSTEDSUPERBLOCKS = "trustedSuperblocks";

    public static final String FUNC_RESPONDMERKLEROOTHASHESCOST = "respondMerkleRootHashesCost";

    public static final String FUNC_BATTLEREWARD = "battleReward";

    public static final String FUNC_MINREWARD = "minReward";

    public static final String FUNC_VERIFYSUPERBLOCKCOST = "verifySuperblockCost";

    public static final String FUNC_CHALLENGECOST = "challengeCost";

    public static final String FUNC_CLAIMS = "claims";

    public static final String FUNC_DEPOSITS = "deposits";

    public static final String FUNC_BONDDEPOSIT = "bondDeposit";

    public static final String FUNC_GETBONDEDDEPOSIT = "getBondedDeposit";

    public static final String FUNC_GETDEPOSIT = "getDeposit";

    public static final String FUNC_PROPOSESUPERBLOCK = "proposeSuperblock";

    public static final String FUNC_CHALLENGESUPERBLOCK = "challengeSuperblock";

    public static final String FUNC_CHECKCLAIMFINISHED = "checkClaimFinished";

    public static final String FUNC_CONFIRMCLAIM = "confirmClaim";

    public static final String FUNC_REJECTCLAIM = "rejectClaim";

    public static final String FUNC_SESSIONDECIDED = "sessionDecided";

    public static final String FUNC_GETINBATTLEANDSEMIAPPROVABLE = "getInBattleAndSemiApprovable";

    public static final String FUNC_GETCLAIMSUBMITTER = "getClaimSubmitter";

    public static final String FUNC_GETNEWSUPERBLOCKEVENTTIMESTAMP = "getNewSuperblockEventTimestamp";

    public static final String FUNC_GETCLAIMEXISTS = "getClaimExists";

    public static final String FUNC_GETCLAIMDECIDED = "getClaimDecided";

    public static final String FUNC_GETCLAIMINVALID = "getClaimInvalid";

    public static final String FUNC_GETCLAIMVERIFICATIONONGOING = "getClaimVerificationOngoing";

    public static final String FUNC_GETCLAIMCHALLENGETIMEOUT = "getClaimChallengeTimeout";

    public static final String FUNC_GETCLAIMREMAININGCHALLENGERS = "getClaimRemainingChallengers";

    public static final String FUNC_GETSESSION = "getSession";

    public static final String FUNC_GETCLAIMCHALLENGERS = "getClaimChallengers";

    public static final Event DEPOSITBONDED_EVENT = new Event("DepositBonded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DEPOSITUNBONDED_EVENT = new Event("DepositUnbonded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SUPERBLOCKCLAIMCREATED_EVENT = new Event("SuperblockClaimCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUPERBLOCKCLAIMCHALLENGED_EVENT = new Event("SuperblockClaimChallenged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUPERBLOCKBATTLEDECIDED_EVENT = new Event("SuperblockBattleDecided", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUPERBLOCKCLAIMSUCCESSFUL_EVENT = new Event("SuperblockClaimSuccessful", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUPERBLOCKCLAIMPENDING_EVENT = new Event("SuperblockClaimPending", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUPERBLOCKCLAIMFAILED_EVENT = new Event("SuperblockClaimFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event VERIFICATIONGAMESTARTED_EVENT = new Event("VerificationGameStarted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event ERRORCLAIM_EVENT = new Event("ErrorClaim", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DEPOSITMADE_EVENT = new Event("DepositMade", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DEPOSITWITHDRAWN_EVENT = new Event("DepositWithdrawn", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("4", "0x01A90b769428a4433ac88Be1f59F6B1330Ef877c");
    }

    @Deprecated
    protected SyscoinClaimManager(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SyscoinClaimManager(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SyscoinClaimManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SyscoinClaimManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Uint256> respondLastBlockHeaderCost() {
        final Function function = new Function(FUNC_RESPONDLASTBLOCKHEADERCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> superblockTimeout() {
        final Function function = new Function(FUNC_SUPERBLOCKTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> superblockConfirmations() {
        final Function function = new Function(FUNC_SUPERBLOCKCONFIRMATIONS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Address> trustedSyscoinBattleManager() {
        final Function function = new Function(FUNC_TRUSTEDSYSCOINBATTLEMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> withdrawDeposit(Uint256 amount) {
        final Function function = new Function(
                FUNC_WITHDRAWDEPOSIT, 
                Arrays.<Type>asList(amount), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> makeDeposit(BigInteger weiValue) {
        final Function function = new Function(
                FUNC_MAKEDEPOSIT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<Uint256> minProposalDeposit() {
        final Function function = new Function(FUNC_MINPROPOSALDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> superblockDelay() {
        final Function function = new Function(FUNC_SUPERBLOCKDELAY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> superblockCost() {
        final Function function = new Function(FUNC_SUPERBLOCKCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minChallengeDeposit() {
        final Function function = new Function(FUNC_MINCHALLENGEDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Address> trustedSuperblocks() {
        final Function function = new Function(FUNC_TRUSTEDSUPERBLOCKS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> respondMerkleRootHashesCost() {
        final Function function = new Function(FUNC_RESPONDMERKLEROOTHASHESCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> battleReward() {
        final Function function = new Function(FUNC_BATTLEREWARD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> minReward() {
        final Function function = new Function(FUNC_MINREWARD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> verifySuperblockCost() {
        final Function function = new Function(FUNC_VERIFYSUPERBLOCKCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> challengeCost() {
        final Function function = new Function(FUNC_CHALLENGECOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple8<Bytes32, Address, Uint256, Uint256, Uint256, Bool, Bool, Bool>> claims(Bytes32 param0) {
        final Function function = new Function(FUNC_CLAIMS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple8<Bytes32, Address, Uint256, Uint256, Uint256, Bool, Bool, Bool>>(
                new Callable<Tuple8<Bytes32, Address, Uint256, Uint256, Uint256, Bool, Bool, Bool>>() {
                    @Override
                    public Tuple8<Bytes32, Address, Uint256, Uint256, Uint256, Bool, Bool, Bool> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<Bytes32, Address, Uint256, Uint256, Uint256, Bool, Bool, Bool>(
                                (Bytes32) results.get(0), 
                                (Address) results.get(1), 
                                (Uint256) results.get(2), 
                                (Uint256) results.get(3), 
                                (Uint256) results.get(4), 
                                (Bool) results.get(5), 
                                (Bool) results.get(6), 
                                (Bool) results.get(7));
                    }
                });
    }

    public RemoteCall<Uint256> deposits(Address param0) {
        final Function function = new Function(FUNC_DEPOSITS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public List<DepositBondedEventResponse> getDepositBondedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSITBONDED_EVENT, transactionReceipt);
        ArrayList<DepositBondedEventResponse> responses = new ArrayList<DepositBondedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositBondedEventResponse typedResponse = new DepositBondedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.account = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositBondedEventResponse> depositBondedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DepositBondedEventResponse>() {
            @Override
            public DepositBondedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSITBONDED_EVENT, log);
                DepositBondedEventResponse typedResponse = new DepositBondedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.account = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<DepositBondedEventResponse> depositBondedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITBONDED_EVENT));
        return depositBondedEventFlowable(filter);
    }

    public List<DepositUnbondedEventResponse> getDepositUnbondedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSITUNBONDED_EVENT, transactionReceipt);
        ArrayList<DepositUnbondedEventResponse> responses = new ArrayList<DepositUnbondedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositUnbondedEventResponse typedResponse = new DepositUnbondedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.account = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositUnbondedEventResponse> depositUnbondedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DepositUnbondedEventResponse>() {
            @Override
            public DepositUnbondedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSITUNBONDED_EVENT, log);
                DepositUnbondedEventResponse typedResponse = new DepositUnbondedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.account = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<DepositUnbondedEventResponse> depositUnbondedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITUNBONDED_EVENT));
        return depositUnbondedEventFlowable(filter);
    }

    public List<SuperblockClaimCreatedEventResponse> getSuperblockClaimCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKCLAIMCREATED_EVENT, transactionReceipt);
        ArrayList<SuperblockClaimCreatedEventResponse> responses = new ArrayList<SuperblockClaimCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimCreatedEventResponse typedResponse = new SuperblockClaimCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockClaimCreatedEventResponse> superblockClaimCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SuperblockClaimCreatedEventResponse>() {
            @Override
            public SuperblockClaimCreatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKCLAIMCREATED_EVENT, log);
                SuperblockClaimCreatedEventResponse typedResponse = new SuperblockClaimCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockClaimCreatedEventResponse> superblockClaimCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKCLAIMCREATED_EVENT));
        return superblockClaimCreatedEventFlowable(filter);
    }

    public List<SuperblockClaimChallengedEventResponse> getSuperblockClaimChallengedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKCLAIMCHALLENGED_EVENT, transactionReceipt);
        ArrayList<SuperblockClaimChallengedEventResponse> responses = new ArrayList<SuperblockClaimChallengedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimChallengedEventResponse typedResponse = new SuperblockClaimChallengedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockClaimChallengedEventResponse> superblockClaimChallengedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SuperblockClaimChallengedEventResponse>() {
            @Override
            public SuperblockClaimChallengedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKCLAIMCHALLENGED_EVENT, log);
                SuperblockClaimChallengedEventResponse typedResponse = new SuperblockClaimChallengedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockClaimChallengedEventResponse> superblockClaimChallengedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKCLAIMCHALLENGED_EVENT));
        return superblockClaimChallengedEventFlowable(filter);
    }

    public List<SuperblockBattleDecidedEventResponse> getSuperblockBattleDecidedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKBATTLEDECIDED_EVENT, transactionReceipt);
        ArrayList<SuperblockBattleDecidedEventResponse> responses = new ArrayList<SuperblockBattleDecidedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockBattleDecidedEventResponse typedResponse = new SuperblockBattleDecidedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.winner = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse.loser = (Address) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockBattleDecidedEventResponse> superblockBattleDecidedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SuperblockBattleDecidedEventResponse>() {
            @Override
            public SuperblockBattleDecidedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKBATTLEDECIDED_EVENT, log);
                SuperblockBattleDecidedEventResponse typedResponse = new SuperblockBattleDecidedEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.winner = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse.loser = (Address) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockBattleDecidedEventResponse> superblockBattleDecidedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKBATTLEDECIDED_EVENT));
        return superblockBattleDecidedEventFlowable(filter);
    }

    public List<SuperblockClaimSuccessfulEventResponse> getSuperblockClaimSuccessfulEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKCLAIMSUCCESSFUL_EVENT, transactionReceipt);
        ArrayList<SuperblockClaimSuccessfulEventResponse> responses = new ArrayList<SuperblockClaimSuccessfulEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimSuccessfulEventResponse typedResponse = new SuperblockClaimSuccessfulEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockClaimSuccessfulEventResponse> superblockClaimSuccessfulEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SuperblockClaimSuccessfulEventResponse>() {
            @Override
            public SuperblockClaimSuccessfulEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKCLAIMSUCCESSFUL_EVENT, log);
                SuperblockClaimSuccessfulEventResponse typedResponse = new SuperblockClaimSuccessfulEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockClaimSuccessfulEventResponse> superblockClaimSuccessfulEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKCLAIMSUCCESSFUL_EVENT));
        return superblockClaimSuccessfulEventFlowable(filter);
    }

    public List<SuperblockClaimPendingEventResponse> getSuperblockClaimPendingEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKCLAIMPENDING_EVENT, transactionReceipt);
        ArrayList<SuperblockClaimPendingEventResponse> responses = new ArrayList<SuperblockClaimPendingEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimPendingEventResponse typedResponse = new SuperblockClaimPendingEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockClaimPendingEventResponse> superblockClaimPendingEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SuperblockClaimPendingEventResponse>() {
            @Override
            public SuperblockClaimPendingEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKCLAIMPENDING_EVENT, log);
                SuperblockClaimPendingEventResponse typedResponse = new SuperblockClaimPendingEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockClaimPendingEventResponse> superblockClaimPendingEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKCLAIMPENDING_EVENT));
        return superblockClaimPendingEventFlowable(filter);
    }

    public List<SuperblockClaimFailedEventResponse> getSuperblockClaimFailedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKCLAIMFAILED_EVENT, transactionReceipt);
        ArrayList<SuperblockClaimFailedEventResponse> responses = new ArrayList<SuperblockClaimFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimFailedEventResponse typedResponse = new SuperblockClaimFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockClaimFailedEventResponse> superblockClaimFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SuperblockClaimFailedEventResponse>() {
            @Override
            public SuperblockClaimFailedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKCLAIMFAILED_EVENT, log);
                SuperblockClaimFailedEventResponse typedResponse = new SuperblockClaimFailedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockClaimFailedEventResponse> superblockClaimFailedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKCLAIMFAILED_EVENT));
        return superblockClaimFailedEventFlowable(filter);
    }

    public List<VerificationGameStartedEventResponse> getVerificationGameStartedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VERIFICATIONGAMESTARTED_EVENT, transactionReceipt);
        ArrayList<VerificationGameStartedEventResponse> responses = new ArrayList<VerificationGameStartedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VerificationGameStartedEventResponse typedResponse = new VerificationGameStartedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(2);
            typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(3);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VerificationGameStartedEventResponse> verificationGameStartedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, VerificationGameStartedEventResponse>() {
            @Override
            public VerificationGameStartedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VERIFICATIONGAMESTARTED_EVENT, log);
                VerificationGameStartedEventResponse typedResponse = new VerificationGameStartedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(2);
                typedResponse.sessionId = (Bytes32) eventValues.getNonIndexedValues().get(3);
                return typedResponse;
            }
        });
    }

    public Flowable<VerificationGameStartedEventResponse> verificationGameStartedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VERIFICATIONGAMESTARTED_EVENT));
        return verificationGameStartedEventFlowable(filter);
    }

    public List<ErrorClaimEventResponse> getErrorClaimEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ERRORCLAIM_EVENT, transactionReceipt);
        ArrayList<ErrorClaimEventResponse> responses = new ArrayList<ErrorClaimEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorClaimEventResponse typedResponse = new ErrorClaimEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ErrorClaimEventResponse> errorClaimEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ErrorClaimEventResponse>() {
            @Override
            public ErrorClaimEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ERRORCLAIM_EVENT, log);
                ErrorClaimEventResponse typedResponse = new ErrorClaimEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ErrorClaimEventResponse> errorClaimEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ERRORCLAIM_EVENT));
        return errorClaimEventFlowable(filter);
    }

    public List<DepositMadeEventResponse> getDepositMadeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSITMADE_EVENT, transactionReceipt);
        ArrayList<DepositMadeEventResponse> responses = new ArrayList<DepositMadeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositMadeEventResponse typedResponse = new DepositMadeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositMadeEventResponse> depositMadeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DepositMadeEventResponse>() {
            @Override
            public DepositMadeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSITMADE_EVENT, log);
                DepositMadeEventResponse typedResponse = new DepositMadeEventResponse();
                typedResponse.log = log;
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<DepositMadeEventResponse> depositMadeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITMADE_EVENT));
        return depositMadeEventFlowable(filter);
    }

    public List<DepositWithdrawnEventResponse> getDepositWithdrawnEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSITWITHDRAWN_EVENT, transactionReceipt);
        ArrayList<DepositWithdrawnEventResponse> responses = new ArrayList<DepositWithdrawnEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositWithdrawnEventResponse typedResponse = new DepositWithdrawnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositWithdrawnEventResponse> depositWithdrawnEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DepositWithdrawnEventResponse>() {
            @Override
            public DepositWithdrawnEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSITWITHDRAWN_EVENT, log);
                DepositWithdrawnEventResponse typedResponse = new DepositWithdrawnEventResponse();
                typedResponse.log = log;
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<DepositWithdrawnEventResponse> depositWithdrawnEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITWITHDRAWN_EVENT));
        return depositWithdrawnEventFlowable(filter);
    }

    public RemoteCall<TransactionReceipt> bondDeposit(Bytes32 superblockHash, Address account, Uint256 amount) {
        final Function function = new Function(
                FUNC_BONDDEPOSIT, 
                Arrays.<Type>asList(superblockHash, account, amount), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Uint256> getBondedDeposit(Bytes32 superblockHash, Address account) {
        final Function function = new Function(FUNC_GETBONDEDDEPOSIT, 
                Arrays.<Type>asList(superblockHash, account), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getDeposit(Address account) {
        final Function function = new Function(FUNC_GETDEPOSIT, 
                Arrays.<Type>asList(account), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> proposeSuperblock(Bytes32 _blocksMerkleRoot, Uint256 _accumulatedWork, Uint256 _timestamp, Bytes32 _lastHash, Bytes32 _parentHash, Uint32 _blockHeight) {
        final Function function = new Function(
                FUNC_PROPOSESUPERBLOCK, 
                Arrays.<Type>asList(_blocksMerkleRoot, _accumulatedWork, _timestamp, _lastHash, _parentHash, _blockHeight), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> challengeSuperblock(Bytes32 superblockHash) {
        final Function function = new Function(
                FUNC_CHALLENGESUPERBLOCK, 
                Arrays.<Type>asList(superblockHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> checkClaimFinished(Bytes32 superblockHash) {
        final Function function = new Function(
                FUNC_CHECKCLAIMFINISHED, 
                Arrays.<Type>asList(superblockHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> confirmClaim(Bytes32 superblockHash, Bytes32 descendantId) {
        final Function function = new Function(
                FUNC_CONFIRMCLAIM, 
                Arrays.<Type>asList(superblockHash, descendantId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> rejectClaim(Bytes32 superblockHash) {
        final Function function = new Function(
                FUNC_REJECTCLAIM, 
                Arrays.<Type>asList(superblockHash), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> sessionDecided(Bytes32 sessionId, Bytes32 superblockHash, Address winner, Address loser) {
        final Function function = new Function(
                FUNC_SESSIONDECIDED, 
                Arrays.<Type>asList(sessionId, superblockHash, winner, loser), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Bool> getInBattleAndSemiApprovable(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETINBATTLEANDSEMIAPPROVABLE, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Address> getClaimSubmitter(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMSUBMITTER, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getNewSuperblockEventTimestamp(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETNEWSUPERBLOCKEVENTTIMESTAMP, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> getClaimExists(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMEXISTS, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> getClaimDecided(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMDECIDED, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> getClaimInvalid(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMINVALID, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> getClaimVerificationOngoing(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMVERIFICATIONONGOING, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getClaimChallengeTimeout(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMCHALLENGETIMEOUT, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Uint256> getClaimRemainingChallengers(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMREMAININGCHALLENGERS, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bytes32> getSession(Bytes32 superblockHash, Address challenger) {
        final Function function = new Function(FUNC_GETSESSION, 
                Arrays.<Type>asList(superblockHash, challenger), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<DynamicArray<Address>> getClaimChallengers(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMCHALLENGERS, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    @Deprecated
    public static SyscoinClaimManager load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SyscoinClaimManager(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SyscoinClaimManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SyscoinClaimManager(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SyscoinClaimManager load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SyscoinClaimManager(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SyscoinClaimManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SyscoinClaimManager(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SyscoinClaimManager> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, Address _superblocks, Address _syscoinBattleManager, Uint256 _superblockDelay, Uint256 _superblockTimeout, Uint256 _superblockConfirmations, Uint256 _battleReward) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_superblocks, _syscoinBattleManager, _superblockDelay, _superblockTimeout, _superblockConfirmations, _battleReward));
        return deployRemoteCall(SyscoinClaimManager.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<SyscoinClaimManager> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, Address _superblocks, Address _syscoinBattleManager, Uint256 _superblockDelay, Uint256 _superblockTimeout, Uint256 _superblockConfirmations, Uint256 _battleReward) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_superblocks, _syscoinBattleManager, _superblockDelay, _superblockTimeout, _superblockConfirmations, _battleReward));
        return deployRemoteCall(SyscoinClaimManager.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SyscoinClaimManager> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, Address _superblocks, Address _syscoinBattleManager, Uint256 _superblockDelay, Uint256 _superblockTimeout, Uint256 _superblockConfirmations, Uint256 _battleReward) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_superblocks, _syscoinBattleManager, _superblockDelay, _superblockTimeout, _superblockConfirmations, _battleReward));
        return deployRemoteCall(SyscoinClaimManager.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SyscoinClaimManager> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, Address _superblocks, Address _syscoinBattleManager, Uint256 _superblockDelay, Uint256 _superblockTimeout, Uint256 _superblockConfirmations, Uint256 _battleReward) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_superblocks, _syscoinBattleManager, _superblockDelay, _superblockTimeout, _superblockConfirmations, _battleReward));
        return deployRemoteCall(SyscoinClaimManager.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class DepositBondedEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address account;

        public Uint256 amount;
    }

    public static class DepositUnbondedEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address account;

        public Uint256 amount;
    }

    public static class SuperblockClaimCreatedEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address submitter;
    }

    public static class SuperblockClaimChallengedEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address challenger;
    }

    public static class SuperblockBattleDecidedEventResponse {
        public Log log;

        public Bytes32 sessionId;

        public Address winner;

        public Address loser;
    }

    public static class SuperblockClaimSuccessfulEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address submitter;
    }

    public static class SuperblockClaimPendingEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address submitter;
    }

    public static class SuperblockClaimFailedEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address submitter;
    }

    public static class VerificationGameStartedEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Address submitter;

        public Address challenger;

        public Bytes32 sessionId;
    }

    public static class ErrorClaimEventResponse {
        public Log log;

        public Bytes32 superblockHash;

        public Uint256 err;
    }

    public static class DepositMadeEventResponse {
        public Log log;

        public Address who;

        public Uint256 amount;
    }

    public static class DepositWithdrawnEventResponse {
        public Log log;

        public Address who;

        public Uint256 amount;
    }
}
