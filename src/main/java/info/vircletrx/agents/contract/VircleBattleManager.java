package info.vircletrx.agents.contract;

import io.reactivex.Flowable;

import java.io.IOException;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;


import org.tron.tronj.abi.TypeReference;
import org.tron.tronj.abi.datatypes.*;
import org.tron.tronj.abi.datatypes.generated.Bytes32;
import org.tron.tronj.abi.datatypes.generated.Uint256;
import org.tron.tronj.abi.datatypes.generated.Uint32;
import org.tron.tronj.abi.datatypes.generated.Uint8;
import org.tron.tronj.client.contract.Contract;

import info.vircletrx.agents.addition.TrxContract;
import info.vircletrx.agents.addition.BaseEventResponse;
import info.vircletrx.agents.addition.Tuple2;
import org.tron.tronj.proto.Response.TransactionReturn;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.5.
 */
@SuppressWarnings("rawtypes")
public class VircleBattleManager extends Contract {
    private static final String BINARY = "0x608060405234801561001057600080fd5b50d3801561001d57600080fd5b50d2801561002a57600080fd5b50613e32806200003b6000396000f3fe608060405234801561001057600080fd5b50d3801561001d57600080fd5b50d2801561002a57600080fd5b506004361061016e576000357c0100000000000000000000000000000000000000000000000000000000900480639a58ac7c116100ef578063df23ceb2116100b3578063df23ceb214610a90578063e177321614610af5578063f1afcfa614610b3b578063f871dfe814610b59578063f91f681f14610b9b578063f9b5d7c014610be35761016e565b80639a58ac7c146107d9578063b6f6580a1461081d578063d0f9410b1461085f578063d1daeede1461093f578063d5c9712f146109ad5761016e565b8063455e616611610136578063455e6166146105845780634d7dcfbd146105a257806351fcf4311461068257806371a8c18a14610751578063795ea18e146107975761016e565b8063029c5e2a146101735780630c9897d21461025857806318b011de1461033b5780632ef955e4146103595780633e0e8a201461043c575b600080fd5b6102366004803603604081101561018957600080fd5b81019080803590602001906401000000008111156101a657600080fd5b8201836020820111156101b857600080fd5b803590602001918460018302840111640100000000831117156101da57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050610caf565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b6103256004803603606081101561026e57600080fd5b810190808035906020019064010000000081111561028b57600080fd5b82018360208201111561029d57600080fd5b803590602001918460018302840111640100000000831117156102bf57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919080359060200190929190505050610cf1565b6040518082815260200191505060405180910390f35b610343610dd1565b6040518082815260200191505060405180910390f35b6104266004803603606081101561036f57600080fd5b810190808035906020019064010000000081111561038c57600080fd5b82018360208201111561039e57600080fd5b803590602001918460018302840111640100000000831117156103c057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919080359060200190929190505050610dd7565b6040518082815260200191505060405180910390f35b6105096004803603606081101561045257600080fd5b810190808035906020019064010000000081111561046f57600080fd5b82018360208201111561048157600080fd5b803590602001918460018302840111640100000000831117156104a357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919080359060200190929190505050610e01565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561054957808201518184015260208101905061052e565b50505050905090810190601f1680156105765780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61058c610e69565b6040518082815260200191505060405180910390f35b610665600480360360408110156105b857600080fd5b81019080803590602001906401000000008111156105d557600080fd5b8201836020820111156105e757600080fd5b8035906020019184600183028401116401000000008311171561060957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050610e71565b604051808381526020018281526020019250505060405180910390f35b61074f6004803603606081101561069857600080fd5b8101908080359060200190929190803590602001906401000000008111156106bf57600080fd5b8201836020820111156106d157600080fd5b803590602001918460018302840111640100000000831117156106f357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050610f93565b005b61077d6004803603602081101561076757600080fd5b81019080803590602001909291905050506115ef565b604051808215151515815260200191505060405180910390f35b6107c3600480360360208110156107ad57600080fd5b810190808035906020019092919050505061161a565b6040518082815260200191505060405180910390f35b61081b600480360360208110156107ef57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117dc565b005b6108496004803603602081101561083357600080fd5b81019080803590602001909291905050506118b6565b6040518082815260200191505060405180910390f35b6109296004803603606081101561087557600080fd5b810190808035906020019092919080359060200190929190803590602001906401000000008111156108a657600080fd5b8201836020820111156108b857600080fd5b803590602001918460208302840111640100000000831117156108da57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192905050506119e5565b6040518082815260200191505060405180910390f35b6109ab6004803603606081101561095557600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c5f565b005b610a7a600480360360608110156109c357600080fd5b81019080803590602001906401000000008111156109e057600080fd5b8201836020820111156109f257600080fd5b80359060200191846001830284011164010000000083111715610a1457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919080359060200190929190505050611e79565b6040518082815260200191505060405180910390f35b610af360048036036080811015610aa657600080fd5b81019080803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050611f37565b005b610b2160048036036020811015610b0b57600080fd5b81019080803590602001909291905050506120ae565b604051808215151515815260200191505060405180910390f35b610b4361211d565b6040518082815260200191505060405180910390f35b610b8560048036036020811015610b6f57600080fd5b8101908080359060200190929190505050612123565b6040518082815260200191505060405180910390f35b610bcd60048036036020811015610bb157600080fd5b81019080803563ffffffff1690602001909291905050506122cc565b6040518082815260200191505060405180910390f35b610c9960048036036020811015610bf957600080fd5b8101908080359060200190640100000000811115610c1657600080fd5b820183602082011115610c2857600080fd5b80359060200191846020830284011164010000000083111715610c4a57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050612310565b6040518082815260200191505060405180910390f35b6000816020840101516040518160031a60008201538160021a60018201538160011a60028201538160001a60038201538051601c6008021c9250505092915050565b6000610dc86002610d03868686610dd7565b604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083101515610d575780518252602082019150602081019050602083039250610d32565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa158015610d99573d6000803e3d6000fd5b5050506040513d6020811015610dae57600080fd5b8101908080519060200190929190505050600190046118b6565b90509392505050565b60355481565b60006040516020818486602089010160025afa1515610df557600080fd5b80519150509392505050565b6060600083830390506060816040519080825280601f01601f191660200182016040528015610e3f5781602001600182028038833980820191505090505b5090508160208201838760208a010160045afa1515610e5d57600080fd5b80925050509392505050565b633b9aca0081565b60008060008484815181101515610e8457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004905060018401935060fd8160ff161015610f185780848160ff1691509250925050610f8c565b60fd8160ff161415610f3e57610f3085856010611e79565b600285019250925050610f8c565b60fe8160ff161415610f6457610f5685856020611e79565b600485019250925050610f8c565b60ff8160ff161415610f8a57610f7c85856040611e79565b600885019250925050610f8c565b505b9250929050565b600060336000858152602001908152602001600020905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561100d57600080fd5b60008260040180549050905060028081111561102557fe5b603660009054906101000a900460ff16600281111561104057fe5b14151561107c5760028111158015611059575060108414155b8061107157506003811480156110705750600c8414155b5b1561107b57600080fd5b5b611084613b8f565b603760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e5b7071886040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808281526020019150506101206040518083038186803b15801561111457600080fd5b505afa158015611128573d6000803e3d6000fd5b505050506040513d61012081101561113f57600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505090915090508760000188602001896040018a6060018b60c0018c6080018d60e0018763ffffffff1663ffffffff16815250878152508763ffffffff1663ffffffff16815250878152508781525087815250878152505050505050505060008090506060866040519080825280602002602001820160405280156112325781602001602082028038833980820191505090505b50905060608760405190808252806020026020018201604052801561127157816020015b61125e613c12565b8152602001906001900390816112565790505b509050600080905060008090505b82518110156113e0576112928b8661266a565b83828151811015156112a057fe5b9060200190602002018190525060006112d384838151811015156112c057fe5b90602001906020020151600001516122cc565b90506112df8c876126e8565b15611361576112ec613c4d565b6112f68d88612709565b90508181600001511115611310576127a6935050506113e0565b600061133b868581518110151561132357fe5b9060200190602002015160600151600190048361283b565b9050600181141515611352578094505050506113e0565b8161014001519750505061139a565b80848381518110151561137057fe5b9060200190602002015160600151600190041115611393576127929250506113e0565b6050860195505b83828151811015156113a857fe5b906020019060200201516060015185838151811015156113c457fe5b906020019060200201818152505050808060010191505061127f565b506000811415156114285761141b8b888a60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846128b9565b50505050505050506115ea565b611457888661143686612310565b85600187510381518110151561144857fe5b90602001906020020151612a4c565b9050600081141515611498576114938b888a60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846128b9565b6115e1565b4288600201819055506114ac888684612c15565b90506000811415156114f5576114e88b888a60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846128b9565b50505050505050506115ea565b600c891480611528575060028081111561150b57fe5b603660009054906101000a900460ff16600281111561152657fe5b145b1561156a5761155d8b888a60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684613156565b50505050505050506115ea565b7fbb00dcdc614e6421b964f0ebca4d1ce96e2a575d555e09012e6f36ed405b410a8b6001880189604051808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a15b50505050505050505b505050565b6000806033600084815260200190815260200160002090506035548160020154014211915050919050565b600080603360008481526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561169257600080fd5b6035548160020154014211156117d0576116f8838260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661c36a6128b9565b603660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633352f1a4846040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561178957600080fd5b505af115801561179d573d6000803e3d6000fd5b505050506040513d60208110156117b357600080fd5b81019080805190602001909291905050505061c36a9150506117d7565b61c36e9150505b919050565b600073ffffffffffffffffffffffffffffffffffffffff16603660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480156118675750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b151561187257600080fd5b80603660016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060405182601f1a600082015382601e1a600182015382601d1a600282015382601c1a600382015382601b1a600482015382601a1a60058201538260191a60068201538260181a60078201538260171a60088201538260161a60098201538260151a600a8201538260141a600b8201538260131a600c8201538260121a600d8201538260111a600e8201538260101a600f82015382600f1a601082015382600e1a601182015382600d1a601282015382600c1a601382015382600b1a601482015382600a1a60158201538260091a60168201538260081a60178201538260071a60188201538260061a60198201538260051a601a8201538260041a601b8201538260031a601c8201538260021a601d8201538260011a601e8201538260001a601f8201538051915050919050565b6000808251905060008090505b81811015611a4357611a1a8482815181101515611a0b57fe5b906020019060200201516118b6565b8482815181101515611a2857fe5b906020019060200201818152505080806001019150506119f2565b600090506000611a52876118b6565b90505b82821015611c4a5760008583815181101515611a6d57fe5b906020019060200201519050600080600160028a811515611a8a57fe5b061415611a9c57829150839050611aa3565b8391508290505b600280838360405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515611b035780518252602082019150602081019050602083039250611ade565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa158015611b45573d6000803e3d6000fd5b5050506040513d6020811015611b5a57600080fd5b8101908080519060200190929190505050604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083101515611bbf5780518252602082019150602081019050602083039250611b9a565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa158015611c01573d6000803e3d6000fd5b5050506040513d6020811015611c1657600080fd5b8101908080519060200190929190505050600190049350600289811515611c3957fe5b049850600185019450505050611a55565b611c53816118b6565b93505050509392505050565b603660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611cbc57600080fd5b6000603360008681526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611d3257600080fd5b838160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550828160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008160040181611dc99190613ca8565b504281600201819055507f3726b144f253954160bd0bb1f002a28f904f6e83596cbb62e9e1f2082644ca93858585604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a15050505050565b600080600090505b600883811515611e8d57fe5b04811015611f2f576008810260020a85828601815181101515611eac57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff1602820191508080600101915050611e81565b509392505050565b600060019054906101000a900460ff1680611f565750611f556132e9565b5b80611f6d57506000809054906101000a900460ff16155b1515611fc4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613dd9602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015612014576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b84603660006101000a81548160ff0219169083600281111561203257fe5b021790555083603760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826034819055508160358190555080156120a75760008060016101000a81548160ff0219169083151502179055505b5050505050565b60008073ffffffffffffffffffffffffffffffffffffffff166033600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60345481565b600061212d613cd4565b6033600084815260200190815260200160002060a060405190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481526020016004820180548060200260200160405190810160405280929190818152602001828054801561225b57602002820191906000526020600020905b815481526020019060010190808311612247575b5050505050815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614156122a95760009150506122c7565b60336000848152602001908152602001600020600401805490509150505b919050565b60008063010000008363ffffffff168115156122e457fe5b0463ffffffff169050600062ffffff841663ffffffff169050600382036101000a810292505050919050565b6000808251905060018114156123415782600081518110151561232f57fe5b90602001906020020151915050612665565b6000811115156123b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4d7573742070726f76696465206861736865730000000000000000000000000081525060200191505060405180910390fd5b60008090505b81811015612417576123eb84828151811015156123d857fe5b90602001906020020151600190046118b6565b60010284828151811015156123fc57fe5b906020019060200201818152505080806001019150506123bf565b6000805b60018411156126365760009050600092505b8383101561262e57836001840110612448576001840361244d565b600183015b9150600280878581518110151561246057fe5b90602001906020020151888581518110151561247857fe5b9060200190602002015160405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b6020831015156124dd57805182526020820191506020810190506020830392506124b8565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa15801561251f573d6000803e3d6000fd5b5050506040513d602081101561253457600080fd5b8101908080519060200190929190505050604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b6020831015156125995780518252602082019150602081019050602083039250612574565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa1580156125db573d6000803e3d6000fd5b5050506040513d60208110156125f057600080fd5b8101908080519060200190929190505050868281518110151561260f57fe5b906020019060200201818152505060018101905060028301925061242d565b80935061241b565b61265b86600081518110151561264857fe5b90602001906020020151600190046118b6565b6001029450505050505b919050565b612672613d33565b61267c83836132fa565b816000019063ffffffff16908163ffffffff168152505061269f83836050610cf1565b6001028160600181815250506126b58383613311565b816040019063ffffffff16908163ffffffff16815250506126d68383613328565b60010281602001818152505092915050565b6000806101006126f88585610caf565b1663ffffffff161415905092915050565b612711613c4d565b60606000605084019350612725858561334f565b809350819250505061273a8585868403610cf1565b83602001818152505080935060208401935061275885856000613381565b8191508460e001819650829052505061277385856020611e79565b8361010001818152505060048401935061278f85856000613381565b8191508460600181965082905250506127aa85856020611e79565b8360800181815250506004840193506127c585856050610cf1565b8360000181815250506024840193506127de858561344e565b8360c00181815250506028840193506127f985856020611e79565b836101200181815250506004840183610140018181525050600061281c8361345f565b866040018760a001828152508294508381525050505050505092915050565b6000808261010001511415156128555761274c90506128b3565b60018260a0015114151561286f578160a0015190506128b3565b816040015161287e8484613568565b14151561288f5761277e90506128b3565b8160c0015161289d83613585565b1415156128ae5761278890506128b3565b600190505b92915050565b603660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a4cbce7b8584866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b1580156129b257600080fd5b505af11580156129c6573d6000803e3d6000fd5b505050507fcc11926aca009e381b48e432fbfb8e3f192d5d8be733dc474fa78831bbfdf044848285604051808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a1612a46846135ae565b50505050565b6000600385600401805490501480612a885750600280811115612a6b57fe5b603660009054906101000a900460ff166002811115612a8657fe5b145b15612bd9576060600280811115612a9b57fe5b603660009054906101000a900460ff166002811115612ab657fe5b1415612ac3576001612ac6565b60045b60ff16604051908082528060200260200182016040528015612af75781602001602082028038833980820191505090505b50905060008090505b8660040180549050811015612b54578660040181815481101515612b2057fe5b90600052602060002001548282815181101515612b3957fe5b90602001906020020181815250508080600101915050612b00565b848282815181101515612b6357fe5b9060200190602002018181525050612b7a82612310565b8660000151141515612b925761c37692505050612c0d565b836040015163ffffffff168660200151141515612bb55761c37492505050612c0d565b85606001518460600151141515612bd25761c38b92505050612c0d565b5050612c08565b846004018390806001815401808255809150509060018203906000526020600020016000909192909190915055505b600090505b949350505050565b6000612c1f613b8f565b612c27613d33565b836001855103815181101515612c3957fe5b906020019060200201519050603760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e5b707186608001516040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808281526020019150506101206040518083038186803b158015612cd957600080fd5b505afa158015612ced573d6000803e3d6000fd5b505050506040513d610120811015612d0457600080fd5b8101908080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919050505090919293949596975090919293949596509091925090915090505084604001856060018660c0018363ffffffff1663ffffffff16815250838152508381525050505060018660040180549050111515612dee578160600151846000815181101515612dcc57fe5b9060200190602002015160200151141515612ded5761c38d9250505061314f565b5b6000612dff87868560c00151613635565b9050600081141515612e165780935050505061314f565b600c8551141515612e335781606001518760030181905550613147565b6000612e3e8661378b565b9050866040015181141515612e5b5761c39794505050505061314f565b836040015181111515612e765761c39894505050505061314f565b600280811115612e8257fe5b603660009054906101000a900460ff166002811115612e9d57fe5b141515613145576000600660018960e001510363ffffffff16811515612ebf57fe5b0663ffffffff1614156130ed57612ed4613d33565b866002885103815181101515612ee657fe5b906020019060200201519050603760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632da8cffd603760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c0dde98b60068c60e00151036040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808263ffffffff16815260200191505060206040518083038186803b158015612fcc57600080fd5b505afa158015612fe0573d6000803e3d6000fd5b505050506040513d6020811015612ff657600080fd5b81019080805190602001909291905050506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561305757600080fd5b505afa15801561306b573d6000803e3d6000fd5b505050506040513d602081101561308157600080fd5b810190808051906020019092919050505088602001818152505060006130bb8960200151836040015163ffffffff16038760c00151613813565b90508063ffffffff168960c0015163ffffffff161415156130e65761c389965050505050505061314f565b5050613119565b8360c0015163ffffffff168760c0015163ffffffff161415156131185761c39094505050505061314f565b5b826000015163ffffffff168760c0015163ffffffff161415156131445761c39094505050505061314f565b5b505b600093505050505b9392505050565b603660019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a4cbce7b8585856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b15801561324f57600080fd5b505af1158015613263573d6000803e3d6000fd5b505050507fffa243eaeafd66e0a938ee0d270bbefd594e08a551dc29a9a44e39c719cfc79f848284604051808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a16132e3846135ae565b50505050565b600080303b90506000811491505090565b60006133098383604801610caf565b905092915050565b60006133208383604401610caf565b905092915050565b6000806000836004019050806020860101519150613345826118b6565b9250505092915050565b6000606061336084600485016138bb565b80925081935050506133728483613962565b91506004820191509250929050565b606060008060006133928787610e71565b809750819350505060008514806133a857508185115b156133b5578190506133b9565b8490505b6060816040519080825280602002602001820160405280156133ea5781602001602082028038833980820191505090505b50905060008090505b8281101561343c5761340d6134088a8a61344e565b6118b6565b828281518110151561341b57fe5b906020019060200201818152505060208801975080806001019150506133f3565b50808794509450505050935093915050565b600081602001830151905092915050565b600080600080600080905060007ffabe6d6d00000000000000000000000000000000000000000000000000000000905060007fffffffff0000000000000000000000000000000000000000000000000000000090508751602089018181015b808210156134f757848483511614156134ec5760008614156134e557600482820384030196505b6001860195505b6001820191506134be565b50505060028310151561351f5760006004850361276082925096509650965050505050613561565b600183141561354a57613532888561344e565b60048503600180905096509650965050505050613561565b60006004850361276a829250965096509650505050505b9193909250565b600061357d83836080015184606001516119e5565b905092915050565b60006135a76135a283602001518461010001518560e001516119e5565b6118b6565b9050919050565b60336000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282016000905560038201600090556004820160006136309190613d6e565b505050565b600080600184510390505b60008111156136fe57613651613d33565b848281518110151561365f57fe5b906020019060200201519050613673613d33565b856001840381518110151561368457fe5b906020019060200201519050600c86511415806136a45750600186510383105b156136d057816000015163ffffffff168563ffffffff161415156136cf5761c38a9350505050613784565b5b816020015181606001511415156136ee5761c38c9350505050613784565b5050808060019003915050613640565b5082600081518110151561370e57fe5b906020019060200201516000015163ffffffff168263ffffffff1614151561373a5761c38a9050613784565b6002846004018054905010151561377f5782600081518110151561375a57fe5b9060200190602002015160200151846003015414151561377e5761c3939050613784565b5b600090505b9392505050565b6000613795613d8f565b60008090505b600b8110156137ed5783600182018151811015156137b557fe5b906020019060200201516040015163ffffffff168282600b811015156137d757fe5b602002018181525050808060010191505061379b565b506137f7816139cc565b806005600b8110151561380657fe5b6020020151915050919050565b60008083905061438081101561382d57614380905061383e565b61697881111561383d5761697890505b5b6000613849846122cc565b905081810290506154608181151561385d57fe5b0490507d0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8111156138a8577d0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90505b6138b181613a93565b9250505092915050565b600060606000806138cc8686610e71565b80965081935050506000821415613912576138e78686610e71565b8096508193505050600082141515156138ff57600080fd5b6139098686610e71565b80965081935050505b60018214151561392157600080fd5b6024850194506139318686610e71565b809650819250505060606139488787848901610e01565b905060048201860195508581945094505050509250929050565b60008060006139718585610e71565b8095508193505050600a8210151561398857600080fd5b60008090505b828110156139c0576008850194506139a68686610e71565b80965081935050508185019450808060010191505061398e565b50839250505092915050565b60008090505b600b811015613a8f5760006001820190505b600b811015613a81578281600b811015156139fb57fe5b60200201518383600b81101515613a0e57fe5b60200201511115613a745760008383600b81101515613a2957fe5b602002015190508382600b81101515613a3e57fe5b60200201518484600b81101515613a5157fe5b602002018181525050808483600b81101515613a6957fe5b602002018181525050505b80806001019150506139e4565b5080806001019150506139d2565b5050565b600080613aac6007613aa485613b38565b016003613b66565b90506000809050600382111515613ad957613ad262ffffff851683600303600802613b7f565b9050613af4565b613ae98460038403600802613b66565b905062ffffff811690505b600062800000821663ffffffff161115613b2257613b198163ffffffff166008613b66565b90506001820191505b613b2d826018613b7f565b811792505050919050565b6000808290505b6000811115613b6057613b53816001613b66565b9050600182019150613b3f565b50919050565b60008160020a83811515613b7657fe5b04905092915050565b60008160020a8302905092915050565b610120604051908101604052806000801916815260200160008152602001600081526020016000801916815260200160008019168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff168152602001600063ffffffff16815260200160006005811115613c0c57fe5b81525090565b608060405190810160405280600063ffffffff16815260200160008019168152602001600063ffffffff168152602001600080191681525090565b6101606040519081016040528060008152602001600081526020016000815260200160608152602001600081526020016000815260200160008152602001606081526020016000815260200160008152602001600081525090565b815481835581811115613ccf57818360005260206000209182019101613cce9190613db3565b5b505050565b60a060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008019168152602001606081525090565b608060405190810160405280600063ffffffff16815260200160008019168152602001600063ffffffff168152602001600080191681525090565b5080546000825590600052602060002090810190613d8c9190613db3565b50565b61016060405190810160405280600b90602082028038833980820191505090505090565b613dd591905b80821115613dd1576000816000905550600101613db9565b5090565b9056fe436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564a165627a7a7230582092e44f6bc9713f566a43a444ee8d4a75e6303bd13334001af70a99438c5259ae0029";

    public static final String FUNC_BYTESTOUINT32FLIPPED = "bytesToUint32Flipped";

    public static final String FUNC_SUPERBLOCKTIMEOUT = "superblockTimeout";

    public static final String FUNC_SLICEARRAY = "sliceArray";

    public static final String FUNC_MINPROPOSALDEPOSIT = "minProposalDeposit";

    public static final String FUNC_PARSEVARINT = "parseVarInt";

    public static final String FUNC_FLIP32BYTES = "flip32Bytes";

    public static final String FUNC_COMPUTEMERKLE = "computeMerkle";

    public static final String FUNC_GETBYTESLE = "getBytesLE";

    public static final String FUNC_SUPERBLOCKDURATION = "superblockDuration";

    public static final String FUNC_INIT = "init";

    public static final String FUNC_SETVIRCLECLAIMMANAGER = "setVircleClaimManager";

    public static final String FUNC_BEGINBATTLESESSION = "beginBattleSession";

    public static final String FUNC_SHA256MEM = "sha256mem";

    public static final String FUNC_DBLSHAFLIPMEM = "dblShaFlipMem";

    public static final String FUNC_TARGETFROMBITS = "targetFromBits";

    public static final String FUNC_MAKEMERKLE = "makeMerkle";

    public static final String FUNC_RESPONDBLOCKHEADERS = "respondBlockHeaders";

    public static final String FUNC_TIMEOUT = "timeout";

    public static final String FUNC_GETSUBMITTERHITTIMEOUT = "getSubmitterHitTimeout";

    public static final String FUNC_GETNUMMERKLEHASHESBYSESSION = "getNumMerkleHashesBySession";

    public static final String FUNC_SESSIONEXISTS = "sessionExists";

    public static final Event NEWBATTLE_EVENT = new Event("NewBattle",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event CHALLENGERCONVICTED_EVENT = new Event("ChallengerConvicted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUBMITTERCONVICTED_EVENT = new Event("SubmitterConvicted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event RESPONDBLOCKHEADERS_EVENT = new Event("RespondBlockHeaders", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        // _addresses.put("1", "0xee12b97554329546d84e244a4db25969570af9be");
        _addresses.put("1", "TMBWR6XfUefWw2WqWhSEDfWFvR5NdJwRKy");
    }

    private TrxContract trxCntr;
    public VircleBattleManager(TrxContract trxCntr) {
        super(trxCntr.getContract(), trxCntr.getOwnerAddress(), trxCntr.getClient());
        this.trxCntr = trxCntr;
    }

    public Uint32 bytesToUint32Flipped(DynamicBytes input, Uint256 pos) {
        final Function function = new Function(FUNC_BYTESTOUINT32FLIPPED, 
                Arrays.<Type>asList(input, pos), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Uint256 superblockTimeout() {
        final Function function = new Function(FUNC_SUPERBLOCKTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public DynamicBytes sliceArray(DynamicBytes _rawBytes, Uint256 offset, Uint256 _endIndex) {
        final Function function = new Function(FUNC_SLICEARRAY, 
                Arrays.<Type>asList(_rawBytes, offset, _endIndex), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Uint256 minProposalDeposit() {
        final Function function = new Function(FUNC_MINPROPOSALDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Tuple2<Uint256, Uint256> parseVarInt(DynamicBytes txBytes, Uint256 pos) {
        final Function function = new Function(FUNC_PARSEVARINT, 
                Arrays.<Type>asList(txBytes, pos), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = this.trxCntr.executeCallMultipleValueReturn(function);
        return new Tuple2<Uint256, Uint256>(
                                (Uint256) results.get(0), 
                                (Uint256) results.get(1));
    }

    public Uint256 flip32Bytes(Uint256 _input) {
        final Function function = new Function(FUNC_FLIP32BYTES, 
                Arrays.<Type>asList(_input), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Uint256 computeMerkle(Uint256 _txHash, Uint256 _txIndex, DynamicArray<Uint256> _siblings) {
        final Function function = new Function(FUNC_COMPUTEMERKLE, 
                Arrays.<Type>asList(_txHash, _txIndex, _siblings), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Uint256 getBytesLE(DynamicBytes data, Uint256 pos, Uint256 bits){
        final Function function = new Function(FUNC_GETBYTESLE, 
                Arrays.<Type>asList(data, pos, bits), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Uint256 superblockDuration() {
        final Function function = new Function(FUNC_SUPERBLOCKDURATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }
    /*
    public List<NewBattleEventResponse> getNewBattleEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValues> valueList = extractEventParametersWithLog(NEWBATTLE_EVENT, transactionReceipt);
        ArrayList<NewBattleEventResponse> responses = new ArrayList<NewBattleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewBattleEventResponse typedResponse = new NewBattleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewBattleEventResponse> newBattleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewBattleEventResponse>() {
            @Override
            public NewBattleEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWBATTLE_EVENT, log);
                NewBattleEventResponse typedResponse = new NewBattleEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<NewBattleEventResponse> newBattleEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWBATTLE_EVENT));
        return newBattleEventFlowable(filter);
    }

    public List<ChallengerConvictedEventResponse> getChallengerConvictedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHALLENGERCONVICTED_EVENT, transactionReceipt);
        ArrayList<ChallengerConvictedEventResponse> responses = new ArrayList<ChallengerConvictedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChallengerConvictedEventResponse typedResponse = new ChallengerConvictedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
            typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ChallengerConvictedEventResponse> challengerConvictedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ChallengerConvictedEventResponse>() {
            @Override
            public ChallengerConvictedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHALLENGERCONVICTED_EVENT, log);
                ChallengerConvictedEventResponse typedResponse = new ChallengerConvictedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
                typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<ChallengerConvictedEventResponse> challengerConvictedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHALLENGERCONVICTED_EVENT));
        return challengerConvictedEventFlowable(filter);
    }

    public List<SubmitterConvictedEventResponse> getSubmitterConvictedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUBMITTERCONVICTED_EVENT, transactionReceipt);
        ArrayList<SubmitterConvictedEventResponse> responses = new ArrayList<SubmitterConvictedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SubmitterConvictedEventResponse typedResponse = new SubmitterConvictedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SubmitterConvictedEventResponse> submitterConvictedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SubmitterConvictedEventResponse>() {
            @Override
            public SubmitterConvictedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUBMITTERCONVICTED_EVENT, log);
                SubmitterConvictedEventResponse typedResponse = new SubmitterConvictedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<SubmitterConvictedEventResponse> submitterConvictedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUBMITTERCONVICTED_EVENT));
        return submitterConvictedEventFlowable(filter);
    }

    public List<RespondBlockHeadersEventResponse> getRespondBlockHeadersEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RESPONDBLOCKHEADERS_EVENT, transactionReceipt);
        ArrayList<RespondBlockHeadersEventResponse> responses = new ArrayList<RespondBlockHeadersEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RespondBlockHeadersEventResponse typedResponse = new RespondBlockHeadersEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.merkleHashCount = (Uint256) eventValues.getNonIndexedValues().get(1);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RespondBlockHeadersEventResponse> respondBlockHeadersEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RespondBlockHeadersEventResponse>() {
            @Override
            public RespondBlockHeadersEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RESPONDBLOCKHEADERS_EVENT, log);
                RespondBlockHeadersEventResponse typedResponse = new RespondBlockHeadersEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.merkleHashCount = (Uint256) eventValues.getNonIndexedValues().get(1);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<RespondBlockHeadersEventResponse> respondBlockHeadersEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RESPONDBLOCKHEADERS_EVENT));
        return respondBlockHeadersEventFlowable(filter);
    }
    */

    public TransactionReturn init(Uint8 _network, Address _superblocks, Uint256 _superblockDuration, Uint256 _superblockTimeout) {
        final Function function = new Function(
                FUNC_INIT, 
                Arrays.<Type>asList(_network, _superblocks, _superblockDuration, _superblockTimeout), 
                Collections.<TypeReference<?>>emptyList());
        return this.trxCntr.executeRemoteCallTransaction(function);
    }

    public TransactionReturn setVircleClaimManager(Address _vircleClaimManager) {
        final Function function = new Function(
                FUNC_SETVIRCLECLAIMMANAGER, 
                Arrays.<Type>asList(_vircleClaimManager), 
                Collections.<TypeReference<?>>emptyList());
        return this.trxCntr.executeRemoteCallTransaction(function);
    }

    public TransactionReturn beginBattleSession(Bytes32 superblockHash, Address submitter, Address challenger) {
        final Function function = new Function(
                FUNC_BEGINBATTLESESSION, 
                Arrays.<Type>asList(superblockHash, submitter, challenger), 
                Collections.<TypeReference<?>>emptyList());
        return this.trxCntr.executeRemoteCallTransaction(function);
    }

    public Bytes32 sha256mem(DynamicBytes _rawBytes, Uint256 offset, Uint256 len) {
        final Function function = new Function(FUNC_SHA256MEM, 
                Arrays.<Type>asList(_rawBytes, offset, len), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Uint256 dblShaFlipMem(DynamicBytes _rawBytes, Uint256 offset, Uint256 len) {
        final Function function = new Function(FUNC_DBLSHAFLIPMEM, 
                Arrays.<Type>asList(_rawBytes, offset, len), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Uint256 targetFromBits(Uint32 _bits) {
        final Function function = new Function(FUNC_TARGETFROMBITS, 
                Arrays.<Type>asList(_bits), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Bytes32 makeMerkle(DynamicArray<Bytes32> hashes) {
        final Function function = new Function(FUNC_MAKEMERKLE, 
                Arrays.<Type>asList(hashes), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public TransactionReturn respondBlockHeaders(Bytes32 superblockHash, DynamicBytes blockHeaders, Uint256 numHeaders) {
        final Function function = new Function(
                FUNC_RESPONDBLOCKHEADERS, 
                Arrays.<Type>asList(superblockHash, blockHeaders, numHeaders), 
                Collections.<TypeReference<?>>emptyList());
        return this.trxCntr.executeRemoteCallTransaction(function);
    }

    public TransactionReturn timeout(Bytes32 superblockHash) {
        final Function function = new Function(
                FUNC_TIMEOUT, 
                Arrays.<Type>asList(superblockHash), 
                Collections.<TypeReference<?>>emptyList());
        return this.trxCntr.executeRemoteCallTransaction(function);
    }

    public Bool getSubmitterHitTimeout(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUBMITTERHITTIMEOUT, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Uint256 getNumMerkleHashesBySession(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETNUMMERKLEHASHESBYSESSION, 
                Arrays.<Type>asList(superblockHash),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Bool sessionExists(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_SESSIONEXISTS, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class NewBattleEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Address submitter;

        public Address challenger;
    }

    public static class ChallengerConvictedEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Uint256 err;

        public Address challenger;
    }

    public static class SubmitterConvictedEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Uint256 err;

        public Address submitter;
    }

    public static class RespondBlockHeadersEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Uint256 merkleHashCount;

        public Address submitter;
    }
}
