package info.vircletrx.agents.contract;

import info.vircletrx.agents.addition.Tuple3;
import info.vircletrx.agents.addition.Tuple2;
import info.vircletrx.agents.addition.Tuple6;
import info.vircletrx.agents.addition.Tuple9;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;

import org.tron.tronj.abi.TypeReference;
import org.tron.tronj.abi.datatypes.*;
import org.tron.tronj.abi.datatypes.generated.*;
import org.tron.tronj.client.contract.Contract;
import org.tron.tronj.proto.Response.TransactionReturn;

import info.vircletrx.agents.addition.TrxContract;
import info.vircletrx.agents.addition.BaseEventResponse;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.5.
 */
@SuppressWarnings("rawtypes")
public class VircleSuperblocks extends Contract {
    private static final String BINARY = "0x60806040523480156200001157600080fd5b50d380156200001f57600080fd5b50d280156200002d57600080fd5b50616547806200003e6000396000f3fe608060405234801561001057600080fd5b50d3801561001d57600080fd5b50d2801561002a57600080fd5b50600436106102a0576000357c01000000000000000000000000000000000000000000000000000000009004806391c9375c11610188578063c63128aa116100fa578063e8f421df116100be578063e8f421df14611fda578063ed86097614612136578063f06d520d146121b7578063f09a4016146121d5578063fbb381a714612239578063fc96c39614612377576102a0565b8063c63128aa14611a39578063c8bd776814611b1b578063cae0581e14611dc7578063d0f9410b14611e17578063d5c9712f14611ef7576102a0565b8063b6f6580a1161014c578063b6f6580a14611627578063b79bbf4614611669578063b7a8121814611742578063bb3bf22e14611880578063c0dde98b14611995578063c1f67ab3146119d7576102a0565b806391c9375c146113805780639456b0c01461149857806395b45ee7146114e25780639e20c80314611544578063a76a9b0f146115e5576102a0565b80634b6986fd1161022157806355e018ce116101e557806355e018ce146110a95780635b572812146110eb5780636823c56b146111095780636e5b7071146111d857806374205786146112a4578063828fa8b414611306576102a0565b80634b6986fd14610c655780634d7dcfbd14610d525780635358493914610e3257806353a3273d14610f0b578063543a86f614610fda576102a0565b80632e400191116102685780632e400191146107245780632e901cee146107725780633e0e8a2014610a1e578063455e616614610b66578063484162be14610b84576102a0565b8063029c5e2a146102a5578063155ee8941461038a57806324443038146103d457806327426f75146106805780632da8cffd146106e2575b600080fd5b610368600480360360408110156102bb57600080fd5b81019080803590602001906401000000008111156102d857600080fd5b8201836020820111156102ea57600080fd5b8035906020019184600183028401116401000000008311171561030c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919050505061245c565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b61039261249e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61066a600480360360e08110156103ea57600080fd5b810190808035906020019064010000000081111561040757600080fd5b82018360208201111561041957600080fd5b8035906020019184600183028401116401000000008311171561043b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190803590602001906401000000008111156104a857600080fd5b8201836020820111156104ba57600080fd5b803590602001918460208302840111640100000000831117156104dc57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561053c57600080fd5b82018360208201111561054e57600080fd5b8035906020019184600183028401116401000000008311171561057057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190803590602001906401000000008111156105dd57600080fd5b8201836020820111156105ef57600080fd5b8035906020019184602083028401116401000000008311171561061157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291905050506124c4565b6040518082815260200191505060405180910390f35b6106cc6004803603604081101561069657600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612772565b6040518082815260200191505060405180910390f35b61070e600480360360208110156106f857600080fd5b810190808035906020019092919050505061297b565b6040518082815260200191505060405180910390f35b6107506004803603602081101561073a57600080fd5b810190808035906020019092919050505061299b565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b610a08600480360360e081101561078857600080fd5b81019080803590602001906401000000008111156107a557600080fd5b8201836020820111156107b757600080fd5b803590602001918460018302840111640100000000831117156107d957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291908035906020019064010000000081111561084657600080fd5b82018360208201111561085857600080fd5b8035906020019184602083028401116401000000008311171561087a57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156108da57600080fd5b8201836020820111156108ec57600080fd5b8035906020019184600183028401116401000000008311171561090e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291908035906020019064010000000081111561097b57600080fd5b82018360208201111561098d57600080fd5b803590602001918460208302840111640100000000831117156109af57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291905050506129cb565b6040518082815260200191505060405180910390f35b610aeb60048036036060811015610a3457600080fd5b8101908080359060200190640100000000811115610a5157600080fd5b820183602082011115610a6357600080fd5b80359060200191846001830284011164010000000083111715610a8557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919080359060200190929190505050612bf8565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610b2b578082015181840152602081019050610b10565b50505050905090810190601f168015610b585780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610b6e612c60565b6040518082815260200191505060405180910390f35b610c4760048036036040811015610b9a57600080fd5b8101908080359060200190640100000000811115610bb757600080fd5b820183602082011115610bc957600080fd5b80359060200191846001830284011164010000000083111715610beb57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050612c68565b604051808261ffff1661ffff16815260200191505060405180910390f35b610d2860048036036040811015610c7b57600080fd5b8101908080359060200190640100000000811115610c9857600080fd5b820183602082011115610caa57600080fd5b80359060200191846001830284011164010000000083111715610ccc57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050612d78565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b610e1560048036036040811015610d6857600080fd5b8101908080359060200190640100000000811115610d8557600080fd5b820183602082011115610d9757600080fd5b80359060200191846001830284011164010000000083111715610db957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291905050506131c7565b604051808381526020018281526020019250505060405180910390f35b610ef560048036036040811015610e4857600080fd5b8101908080359060200190640100000000811115610e6557600080fd5b820183602082011115610e7757600080fd5b80359060200191846001830284011164010000000083111715610e9957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291905050506132e9565b6040518082815260200191505060405180910390f35b610fc460048036036020811015610f2157600080fd5b8101908080359060200190640100000000811115610f3e57600080fd5b820183602082011115610f5057600080fd5b80359060200191846001830284011164010000000083111715610f7257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506132ff565b6040518082815260200191505060405180910390f35b61109360048036036020811015610ff057600080fd5b810190808035906020019064010000000081111561100d57600080fd5b82018360208201111561101f57600080fd5b8035906020019184600183028401116401000000008311171561104157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050613315565b6040518082815260200191505060405180910390f35b6110d5600480360360208110156110bf57600080fd5b81019080803590602001909291905050506134f3565b6040518082815260200191505060405180910390f35b6110f3613513565b6040518082815260200191505060405180910390f35b6111c26004803603602081101561111f57600080fd5b810190808035906020019064010000000081111561113c57600080fd5b82018360208201111561114e57600080fd5b8035906020019184600183028401116401000000008311171561117057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050613549565b6040518082815260200191505060405180910390f35b611204600480360360208110156111ee57600080fd5b8101908080359060200190929190505050613567565b604051808a81526020018981526020018881526020018781526020018663ffffffff1663ffffffff1681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183600581111561127657fe5b60ff1681526020018263ffffffff1663ffffffff168152602001995050505050505050505060405180910390f35b6112f0600480360360408110156112ba57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613625565b6040518082815260200191505060405180910390f35b61136a600480360360c081101561131c57600080fd5b8101908080359060200190929190803590602001909291908035906020019092919080359060200190929190803563ffffffff1690602001909291908035906020019092919050505061382e565b6040518082815260200191505060405180910390f35b6114436004803603604081101561139657600080fd5b81019080803590602001906401000000008111156113b357600080fd5b8201836020820111156113c557600080fd5b803590602001918460018302840111640100000000831117156113e757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291905050506138b6565b604051808363ffffffff1663ffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390f35b6114a06139eb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61152e600480360360408110156114f857600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613a11565b6040518082815260200191505060405180910390f35b6115c8600480360360e081101561155a57600080fd5b8101908080359060200190929190803590602001909291908035906020019092919080359060200190929190803563ffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613d31565b604051808381526020018281526020019250505060405180910390f35b611611600480360360208110156115fb57600080fd5b8101908080359060200190929190505050614140565b6040518082815260200191505060405180910390f35b6116536004803603602081101561163d57600080fd5b8101908080359060200190929190505050614160565b6040518082815260200191505060405180910390f35b61172c6004803603604081101561167f57600080fd5b810190808035906020019064010000000081111561169c57600080fd5b8201836020820111156116ae57600080fd5b803590602001918460018302840111640100000000831117156116d057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919050505061428f565b6040518082815260200191505060405180910390f35b6118056004803603604081101561175857600080fd5b810190808035906020019064010000000081111561177557600080fd5b82018360208201111561178757600080fd5b803590602001918460018302840111640100000000831117156117a957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291905050506144f3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561184557808201518184015260208101905061182a565b50505050905090810190601f1680156118725780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6119396004803603602081101561189657600080fd5b81019080803590602001906401000000008111156118b357600080fd5b8201836020820111156118c557600080fd5b803590602001918460018302840111640100000000831117156118e757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061460a565b604051808481526020018363ffffffff1663ffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390f35b6119c1600480360360208110156119ab57600080fd5b81019080803590602001909291905050506147d9565b6040518082815260200191505060405180910390f35b611a23600480360360408110156119ed57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061481f565b6040518082815260200191505060405180910390f35b611af260048036036020811015611a4f57600080fd5b8101908080359060200190640100000000811115611a6c57600080fd5b820183602082011115611a7e57600080fd5b80359060200191846001830284011164010000000083111715611aa057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050614acc565b604051808381526020018263ffffffff1663ffffffff1681526020019250505060405180910390f35b611db1600480360360e0811015611b3157600080fd5b8101908080359060200190640100000000811115611b4e57600080fd5b820183602082011115611b6057600080fd5b80359060200191846001830284011164010000000083111715611b8257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919080359060200190640100000000811115611bef57600080fd5b820183602082011115611c0157600080fd5b80359060200191846020830284011164010000000083111715611c2357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115611c8357600080fd5b820183602082011115611c9557600080fd5b80359060200191846001830284011164010000000083111715611cb757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919080359060200190640100000000811115611d2457600080fd5b820183602082011115611d3657600080fd5b80359060200191846020830284011164010000000083111715611d5857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050614b69565b6040518082815260200191505060405180910390f35b611df360048036036020811015611ddd57600080fd5b8101908080359060200190929190505050614d32565b60405180826005811115611e0357fe5b60ff16815260200191505060405180910390f35b611ee160048036036060811015611e2d57600080fd5b81019080803590602001909291908035906020019092919080359060200190640100000000811115611e5e57600080fd5b820183602082011115611e7057600080fd5b80359060200191846020830284011164010000000083111715611e9257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050614d5f565b6040518082815260200191505060405180910390f35b611fc460048036036060811015611f0d57600080fd5b8101908080359060200190640100000000811115611f2a57600080fd5b820183602082011115611f3c57600080fd5b80359060200191846001830284011164010000000083111715611f5e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919080359060200190929190505050614fd9565b6040518082815260200191505060405180910390f35b61209360048036036020811015611ff057600080fd5b810190808035906020019064010000000081111561200d57600080fd5b82018360208201111561201f57600080fd5b8035906020019184600183028401116401000000008311171561204157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050615097565b604051808781526020018681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018463ffffffff1663ffffffff1681526020018360ff1660ff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001965050505050505060405180910390f35b61219a600480360360c081101561214c57600080fd5b8101908080359060200190929190803590602001909291908035906020019092919080359060200190929190803563ffffffff16906020019092919080359060200190929190505050615143565b604051808381526020018281526020019250505060405180910390f35b6121bf615399565b6040518082815260200191505060405180910390f35b612237600480360360408110156121eb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506153a3565b005b6122fc6004803603604081101561224f57600080fd5b810190808035906020019064010000000081111561226c57600080fd5b82018360208201111561227e57600080fd5b803590602001918460018302840111640100000000831117156122a057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050615654565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561233c578082015181840152602081019050612321565b50505050905090810190601f1680156123695780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61243a6004803603604081101561238d57600080fd5b81019080803590602001906401000000008111156123aa57600080fd5b8201836020820111156123bc57600080fd5b803590602001918460018302840111640100000000831117156123de57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291905050506157b1565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b6000816020840101516040518160031a60008201538160021a60018201538160011a60028201538160001a60038201538051601c6008021c9250505092915050565b603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806124d6868686868d8d8d6159d2565b905060008114151561271b576000806000806000806124f48f615097565b809750819650829850839a50849b50859950505050505050600084141515612567577f4e64138cc499eb1adf9edff9ef69bd45c56ac4bfd307540952e4c9d51eab55c18760010285604051808381526020018281526020019250505060405180910390a183975050505050505050612767565b603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663af56f158888888603360008f815260200190815260200160002060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168789886040518863ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018363ffffffff1663ffffffff1681526020018260ff1660ff168152602001975050505050505050600060405180830381600087803b1580156126f457600080fd5b505af1158015612708573d6000803e3d6000fd5b5050505085975050505050505050612767565b7f4e64138cc499eb1adf9edff9ef69bd45c56ac4bfd307540952e4c9d51eab55c1600060010261753a604051808381526020018281526020019250505060405180910390a161753a9150505b979650505050505050565b6000603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612816577fa57c1ba4cf2c89b3558cfeeca4339e04551f0fc1a12cf63f1923c2eed8a5be8b8361c396604051808381526020018281526020019250505060405180910390a161c3969050612975565b60006033600085815260200190815260200160002090506002600581111561283a57fe5b81600501601c9054906101000a900460ff16600581111561285757fe5b1415801561288d57506001600581111561286d57fe5b81600501601c9054906101000a900460ff16600581111561288a57fe5b14155b156128de577fa57c1ba4cf2c89b3558cfeeca4339e04551f0fc1a12cf63f1923c2eed8a5be8b8461c364604051808381526020018281526020019250505060405180910390a161c364915050612975565b600381600501601c6101000a81548160ff021916908360058111156128ff57fe5b02179055507f87f54f5eb3dd119fe71af0915af693e64a5bfd4acaa19a6c944c47cff8eec9e68484604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a160009150505b92915050565b600060336000838152602001908152602001600020600101549050919050565b60006033600083815260200190815260200160002060050160189054906101000a900463ffffffff169050919050565b6000806129dd868686868d8d8d6159d2565b9050600081141515612ba15760008060006129f78c61460a565b809350819450829550505050600083141515612a5b577f4e64138cc499eb1adf9edff9ef69bd45c56ac4bfd307540952e4c9d51eab55c18460010284604051808381526020018281526020019250505060405180910390a182945050505050612bed565b6000603c6033600089815260200190815260200160002060050160189054906101000a900463ffffffff160290508881019050603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166317c047e1868584866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808581526020018463ffffffff1663ffffffff1681526020018363ffffffff1663ffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001945050505050600060405180830381600087803b158015612b7b57600080fd5b505af1158015612b8f573d6000803e3d6000fd5b50505050600095505050505050612bed565b7f4e64138cc499eb1adf9edff9ef69bd45c56ac4bfd307540952e4c9d51eab55c1600060010261753a604051808381526020018281526020019250505060405180910390a161753a9150505b979650505050505050565b6060600083830390506060816040519080825280601f01601f191660200182016040528015612c365781602001600182028038833980820191505090505b5090508160208201838760208a010160045afa1515612c5457600080fd5b80925050509392505050565b633b9aca0081565b60006101008383815181101515612c7b57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff16028360018401815181101515612cfe57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff1601905092915050565b60006701000000000000008383815181101515612d9157fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff160266010000000000008460018501815181101515612e1c57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff1602650100000000008560028601815181101515612ea657fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff16026401000000008660038701815181101515612f2f57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff160263010000008760048801815181101515612fb757fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff160262010000886005890181518110151561303e57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff16026101008960068a018151811015156130c457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff16028960078a0181518110151561314757fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff1601010101010101905092915050565b600080600084848151811015156131da57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004905060018401935060fd8160ff16101561326e5780848160ff16915092509250506132e2565b60fd8160ff1614156132945761328685856010614fd9565b6002850192509250506132e2565b60fe8160ff1614156132ba576132ac85856020614fd9565b6004850192509250506132e2565b60ff8160ff1614156132e0576132d285856040614fd9565b6008850192509250506132e2565b505b9250929050565b6000808260208501015190508091505092915050565b6000806003905080602002830151915050919050565b60006134ec600280846040516020018082805190602001908083835b6020831015156133565780518252602082019150602081019050602083039250613331565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831015156133bf578051825260208201915060208101905060208303925061339a565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa158015613401573d6000803e3d6000fd5b5050506040513d602081101561341657600080fd5b8101908080519060200190929190505050604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b60208310151561347b5780518252602082019150602081019050602083039250613456565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa1580156134bd573d6000803e3d6000fd5b5050506040513d60208110156134d257600080fd5b810190808051906020019092919050505060019004614160565b9050919050565b600060336000838152602001908152602001600020600401549050919050565b600060336000603454815260200190815260200160002060050160189054906101000a900463ffffffff1663ffffffff16905090565b6000806024602084010151905061355f81614160565b915050919050565b600080600080600080600080600080603360008c8152602001908152602001600020905080600001548160010154826002015483600301548460050160149054906101000a900463ffffffff1685600401548660050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1687600501601c9054906101000a900460ff168860050160189054906101000a900463ffffffff16995099509950995099509950995099509950509193959799909294969850565b6000603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156136c9577fa57c1ba4cf2c89b3558cfeeca4339e04551f0fc1a12cf63f1923c2eed8a5be8b8361c396604051808381526020018281526020019250505060405180910390a161c3969050613828565b6000603360008581526020019081526020016000209050600260058111156136ed57fe5b81600501601c9054906101000a900460ff16600581111561370a57fe5b1415801561374057506003600581111561372057fe5b81600501601c9054906101000a900460ff16600581111561373d57fe5b14155b15613791577fa57c1ba4cf2c89b3558cfeeca4339e04551f0fc1a12cf63f1923c2eed8a5be8b8461c364604051808381526020018281526020019250505060405180910390a161c364915050613828565b600581600501601c6101000a81548160ff021916908360058111156137b257fe5b02179055507f64297372062dfcb21d6f7385f68d4656e993be2bb674099e3de73128d4911a918484604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a160009150505b92915050565b6000868686868686604051602001808781526020018681526020018581526020018481526020018363ffffffff1663ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040182815260200196505050505050506040516020818303038152906040528051906020012090509695505050505050565b60008060008060006138c887876131c7565b809750819250505080860195506020860195506138e5878761245c565b92506004860195506138f787876131c7565b8097508192505050808601955060018601955061391487876131c7565b8097508192505050808601955060018601955061393187876131c7565b8097508192505050808601955060088601955060088601955060088601955060048601955060018601955060018601955061396c87876131c7565b80975081925050506014811415156139cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603e81526020018061643b603e913960400191505060405180910390fd5b6139d98787615a71565b91508282945094505050509250929050565b603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613ab5577fa57c1ba4cf2c89b3558cfeeca4339e04551f0fc1a12cf63f1923c2eed8a5be8b8361c396604051808381526020018281526020019250505060405180910390a161c3969050613d2b565b600060336000858152602001908152602001600020905060016005811115613ad957fe5b81600501601c9054906101000a900460ff166005811115613af657fe5b14158015613b2c575060036005811115613b0c57fe5b81600501601c9054906101000a900460ff166005811115613b2957fe5b14155b15613b7d577fa57c1ba4cf2c89b3558cfeeca4339e04551f0fc1a12cf63f1923c2eed8a5be8b8461c364604051808381526020018281526020019250505060405180910390a161c364915050613d2b565b613b85613513565b8160050160189054906101000a900463ffffffff1663ffffffff16111515613bf3577fa57c1ba4cf2c89b3558cfeeca4339e04551f0fc1a12cf63f1923c2eed8a5be8b8461c3fa604051808381526020018281526020019250505060405180910390a161c3fa915050613d2b565b60006033600083600401548152602001908152602001600020905060046005811115613c1b57fe5b81600501601c9054906101000a900460ff166005811115613c3857fe5b141515613c8c577fa57c1ba4cf2c89b3558cfeeca4339e04551f0fc1a12cf63f1923c2eed8a5be8b8561c378604051808381526020018281526020019250505060405180910390a161c37892505050613d2b565b600482600501601c6101000a81548160ff02191690836005811115613cad57fe5b0217905550846034819055507ff2dbbf0abb1ab1870a5e4d02746747c91d167c855255440b573ba3b5529dc9018585604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a16000925050505b92915050565b600080603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613de4577fa57c1ba4cf2c89b3558cfeeca4339e04551f0fc1a12cf63f1923c2eed8a5be8b600061c396604051808360010281526020018281526020019250505060405180910390a161c396600080600102905091509150614134565b600060336000868152602001908152602001600020905060036005811115613e0857fe5b81600501601c9054906101000a900460ff166005811115613e2557fe5b14158015613e5b575060046005811115613e3b57fe5b81600501601c9054906101000a900460ff166005811115613e5857fe5b14155b15613ef2577fa57c1ba4cf2c89b3558cfeeca4339e04551f0fc1a12cf63f1923c2eed8a5be8b8582600501601c9054906101000a900460ff166005811115613e9f57fe5b61c37801604051808381526020018281526020019250505060405180910390a180600501601c9054906101000a900460ff166005811115613edc57fe5b61c3780160008060010290509250925050614134565b613efa613513565b8160050160189054906101000a900463ffffffff1663ffffffff161015613f71577fa57c1ba4cf2c89b3558cfeeca4339e04551f0fc1a12cf63f1923c2eed8a5be8b8561c3fa604051808381526020018281526020019250505060405180910390a161c3fa60008060010290509250925050614134565b6000613f818b8b8b8b8b8b61382e565b9050600060336000838152602001908152602001600020905060006005811115613fa757fe5b81600501601c9054906101000a900460ff166005811115613fc457fe5b1415614055578b81600001819055508a816001018190555089816002018190555088816003018190555086816004018190555060018360050160189054906101000a900463ffffffff16018160050160186101000a81548163ffffffff021916908363ffffffff160217905550878160050160146101000a81548163ffffffff021916908363ffffffff1602179055505b600181600501601c6101000a81548160ff0219169083600581111561407657fe5b0217905550858160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f64951c9008bba9f4663c12662e7a9b6412a7c4757869fdac09285564ae923fa18287604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1600082945094505050505b97509795505050505050565b600060336000838152602001908152602001600020600201549050919050565b600060405182601f1a600082015382601e1a600182015382601d1a600282015382601c1a600382015382601b1a600482015382601a1a60058201538260191a60068201538260181a60078201538260171a60088201538260161a60098201538260151a600a8201538260141a600b8201538260131a600c8201538260121a600d8201538260111a600e8201538260101a600f82015382600f1a601082015382600e1a601182015382600d1a601282015382600c1a601382015382600b1a601482015382600a1a60158201538260091a60168201538260081a60178201538260071a60188201538260061a60198201538260051a601a8201538260041a601b8201538260031a601c8201538260021a601d8201538260011a601e8201538260001a601f8201538051915050919050565b60008060008060006142a187876131c7565b80975081955050506000841415614333576142bc87876131c7565b809750819550505060008414151515614320576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603a815260200180616395603a913960400191505060405180910390fd5b61432a87876131c7565b80975081955050505b60648410151561438e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603f8152602001806164a7603f913960400191505060405180910390fd5b60008090505b848110156143c9576024870196506143ac88886131c7565b809850819550505060048401870196508080600101915050614394565b506143d487876131c7565b8097508192505050600a81101515614437576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260408152602001806163fb6040913960400191505060405180910390fd5b60008090505b8181101561449b5760088701965061445588886131c7565b80985081955050506144678888615a87565b151561447b5783870196506000925061448e565b60018701965086955050505050506144ed565b808060010191505061443d565b506040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001806164e66036913960400191505060405180910390fd5b92915050565b60608060006040519080825280601f01601f19166020018201604052801561452a5781602001600182028038833980820191505090505b509050600061453985856131c7565b8095508192505050808401935061455085856131c7565b8095508192505050808401935061456785856131c7565b8095508192505050808401935061457e85856131c7565b8095508192505050808401935061459585856131c7565b809550819250505060028114156145ef5760006145b28686612c68565b905081850194506145c386866131c7565b80965081935050508061ffff16850194506145e786868361ffff1685038801612bf8565b9250506145ff565b6145fc8585838701612bf8565b91505b819250505092915050565b600080600080600080905061461f868261245c565b915061740263ffffffff168263ffffffff161415801561464d575061740363ffffffff168263ffffffff1614155b1561466b576127ba60008081915080905094509450945050506147d2565b61467686600461428f565b90506000866001830181518110151561468b57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000029050600282019150604d7f010000000000000000000000000000000000000000000000000000000000000002817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156147345781806001019250505b61473e87836138b6565b8095508196505050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156147ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001806163cf602c913960400191505060405180910390fd5b5050505b9193909250565b60008060345490505b826147ec8261299b565b63ffffffff16111561481657603360008281526020019081526020016000206004015490506147e2565b80915050919050565b6000603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156148c3577fa57c1ba4cf2c89b3558cfeeca4339e04551f0fc1a12cf63f1923c2eed8a5be8b8361c396604051808381526020018281526020019250505060405180910390a161c3969050614ac6565b6000603360008581526020019081526020016000209050600160058111156148e757fe5b81600501601c9054906101000a900460ff16600581111561490457fe5b1415801561493a57506002600581111561491a57fe5b81600501601c9054906101000a900460ff16600581111561493757fe5b14155b1561498b577fa57c1ba4cf2c89b3558cfeeca4339e04551f0fc1a12cf63f1923c2eed8a5be8b8461c364604051808381526020018281526020019250505060405180910390a161c364915050614ac6565b8273ffffffffffffffffffffffffffffffffffffffff168160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415614a2f577fa57c1ba4cf2c89b3558cfeeca4339e04551f0fc1a12cf63f1923c2eed8a5be8b8461c387604051808381526020018281526020019250505060405180910390a161c387915050614ac6565b600281600501601c6101000a81548160ff02191690836005811115614a5057fe5b02179055507f09cdaca254aa177f759fe7a0968fe696ee9baf7d2a1d4714ed24b83d1f09518e8484604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a160009150505b92915050565b60008060008060009050614ae0858261245c565b915061740663ffffffff168263ffffffff16141515614b08576127ba83935093505050614b64565b614b1385600461428f565b905060038101905060007faabab1db49e504b5156edf3f99042aeecb9607a08f392589571cd49743aaba8d6001029050614b5e614b59614b5388856144f3565b83615654565b6132ff565b93505050505b915091565b600080614b7b868686868d8d8d6159d2565b9050600081141515614ce757600080614b938b614acc565b8093508192505050600081141515614bf2577f4e64138cc499eb1adf9edff9ef69bd45c56ac4bfd307540952e4c9d51eab55c18360010282604051808381526020018281526020019250505060405180910390a1809350505050614d27565b603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636cde8d6f83336040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808363ffffffff1663ffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b158015614cc357600080fd5b505af1158015614cd7573d6000803e3d6000fd5b5050505060009350505050614d27565b7f52fd0c7e41cb237ece28ba61808cab7bb72873b2dba5b827c5b65bb092102d376175446040518082815260200191505060405180910390a16175449150505b979650505050505050565b600060336000838152602001908152602001600020600501601c9054906101000a900460ff169050919050565b6000808251905060008090505b81811015614dbd57614d948482815181101515614d8557fe5b90602001906020020151614160565b8482815181101515614da257fe5b90602001906020020181815250508080600101915050614d6c565b600090506000614dcc87614160565b90505b82821015614fc45760008583815181101515614de757fe5b906020019060200201519050600080600160028a811515614e0457fe5b061415614e1657829150839050614e1d565b8391508290505b600280838360405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515614e7d5780518252602082019150602081019050602083039250614e58565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa158015614ebf573d6000803e3d6000fd5b5050506040513d6020811015614ed457600080fd5b8101908080519060200190929190505050604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083101515614f395780518252602082019150602081019050602083039250614f14565b6001836020036101000a038019825116818451168082178552505050505050905001915050602060405180830381855afa158015614f7b573d6000803e3d6000fd5b5050506040513d6020811015614f9057600080fd5b8101908080519060200190929190505050600190049350600289811515614fb357fe5b049850600185019450505050614dcf565b614fcd81614160565b93505050509392505050565b600080600090505b600883811515614fed57fe5b0481101561508f576008810260020a8582860181518110151561500c57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff1602820191508080600101915050614fe1565b509392505050565b60008060008060008060008060008060008060008090506150b88e8261245c565b935061740763ffffffff168463ffffffff161415156150f1576127ba87868885879c509c509c509c509c509c505050505050505061513a565b6150fc8e600461428f565b90506151088e82615b53565b809750819650829a50839950849b505050505050600087868885878595509c509c509c509c509c509c50505050505050505b91939550919395565b600080600060010260345414151561515a57600080fd5b60006001028314151561516c57600080fd5b600061517c89898989898961382e565b90506000603360008381526020019081526020016000209050600060058111156151a257fe5b81600501601c9054906101000a900460ff1660058111156151bf57fe5b1415156151cb57600080fd5b898160000181905550888160010181905550878160020181905550868160030181905550848160040181905550338160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018160050160186101000a81548163ffffffff021916908363ffffffff160217905550858160050160146101000a81548163ffffffff021916908363ffffffff160217905550600481600501601c6101000a81548160ff021916908360058111156152a357fe5b02179055507f64951c9008bba9f4663c12662e7a9b6412a7c4757869fdac09285564ae923fa18233604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1816034819055507ff2dbbf0abb1ab1870a5e4d02746747c91d167c855255440b573ba3b5529dc9018233604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1600082935093505050965096945050505050565b6000603454905090565b600060019054906101000a900460ff16806153c257506153c1615d0f565b5b806153d957506000809054906101000a900460ff16155b1515615430576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180616479602e913960400191505060405180910390fd5b60008060019054906101000a900460ff161590508015615480576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff16603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614801561550b5750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b151561551657600080fd5b82603560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff16603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480156155e25750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15156155ed57600080fd5b81603660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550801561564f5760008060016101000a81548160ff0219169083151502179055505b505050565b60608061566861566385615d20565b615d4e565b9050606061568d82600381518110151561567e57fe5b90602001906020020151615d4e565b905060008090505b815181101561573c5760606156c083838151811015156156b157fe5b90602001906020020151615d4e565b905060606156e58260018151811015156156d657fe5b90602001906020020151615e31565b905060006156f48260016132e9565b90508781141561572c5761571f83600281518110151561571057fe5b90602001906020020151615e31565b96505050505050506157ab565b5050508080600101915050615695565b506040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f546f706963206e6f7420666f756e64000000000000000000000000000000000081525060200191505060405180910390fd5b92915050565b6000630100000083838151811015156157c657fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff160262010000846001850181518110151561584d57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff160261010085600286018151811015156158d357fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff1602856003860181518110151561595657fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff16010101905092915050565b600060336000868152602001908152602001600020600001546159fe6159f78a613315565b8989614d5f565b600102141515615a56577f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd6000600102614e66604051808381526020018281526020019250505060405180910390a160009050615a66565b615a638484848b89615ebf565b90505b979650505050505050565b6000808260148501015190508091505092915050565b6000606a7f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168383815181101515615add57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614905092915050565b6000806000806000806000806000806000615b6e8d8d615f52565b809d50819250505060048160ff16141515615b8857600080fd5b615b928d8d6157b1565b95508060ff168c019b50615ba68d8d615f52565b809d50819250505060088160ff16141515615bc057600080fd5b615bca8d8d612d78565b67ffffffffffffffff1692508060ff168c019b50615be88d8d615f52565b809d50819250505060148160ff16141515615c0257600080fd5b615c0c8d8d615a71565b94508060ff168c019b50615c208d8d615f52565b809d50819250505060018160ff16141515615c3a57600080fd5b8c8c815181101515615c4857fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900491508060ff168c019b50615cca8d8d615f52565b809d50819250505060148160ff16141515615ce457600080fd5b615cee8d8d615a71565b935082858784879a509a509a509a509a505050505050509295509295909350565b600080303b90506000811491505090565b615d28616360565b600060208301905060408051908101604052808451815260200182815250915050919050565b6060615d5982615fef565b1515615d6457600080fd5b6000615d6f8361603d565b9050606081604051908082528060200260200182016040528015615dad57816020015b615d9a61637a565b815260200190600190039081615d925790505b5090506000615dbf85602001516160ae565b8560200151019050600080600090505b84811015615e2457615de083616137565b91506040805190810160405280838152602001848152508482815181101515615e0557fe5b9060200190602002018190525081830192508080600101915050615dcf565b5082945050505050919050565b606060008260000151111515615e4657600080fd5b6000615e5583602001516160ae565b905060008184600001510390506060816040519080825280601f01601f191660200182016040528015615e975781602001600182028038833980820191505090505b5090506000816020019050615eb38487602001510182856161ef565b81945050505050919050565b600080615ecb87613315565b9050604087511415615f25577f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd81600102614e5c604051808381526020018281526020019250505060405180910390a16000915050615f49565b6001615f348288888888616258565b1415615f435780915050615f49565b60009150505b95945050505050565b600080835183101515615f6457600080fd5b8383815181101515615f7257fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460018401915091509250929050565b600080826000015114156160065760009050616038565b60008083602001519050805160001a915060c060ff168260ff16101561603157600092505050616038565b6001925050505b919050565b6000808260000151141561605457600090506160a9565b6000809050600061606884602001516160ae565b84602001510190506000846000015185602001510190505b808210156160a25761609182616137565b820191508280600101935050616080565b8293505050505b919050565b600080825160001a9050608060ff168110156160ce576000915050616132565b60b860ff168110806160f3575060c060ff1681101580156160f2575060f860ff1681105b5b15616102576001915050616132565b60c060ff168110156161225760018060b80360ff16820301915050616132565b60018060f80360ff168203019150505b919050565b6000806000835160001a9050608060ff1681101561615857600191506161e5565b60b860ff16811015616175576001608060ff1682030191506161e4565b60c060ff168110156161a55760b78103600185019450806020036101000a855104600182018101935050506161e3565b60f860ff168110156161c257600160c060ff1682030191506161e2565b60f78103600185019450806020036101000a855104600182018101935050505b5b5b5b8192505050919050565b60008114156161fd57616253565b5b602060ff168110151561622f5782518252602060ff1683019250602060ff1682019150602060ff16810390506161fe565b6000600182602060ff16036101000a03905080198451168184511681811785525050505b505050565b600061626382616335565b15156162b7577f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd86600102614e3e604051808381526020018281526020019250505060405180910390a1614e3e905061632c565b60006162c284613549565b9050806162d0888888614d5f565b141515616326577f65bd72698b9ffcfb3c7cb4c7414e13225cabd57fb690e183ae8c01c8ec268ebd87600102614e52604051808381526020018281526020019250505060405180910390a1614e5291505061632c565b60019150505b95945050505050565b60006004600581111561634457fe5b61634d83614d32565b600581111561635857fe5b149050919050565b604080519081016040528060008152602001600081525090565b60408051908101604052806000815260200160008152509056fe23566972636c655375706572626c6f636b73206765744f7052657475726e506f7328293a20556e65787065637465642064756d6d792f666c616770617273654173736574547828293a206572633230416464726573732063616e6e6f7420626520656d70747923566972636c655375706572626c6f636b73206765744f7052657475726e506f7328293a20496e636f72726563742073697a65206f66206e5f6f7574707574737363616e4173736574547828293a20496e76616c6964206e756d626572206f66206279746573207265616420666f7220636f6e7472616374206669656c64436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a656423566972636c655375706572626c6f636b73206765744f7052657475726e506f7328293a20496e636f72726563742073697a65206f66206e5f696e7075747323566972636c655375706572626c6f636b73206765744f7052657475726e506f7328293a204e6f204f7052657475726e20666f756e64a165627a7a72305820e436de12c26f95c99f59edf8cd93ace129641015bc413a7b3c149c139f0691730029";

    public static final String FUNC_BYTESTOUINT32FLIPPED = "bytesToUint32Flipped";

    public static final String FUNC_TRUSTEDCLAIMMANAGER = "trustedClaimManager";

    public static final String FUNC_SLICEARRAY = "sliceArray";

    public static final String FUNC_MINPROPOSALDEPOSIT = "minProposalDeposit";

    public static final String FUNC_PARSEVARINT = "parseVarInt";

    public static final String FUNC_VIRCLEERC20MANAGER = "vircleERC20Manager";

    public static final String FUNC_FLIP32BYTES = "flip32Bytes";

    public static final String FUNC_COMPUTEMERKLE = "computeMerkle";

    public static final String FUNC_GETBYTESLE = "getBytesLE";

    public static final String FUNC_INIT = "init";

    public static final String FUNC_BYTESTOUINT64 = "bytesToUint64";

    public static final String FUNC_BYTESTOUINT32 = "bytesToUint32";

    public static final String FUNC_GETOPRETURNPOS = "getOpReturnPos";

    public static final String FUNC_PARSEMINTTX = "parseMintTx";

    public static final String FUNC_PARSEASSETTX = "parseAssetTx";

    public static final String FUNC_BYTESTOUINT16 = "bytesToUint16";

    public static final String FUNC_GETETHRECEIPT = "getEthReceipt";

    public static final String FUNC_SCANASSETTX = "scanAssetTx";

    public static final String FUNC_BYTESTOBYTES32 = "bytesToBytes32";

    public static final String FUNC_GETLOGVALUESFORTOPIC = "getLogValuesForTopic";

    public static final String FUNC_GETBRIDGETRANSACTIONID = "getBridgeTransactionId";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_PROPOSE = "propose";

    public static final String FUNC_CONFIRM = "confirm";

    public static final String FUNC_CHALLENGE = "challenge";

    public static final String FUNC_SEMIAPPROVE = "semiApprove";

    public static final String FUNC_INVALIDATE = "invalidate";

    public static final String FUNC_RELAYTX = "relayTx";

    public static final String FUNC_RELAYASSETTX = "relayAssetTx";

    public static final String FUNC_CHALLENGECANCELTRANSFER = "challengeCancelTransfer";

    public static final String FUNC_PARSEBURNTX = "parseBurnTx";

    public static final String FUNC_DBLSHAFLIP = "dblShaFlip";

    public static final String FUNC_GETHEADERMERKLEROOT = "getHeaderMerkleRoot";

    public static final String FUNC_CALCSUPERBLOCKHASH = "calcSuperblockHash";

    public static final String FUNC_GETBESTSUPERBLOCK = "getBestSuperblock";

    public static final String FUNC_GETSUPERBLOCK = "getSuperblock";

    public static final String FUNC_GETSUPERBLOCKHEIGHT = "getSuperblockHeight";

    public static final String FUNC_GETSUPERBLOCKTIMESTAMP = "getSuperblockTimestamp";

    public static final String FUNC_GETSUPERBLOCKMEDIANTIMESTAMP = "getSuperblockMedianTimestamp";

    public static final String FUNC_GETSUPERBLOCKPARENTID = "getSuperblockParentId";

    public static final String FUNC_GETSUPERBLOCKSTATUS = "getSuperblockStatus";

    public static final String FUNC_GETCHAINHEIGHT = "getChainHeight";

    public static final String FUNC_GETSUPERBLOCKAT = "getSuperblockAt";

    public static final Event NEWSUPERBLOCK_EVENT = new Event("NewSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event APPROVEDSUPERBLOCK_EVENT = new Event("ApprovedSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event CHALLENGESUPERBLOCK_EVENT = new Event("ChallengeSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SEMIAPPROVEDSUPERBLOCK_EVENT = new Event("SemiApprovedSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event INVALIDSUPERBLOCK_EVENT = new Event("InvalidSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event ERRORSUPERBLOCK_EVENT = new Event("ErrorSuperblock", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event VERIFYTRANSACTION_EVENT = new Event("VerifyTransaction", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event RELAYTRANSACTION_EVENT = new Event("RelayTransaction", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event CHALLENGECANCELTRANSFERREQUEST_EVENT = new Event("ChallengeCancelTransferRequest", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        // _addresses.put("1", "0x2ea7bc4dfec447c4c854fc59f5ab3ac9e969314d");
        _addresses.put("1", "TVr5pDSzhq5xuVKSVdJ1H5uHmzkBhhSGP9");
    }

    private TrxContract trxCntr;
    public VircleSuperblocks(TrxContract trxCntr) {
        super(trxCntr.getContract(), trxCntr.getOwnerAddress(), trxCntr.getClient());
        this.trxCntr = trxCntr;
    }

    public Uint32 bytesToUint32Flipped(DynamicBytes input, Uint256 pos) {
        final Function function = new Function(FUNC_BYTESTOUINT32FLIPPED, 
                Arrays.<Type>asList(input, pos), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Address trustedClaimManager() {
        final Function function = new Function(FUNC_TRUSTEDCLAIMMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public DynamicBytes sliceArray(DynamicBytes _rawBytes, Uint256 offset, Uint256 _endIndex) {
        final Function function = new Function(FUNC_SLICEARRAY, 
                Arrays.<Type>asList(_rawBytes, offset, _endIndex), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Uint256 minProposalDeposit() {
        final Function function = new Function(FUNC_MINPROPOSALDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }
    /*
    public RemoteFunctionCall<Tuple2<Uint256, Uint256>> parseVarInt(DynamicBytes txBytes, Uint256 pos) {
        final Function function = new Function(FUNC_PARSEVARINT, 
                Arrays.<Type>asList(txBytes, pos), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<Uint256, Uint256>>(function,
                new Callable<Tuple2<Uint256, Uint256>>() {
                    @Override
                    public Tuple2<Uint256, Uint256> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<Uint256, Uint256>(
                                (Uint256) results.get(0), 
                                (Uint256) results.get(1));
                    }
                });
    }
    */
    public Address vircleERC20Manager() {
        final Function function = new Function(FUNC_VIRCLEERC20MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Uint256 flip32Bytes(Uint256 _input) {
        final Function function = new Function(FUNC_FLIP32BYTES, 
                Arrays.<Type>asList(_input), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Uint256 computeMerkle(Uint256 _txHash, Uint256 _txIndex, DynamicArray<Uint256> _siblings) {
        final Function function = new Function(FUNC_COMPUTEMERKLE, 
                Arrays.<Type>asList(_txHash, _txIndex, _siblings), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Uint256 getBytesLE(DynamicBytes data, Uint256 pos, Uint256 bits) {
        final Function function = new Function(FUNC_GETBYTESLE, 
                Arrays.<Type>asList(data, pos, bits), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }
    /*
    public List<NewSuperblockEventResponse> getNewSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<NewSuperblockEventResponse> responses = new ArrayList<NewSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewSuperblockEventResponse typedResponse = new NewSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewSuperblockEventResponse> newSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewSuperblockEventResponse>() {
            @Override
            public NewSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWSUPERBLOCK_EVENT, log);
                NewSuperblockEventResponse typedResponse = new NewSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<NewSuperblockEventResponse> newSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWSUPERBLOCK_EVENT));
        return newSuperblockEventFlowable(filter);
    }

    public List<ApprovedSuperblockEventResponse> getApprovedSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVEDSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<ApprovedSuperblockEventResponse> responses = new ArrayList<ApprovedSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovedSuperblockEventResponse typedResponse = new ApprovedSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovedSuperblockEventResponse> approvedSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ApprovedSuperblockEventResponse>() {
            @Override
            public ApprovedSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVEDSUPERBLOCK_EVENT, log);
                ApprovedSuperblockEventResponse typedResponse = new ApprovedSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovedSuperblockEventResponse> approvedSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVEDSUPERBLOCK_EVENT));
        return approvedSuperblockEventFlowable(filter);
    }

    public List<ChallengeSuperblockEventResponse> getChallengeSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHALLENGESUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<ChallengeSuperblockEventResponse> responses = new ArrayList<ChallengeSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChallengeSuperblockEventResponse typedResponse = new ChallengeSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ChallengeSuperblockEventResponse> challengeSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ChallengeSuperblockEventResponse>() {
            @Override
            public ChallengeSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHALLENGESUPERBLOCK_EVENT, log);
                ChallengeSuperblockEventResponse typedResponse = new ChallengeSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ChallengeSuperblockEventResponse> challengeSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHALLENGESUPERBLOCK_EVENT));
        return challengeSuperblockEventFlowable(filter);
    }

    public List<SemiApprovedSuperblockEventResponse> getSemiApprovedSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SEMIAPPROVEDSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<SemiApprovedSuperblockEventResponse> responses = new ArrayList<SemiApprovedSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SemiApprovedSuperblockEventResponse typedResponse = new SemiApprovedSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SemiApprovedSuperblockEventResponse> semiApprovedSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SemiApprovedSuperblockEventResponse>() {
            @Override
            public SemiApprovedSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SEMIAPPROVEDSUPERBLOCK_EVENT, log);
                SemiApprovedSuperblockEventResponse typedResponse = new SemiApprovedSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SemiApprovedSuperblockEventResponse> semiApprovedSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SEMIAPPROVEDSUPERBLOCK_EVENT));
        return semiApprovedSuperblockEventFlowable(filter);
    }

    public List<InvalidSuperblockEventResponse> getInvalidSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INVALIDSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<InvalidSuperblockEventResponse> responses = new ArrayList<InvalidSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InvalidSuperblockEventResponse typedResponse = new InvalidSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<InvalidSuperblockEventResponse> invalidSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, InvalidSuperblockEventResponse>() {
            @Override
            public InvalidSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(INVALIDSUPERBLOCK_EVENT, log);
                InvalidSuperblockEventResponse typedResponse = new InvalidSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<InvalidSuperblockEventResponse> invalidSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INVALIDSUPERBLOCK_EVENT));
        return invalidSuperblockEventFlowable(filter);
    }

    public List<ErrorSuperblockEventResponse> getErrorSuperblockEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ERRORSUPERBLOCK_EVENT, transactionReceipt);
        ArrayList<ErrorSuperblockEventResponse> responses = new ArrayList<ErrorSuperblockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorSuperblockEventResponse typedResponse = new ErrorSuperblockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ErrorSuperblockEventResponse> errorSuperblockEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ErrorSuperblockEventResponse>() {
            @Override
            public ErrorSuperblockEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ERRORSUPERBLOCK_EVENT, log);
                ErrorSuperblockEventResponse typedResponse = new ErrorSuperblockEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ErrorSuperblockEventResponse> errorSuperblockEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ERRORSUPERBLOCK_EVENT));
        return errorSuperblockEventFlowable(filter);
    }

    public List<VerifyTransactionEventResponse> getVerifyTransactionEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VERIFYTRANSACTION_EVENT, transactionReceipt);
        ArrayList<VerifyTransactionEventResponse> responses = new ArrayList<VerifyTransactionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VerifyTransactionEventResponse typedResponse = new VerifyTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VerifyTransactionEventResponse> verifyTransactionEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, VerifyTransactionEventResponse>() {
            @Override
            public VerifyTransactionEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VERIFYTRANSACTION_EVENT, log);
                VerifyTransactionEventResponse typedResponse = new VerifyTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<VerifyTransactionEventResponse> verifyTransactionEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VERIFYTRANSACTION_EVENT));
        return verifyTransactionEventFlowable(filter);
    }

    public List<RelayTransactionEventResponse> getRelayTransactionEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RELAYTRANSACTION_EVENT, transactionReceipt);
        ArrayList<RelayTransactionEventResponse> responses = new ArrayList<RelayTransactionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RelayTransactionEventResponse typedResponse = new RelayTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RelayTransactionEventResponse> relayTransactionEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RelayTransactionEventResponse>() {
            @Override
            public RelayTransactionEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RELAYTRANSACTION_EVENT, log);
                RelayTransactionEventResponse typedResponse = new RelayTransactionEventResponse();
                typedResponse.log = log;
                typedResponse.txHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<RelayTransactionEventResponse> relayTransactionEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RELAYTRANSACTION_EVENT));
        return relayTransactionEventFlowable(filter);
    }

    public List<ChallengeCancelTransferRequestEventResponse> getChallengeCancelTransferRequestEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHALLENGECANCELTRANSFERREQUEST_EVENT, transactionReceipt);
        ArrayList<ChallengeCancelTransferRequestEventResponse> responses = new ArrayList<ChallengeCancelTransferRequestEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChallengeCancelTransferRequestEventResponse typedResponse = new ChallengeCancelTransferRequestEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ChallengeCancelTransferRequestEventResponse> challengeCancelTransferRequestEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ChallengeCancelTransferRequestEventResponse>() {
            @Override
            public ChallengeCancelTransferRequestEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHALLENGECANCELTRANSFERREQUEST_EVENT, log);
                ChallengeCancelTransferRequestEventResponse typedResponse = new ChallengeCancelTransferRequestEventResponse();
                typedResponse.log = log;
                typedResponse.returnCode = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<ChallengeCancelTransferRequestEventResponse> challengeCancelTransferRequestEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHALLENGECANCELTRANSFERREQUEST_EVENT));
        return challengeCancelTransferRequestEventFlowable(filter);
    }
    */

    public TransactionReturn init(Address _vircleERC20Manager, Address _claimManager) {
        final Function function = new Function(
                FUNC_INIT, 
                Arrays.<Type>asList(_vircleERC20Manager, _claimManager), 
                Collections.<TypeReference<?>>emptyList());
        return this.trxCntr.executeRemoteCallTransaction(function);
    }

    public Uint64 bytesToUint64(DynamicBytes input, Uint256 pos) {
        final Function function = new Function(FUNC_BYTESTOUINT64, 
                Arrays.<Type>asList(input, pos), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Uint32 bytesToUint32(DynamicBytes input, Uint256 pos) {
        final Function function = new Function(FUNC_BYTESTOUINT32, 
                Arrays.<Type>asList(input, pos), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Uint256 getOpReturnPos(DynamicBytes txBytes, Uint256 pos) {
        final Function function = new Function(FUNC_GETOPRETURNPOS, 
                Arrays.<Type>asList(txBytes, pos), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Tuple2<Uint256, Uint32> parseMintTx(DynamicBytes txBytes) {
        final Function function = new Function(FUNC_PARSEMINTTX, 
                Arrays.<Type>asList(txBytes), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint32>() {}));
        List<Type> results = this.trxCntr.executeCallMultipleValueReturn(function);
        return new Tuple2<Uint256, Uint32>(
                        (Uint256) results.get(0),
                        (Uint32) results.get(1));
    }

    public Tuple3<Uint256, Uint32, Address> parseAssetTx(DynamicBytes txBytes) {
        final Function function = new Function(FUNC_PARSEASSETTX, 
                Arrays.<Type>asList(txBytes), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint32>() {}, new TypeReference<Address>() {}));

        List<Type> results = this.trxCntr.executeCallMultipleValueReturn(function);
        return new Tuple3<Uint256, Uint32, Address>(
                (Uint256) results.get(0),
                (Uint32) results.get(1),
                (Address) results.get(2));
    }

    public Uint16 bytesToUint16(DynamicBytes input, Uint256 pos) {
        final Function function = new Function(FUNC_BYTESTOUINT16, 
                Arrays.<Type>asList(input, pos), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public DynamicBytes getEthReceipt(DynamicBytes txBytes, Uint256 pos) {
        final Function function = new Function(FUNC_GETETHRECEIPT, 
                Arrays.<Type>asList(txBytes, pos), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Tuple2<Uint32, Address> scanAssetTx(DynamicBytes txBytes, Uint256 pos) {
        final Function function = new Function(FUNC_SCANASSETTX, 
                Arrays.<Type>asList(txBytes, pos), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Address>() {}));
        List<Type> results = this.trxCntr.executeCallMultipleValueReturn(function);
        return new Tuple2<Uint32, Address>(
                (Uint32) results.get(0),
                (Address) results.get(1));
    }

    public Bytes32 bytesToBytes32(DynamicBytes _rawBytes, Uint256 pos) {
        final Function function = new Function(FUNC_BYTESTOBYTES32, 
                Arrays.<Type>asList(_rawBytes, pos), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public DynamicBytes getLogValuesForTopic(DynamicBytes ethTxReceipt, Bytes32 expectedTopic) {
        final Function function = new Function(FUNC_GETLOGVALUESFORTOPIC, 
                Arrays.<Type>asList(ethTxReceipt, expectedTopic), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Uint256 getBridgeTransactionId(DynamicBytes logValues) {
        final Function function = new Function(FUNC_GETBRIDGETRANSACTIONID, 
                Arrays.<Type>asList(logValues), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public TransactionReturn initialize(Bytes32 _blocksMerkleRoot, Uint256 _timestamp, Uint256 _mtpTimestamp, Bytes32 _lastHash, Uint32 _lastBits, Bytes32 _parentId) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(_blocksMerkleRoot, _timestamp, _mtpTimestamp, _lastHash, _lastBits, _parentId), 
                Collections.<TypeReference<?>>emptyList());
        return this.trxCntr.executeRemoteCallTransaction(function);
    }

    public TransactionReturn propose(Bytes32 _blocksMerkleRoot, Uint256 _timestamp, Uint256 _mtpTimestamp, Bytes32 _lastHash, Uint32 _lastBits, Bytes32 _parentId, Address submitter) {
        final Function function = new Function(
                FUNC_PROPOSE, 
                Arrays.<Type>asList(_blocksMerkleRoot, _timestamp, _mtpTimestamp, _lastHash, _lastBits, _parentId, submitter), 
                Collections.<TypeReference<?>>emptyList());
        return this.trxCntr.executeRemoteCallTransaction(function);
    }

    public TransactionReturn confirm(Bytes32 _superblockHash, Address _validator) {
        final Function function = new Function(
                FUNC_CONFIRM, 
                Arrays.<Type>asList(_superblockHash, _validator), 
                Collections.<TypeReference<?>>emptyList());
        return this.trxCntr.executeRemoteCallTransaction(function);
    }

    public TransactionReturn challenge(Bytes32 _superblockHash, Address _challenger) {
        final Function function = new Function(
                FUNC_CHALLENGE, 
                Arrays.<Type>asList(_superblockHash, _challenger), 
                Collections.<TypeReference<?>>emptyList());
        return this.trxCntr.executeRemoteCallTransaction(function);
    }

    public TransactionReturn semiApprove(Bytes32 _superblockHash, Address _validator) {
        final Function function = new Function(
                FUNC_SEMIAPPROVE, 
                Arrays.<Type>asList(_superblockHash, _validator), 
                Collections.<TypeReference<?>>emptyList());
        return this.trxCntr.executeRemoteCallTransaction(function);
    }

    public TransactionReturn invalidate(Bytes32 _superblockHash, Address _validator) {
        final Function function = new Function(
                FUNC_INVALIDATE, 
                Arrays.<Type>asList(_superblockHash, _validator), 
                Collections.<TypeReference<?>>emptyList());
        return this.trxCntr.executeRemoteCallTransaction(function);
    }

    public TransactionReturn relayTx(DynamicBytes _txBytes, Uint256 _txIndex, DynamicArray<Uint256> _txSiblings, DynamicBytes _vircleBlockHeader, Uint256 _vircleBlockIndex, DynamicArray<Uint256> _vircleBlockSiblings, Bytes32 _superblockHash) {
        final Function function = new Function(
                FUNC_RELAYTX, 
                Arrays.<Type>asList(_txBytes, _txIndex, _txSiblings, _vircleBlockHeader, _vircleBlockIndex, _vircleBlockSiblings, _superblockHash), 
                Collections.<TypeReference<?>>emptyList());
        return this.trxCntr.executeRemoteCallTransaction(function);
    }

    public TransactionReturn relayAssetTx(DynamicBytes _txBytes, Uint256 _txIndex, DynamicArray<Uint256> _txSiblings, DynamicBytes _vircleBlockHeader, Uint256 _vircleBlockIndex, DynamicArray<Uint256> _vircleBlockSiblings, Bytes32 _superblockHash) {
        final Function function = new Function(
                FUNC_RELAYASSETTX, 
                Arrays.<Type>asList(_txBytes, _txIndex, _txSiblings, _vircleBlockHeader, _vircleBlockIndex, _vircleBlockSiblings, _superblockHash), 
                Collections.<TypeReference<?>>emptyList());
        return this.trxCntr.executeRemoteCallTransaction(function);
    }

    public TransactionReturn challengeCancelTransfer(DynamicBytes _txBytes, Uint256 _txIndex, DynamicArray<Uint256> _txSiblings, DynamicBytes _vircleBlockHeader, Uint256 _vircleBlockIndex, DynamicArray<Uint256> _vircleBlockSiblings, Bytes32 _superblockHash) {
        final Function function = new Function(
                FUNC_CHALLENGECANCELTRANSFER, 
                Arrays.<Type>asList(_txBytes, _txIndex, _txSiblings, _vircleBlockHeader, _vircleBlockIndex, _vircleBlockSiblings, _superblockHash), 
                Collections.<TypeReference<?>>emptyList());
        return this.trxCntr.executeRemoteCallTransaction(function);
    }

    public Tuple6<Uint256, Uint256, Address, Uint32, Uint8, Address> parseBurnTx(DynamicBytes txBytes) {
        final Function function = new Function(FUNC_PARSEBURNTX, 
                Arrays.<Type>asList(txBytes), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}));
        List<Type> results = this.trxCntr.executeCallMultipleValueReturn(function);
        return new Tuple6<Uint256, Uint256, Address, Uint32, Uint8, Address>(
                (Uint256) results.get(0),
                (Uint256) results.get(1),
                (Address) results.get(2),
                (Uint32) results.get(3),
                (Uint8) results.get(4),
                (Address) results.get(5));
    }

    public Uint256 dblShaFlip(DynamicBytes _dataBytes) {
        final Function function = new Function(FUNC_DBLSHAFLIP, 
                Arrays.<Type>asList(_dataBytes), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Uint256 getHeaderMerkleRoot(DynamicBytes _blockHeader) {
        final Function function = new Function(FUNC_GETHEADERMERKLEROOT, 
                Arrays.<Type>asList(_blockHeader), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Bytes32 calcSuperblockHash(Bytes32 _blocksMerkleRoot, Uint256 _timestamp, Uint256 _mtpTimestamp, Bytes32 _lastHash, Uint32 _lastBits, Bytes32 _parentId) {
        final Function function = new Function(FUNC_CALCSUPERBLOCKHASH, 
                Arrays.<Type>asList(_blocksMerkleRoot, _timestamp, _mtpTimestamp, _lastHash, _lastBits, _parentId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Bytes32 getBestSuperblock() {
        final Function function = new Function(FUNC_GETBESTSUPERBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Tuple9<Bytes32, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32> getSuperblock(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCK, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint32>() {}));
        List<Type> results = this.trxCntr.executeCallMultipleValueReturn(function);
        return new Tuple9<Bytes32, Uint256, Uint256, Bytes32, Uint32, Bytes32, Address, Uint8, Uint32>(
                (Bytes32) results.get(0),
                (Uint256) results.get(1),
                (Uint256) results.get(2),
                (Bytes32) results.get(3),
                (Uint32) results.get(4),
                (Bytes32) results.get(5),
                (Address) results.get(6),
                (Uint8) results.get(7),
                (Uint32) results.get(8));
    }

    public Uint32 getSuperblockHeight(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKHEIGHT, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Uint256 getSuperblockTimestamp(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKTIMESTAMP, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Uint256 getSuperblockMedianTimestamp(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKMEDIANTIMESTAMP, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Bytes32 getSuperblockParentId(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKPARENTID, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Uint8 getSuperblockStatus(Bytes32 _superblockHash) {
        final Function function = new Function(FUNC_GETSUPERBLOCKSTATUS, 
                Arrays.<Type>asList(_superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Uint256 getChainHeight() {
        final Function function = new Function(FUNC_GETCHAINHEIGHT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Bytes32 getSuperblockAt(Uint256 _height) {
        final Function function = new Function(FUNC_GETSUPERBLOCKAT, 
                Arrays.<Type>asList(_height), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class NewSuperblockEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Address who;
    }

    public static class ApprovedSuperblockEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Address who;
    }

    public static class ChallengeSuperblockEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Address who;
    }

    public static class SemiApprovedSuperblockEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Address who;
    }

    public static class InvalidSuperblockEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Address who;
    }

    public static class ErrorSuperblockEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Uint256 err;
    }

    public static class VerifyTransactionEventResponse extends BaseEventResponse {
        public Bytes32 txHash;

        public Uint256 returnCode;
    }

    public static class RelayTransactionEventResponse extends BaseEventResponse {
        public Bytes32 txHash;

        public Uint256 returnCode;
    }

    public static class ChallengeCancelTransferRequestEventResponse extends BaseEventResponse {
        public Uint256 returnCode;
    }
}
