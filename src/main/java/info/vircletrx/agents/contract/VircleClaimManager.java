package info.vircletrx.agents.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.tron.tronj.abi.TypeReference;
import org.tron.tronj.abi.datatypes.*;
import org.tron.tronj.abi.datatypes.generated.Bytes32;
import org.tron.tronj.abi.datatypes.generated.Uint256;
import org.tron.tronj.abi.datatypes.generated.Uint32;
import org.tron.tronj.client.TronClient;
import org.tron.tronj.client.contract.Contract;
import org.tron.tronj.proto.Response.TransactionReturn;

import info.vircletrx.agents.addition.TrxContract;
import info.vircletrx.agents.addition.RemoteFunctionCall;
import info.vircletrx.agents.addition.BaseEventResponse;
import info.vircletrx.agents.addition.Tuple9;


/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.5.
 */
@SuppressWarnings("rawtypes")
public class VircleClaimManager extends Contract {
    private static final String BINARY = "0x60806040523480156200001157600080fd5b50d380156200001f57600080fd5b50d280156200002d57600080fd5b506150de806200003e6000396000f3fe6080604052600436106101df576000357c0100000000000000000000000000000000000000000000000000000000900480635787248811610114578063c2569e5a116100b2578063e1254fba11610081578063e1254fba14610c9d578063eff0f59214610d1c578063f934436e14610e25578063fc7e286d14610ece576101df565b8063c2569e5a14610ac7578063c3d3290f14610b5a578063c44205e314610bc3578063dac1d76414610c30576101df565b806390a14aea116100ee57806390a14aea146108e357806391ecadf514610954578063a4cbce7b146109c5578063a8b4633f14610a5a576101df565b806357872488146107c45780635ac4e02c146108095780635bf7d5db1461084e576101df565b806329118a9b116101815780633352f1a41161015b5780633352f1a41461068457806340732c89146106f1578063455e61661461070f57806355e4286b14610754576101df565b806329118a9b146104ea5780632bcf947e1461057357806333289a461461061b576101df565b806318a10ca6116101bd57806318a10ca61461033b57806318b011de146103cb5780631fed7b851461041057806327b425a6146104a5576101df565b8063040aa57a146101ea5780630ac0d9c91461026157806313be4f9e146102ce575b6101e7610f4d565b50005b3480156101f657600080fd5b50d3801561020357600080fd5b50d2801561021057600080fd5b506102476004803603604081101561022757600080fd5b810190808035906020019092919080359060200190929190505050610f9e565b604051808215151515815260200191505060405180910390f35b34801561026d57600080fd5b50d3801561027a57600080fd5b50d2801561028757600080fd5b506102b46004803603602081101561029e57600080fd5b81019080803590602001909291905050506119d0565b604051808215151515815260200191505060405180910390f35b3480156102da57600080fd5b50d380156102e757600080fd5b50d280156102f457600080fd5b506103216004803603602081101561030b57600080fd5b81019080803590602001909291905050506119f4565b604051808215151515815260200191505060405180910390f35b34801561034757600080fd5b50d3801561035457600080fd5b50d2801561036157600080fd5b506103ae6004803603604081101561037857600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612004565b604051808381526020018281526020019250505060405180910390f35b3480156103d757600080fd5b50d380156103e457600080fd5b50d280156103f157600080fd5b506103fa61220d565b6040518082815260200191505060405180910390f35b34801561041c57600080fd5b50d3801561042957600080fd5b50d2801561043657600080fd5b506104636004803603602081101561044d57600080fd5b8101908080359060200190929190505050612213565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104b157600080fd5b50d380156104be57600080fd5b50d280156104cb57600080fd5b506104d4612258565b6040518082815260200191505060405180910390f35b3480156104f657600080fd5b50d3801561050357600080fd5b50d2801561051057600080fd5b5061055d6004803603604081101561052757600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061225e565b6040518082815260200191505060405180910390f35b34801561057f57600080fd5b50d3801561058c57600080fd5b50d2801561059957600080fd5b506105fe600480360360c08110156105b057600080fd5b8101908080359060200190929190803590602001909291908035906020019092919080359060200190929190803563ffffffff169060200190929190803590602001909291905050506122d5565b604051808381526020018281526020019250505060405180910390f35b34801561062757600080fd5b50d3801561063457600080fd5b50d2801561064157600080fd5b5061066e6004803603602081101561065857600080fd5b8101908080359060200190929190505050612a24565b6040518082815260200191505060405180910390f35b34801561069057600080fd5b50d3801561069d57600080fd5b50d280156106aa57600080fd5b506106d7600480360360208110156106c157600080fd5b8101908080359060200190929190505050612bc7565b604051808215151515815260200191505060405180910390f35b6106f9610f4d565b6040518082815260200191505060405180910390f35b34801561071b57600080fd5b50d3801561072857600080fd5b50d2801561073557600080fd5b5061073e613503565b6040518082815260200191505060405180910390f35b34801561076057600080fd5b50d3801561076d57600080fd5b50d2801561077a57600080fd5b506107a76004803603602081101561079157600080fd5b810190808035906020019092919050505061350b565b604051808381526020018281526020019250505060405180910390f35b3480156107d057600080fd5b50d380156107dd57600080fd5b50d280156107ea57600080fd5b506107f3613d50565b6040518082815260200191505060405180910390f35b34801561081557600080fd5b50d3801561082257600080fd5b50d2801561082f57600080fd5b50610838613d56565b6040518082815260200191505060405180910390f35b34801561085a57600080fd5b50d3801561086757600080fd5b50d2801561087457600080fd5b506108a16004803603602081101561088b57600080fd5b8101908080359060200190929190505050613d5c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156108ef57600080fd5b50d380156108fc57600080fd5b50d2801561090957600080fd5b50610912613d9c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561096057600080fd5b50d3801561096d57600080fd5b50d2801561097a57600080fd5b50610983613dc2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156109d157600080fd5b50d380156109de57600080fd5b50d280156109eb57600080fd5b50610a5860048036036060811015610a0257600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613de8565b005b348015610a6657600080fd5b50d38015610a7357600080fd5b50d28015610a8057600080fd5b50610aad60048036036020811015610a9757600080fd5b810190808035906020019092919050505061400d565b604051808215151515815260200191505060405180910390f35b348015610ad357600080fd5b50d38015610ae057600080fd5b50d28015610aed57600080fd5b50610b4460048036036060811015610b0457600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506141b2565b6040518082815260200191505060405180910390f35b348015610b6657600080fd5b50d38015610b7357600080fd5b50d28015610b8057600080fd5b50610bad60048036036020811015610b9757600080fd5b8101908080359060200190929190505050614477565b6040518082815260200191505060405180910390f35b348015610bcf57600080fd5b50d38015610bdc57600080fd5b50d28015610be957600080fd5b50610c1660048036036020811015610c0057600080fd5b8101908080359060200190929190505050614497565b604051808215151515815260200191505060405180910390f35b348015610c3c57600080fd5b50d38015610c4957600080fd5b50d28015610c5657600080fd5b50610c8360048036036020811015610c6d57600080fd5b81019080803590602001909291905050506144c4565b604051808215151515815260200191505060405180910390f35b348015610ca957600080fd5b50d38015610cb657600080fd5b50d28015610cc357600080fd5b50610d0660048036036020811015610cda57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506144f1565b6040518082815260200191505060405180910390f35b348015610d2857600080fd5b50d38015610d3557600080fd5b50d28015610d4257600080fd5b50610d6f60048036036020811015610d5957600080fd5b810190808035906020019092919050505061453a565b604051808a81526020018973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200187815260200186815260200185151515158152602001841515151581526020018315151515815260200182151515158152602001995050505050505050505060405180910390f35b348015610e3157600080fd5b50d38015610e3e57600080fd5b50d28015610e4b57600080fd5b50610ecc600480360360a0811015610e6257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001909291905050506145fc565b005b348015610eda57600080fd5b50d38015610ee757600080fd5b50d28015610ef457600080fd5b50610f3760048036036020811015610f0b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506147a1565b6040518082815260200191505060405180910390f35b6000610f5933346147b9565b603360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b60008060009050600060019050600084905060006034600083815260200190815260200160002090505b86821415156112d257610fda816148bd565b1580610ff457508060060160029054906101000a900460ff165b15611047577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa338761c3a0604051808381526020018281526020019250505060405180910390a160009450505050506119ca565b6003600581111561105457fe5b603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cae0581e846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156110e357600080fd5b505afa1580156110f7573d6000803e3d6000fd5b505050506040513d602081101561110d57600080fd5b8101908080519060200190929190505050600581111561112957fe5b14151561117e577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa338761c364604051808381526020018281526020019250505060405180910390a160009450505050506119ca565b8280156111dc5750600073ffffffffffffffffffffffffffffffffffffffff168160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b156111e657600092505b603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166355e018ce836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561127557600080fd5b505afa158015611289573d6000803e3d6000fd5b505050506040513d602081101561129f57600080fd5b81019080805190602001909291905050509150603460008381526020019081526020016000209050600184019350610fc8565b60375484101561132a577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa338761c3dc604051808381526020018281526020019250505060405180910390a160009450505050506119ca565b6003600581111561133757fe5b603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cae0581e846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156113c657600080fd5b505afa1580156113da573d6000803e3d6000fd5b505050506040513d60208110156113f057600080fd5b8101908080519060200190929190505050600581111561140c57fe5b141515611461577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa338761c364604051808381526020018281526020019250505060405180910390a160009450505050506119ca565b6000603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166395b45ee789336040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15801561152857600080fd5b505af115801561153c573d6000803e3d6000fd5b505050506040513d602081101561155257600080fd5b810190808051906020019092919050505090506000811415156115bc577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa338882604051808381526020018281526020019250505060405180910390a16000955050505050506119ca565b6115c6888361491a565b8315611914576060856040519080825280602002602001820160405280156115fd5781602001602082028038833980820191505090505b50905087935060008090505b89851415156117065784828281518110151561162157fe5b9060200190602002018181525050603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166355e018ce866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156116be57600080fd5b505afa1580156116d2573d6000803e3d6000fd5b505050506040513d60208110156116e857600080fd5b81019080805190602001909291905050509450600181019050611609565b5b600081111561191157600181039050818181518110151561172457fe5b906020019060200201519450603460008681526020019081526020016000209350603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166395b45ee786336040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15801561180a57600080fd5b505af115801561181e573d6000803e3d6000fd5b505050506040513d602081101561183457600080fd5b8101908080519060200190929190505050925060008314151561185657600080fd5b611860858561491a565b603a60008154809291906001900391905055507f761ed2ea8db827133836a35e2fdc1cf23fcfe723b817ceffebb1d571439aad8e858560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16603a54604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1611707565b50505b603a60008154809291906001900391905055507f761ed2ea8db827133836a35e2fdc1cf23fcfe723b817ceffebb1d571439aad8e888360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16603a54604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a16001955050505050505b92915050565b60006119ed603460008481526020019081526020016000206148bd565b9050919050565b600080603460008481526020019081526020016000209050611a15816148bd565b1515611a66577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa338361c3a0604051808381526020018281526020019250505060405180910390a16000915050611fff565b6000603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e400191856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015611af757600080fd5b505afa158015611b0b573d6000803e3d6000fd5b505050506040513d6020811015611b2157600080fd5b810190808051906020019092919050505063ffffffff169050603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b5728126040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b158015611bbe57600080fd5b505afa158015611bd2573d6000803e3d6000fd5b505050506040513d6020811015611be857600080fd5b8101908080519060200190929190505050811115611c4c577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa338461c3fa604051808381526020018281526020019250505060405180910390a1600092505050611fff565b6000603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cae0581e866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b158015611cdd57600080fd5b505afa158015611cf1573d6000803e3d6000fd5b505050506040513d6020811015611d0757600080fd5b8101908080519060200190929190505050905060036005811115611d2757fe5b816005811115611d3357fe5b141515611d87577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa338561c364604051808381526020018281526020019250505060405180910390a160009350505050611fff565b8260060160019054906101000a900460ff161515611dec577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa338561c3b4604051808381526020018281526020019250505060405180910390a160009350505050611fff565b6000603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166374205786878660010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b158015611ed757600080fd5b505af1158015611eeb573d6000803e3d6000fd5b505050506040513d6020811015611f0157600080fd5b81019080805190602001909291905050509050600081141515611f2357600080fd5b611f2d8685614b11565b60018460060160026101000a81548160ff021916908315150217905550603a60008154809291906001900391905055507f6ebb2f466d4c07e002cf7da3bf393c34f5c693c635dfd53295a724e2c03ad7e9868560020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16603a54604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a160019450505050505b919050565b6000806000603460008681526020019081526020016000209050612027816148bd565b151561203f5761c3a060008090509250925050612206565b8060060160019054906101000a900460ff1615156120695761c36460008090509250925050612206565b60008160040160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508160040160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000905561214681603360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614f5890919063ffffffff16565b603360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507faafcd902e5217659ba924addbacae78ebf6a7c77409df0d0065b9ebca0129873868683604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a16000819350935050505b9250929050565b60395481565b6000806034600084815260200190815260200160002090508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b60375481565b60008060346000858152602001908152602001600020905061227f816148bd565b151561228a57600080fd5b8060040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505092915050565b600080600073ffffffffffffffffffffffffffffffffffffffff16603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561233657600080fd5b600a603a5410151561239b577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa33600061c38e604051808360010281526020018281526020019250505060405180910390a161c38e600080600102905091509150612a19565b63b2d05e00603360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561243f577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa33600061c391604051808360010281526020018281526020019250505060405180910390a161c391600080600102905091509150612a19565b42603854870111156124a4577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa33600061c395604051808360010281526020018281526020019250505060405180910390a161c395600080600102905091509150612a19565b86600f611c2042010111151561250d577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa33600061c373604051808360010281526020018281526020019250505060405180910390a161c373600080600102905091509150612a19565b600080603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639e20c8038b8b8b8b8b8b336040518863ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808881526020018781526020018681526020018581526020018463ffffffff1663ffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019750505050505050506040805180830381600087803b15801561260857600080fd5b505af115801561261c573d6000803e3d6000fd5b505050506040513d604081101561263257600080fd5b81019080805190602001909291908051906020019092919050505080925081935050506000821415156126ab577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa338183604051808381526020018281526020019250505060405180910390a18181935093505050612a19565b60006034600083815260200190815260200160002090506126cb816148bd565b1561277257600115158160060160029054906101000a900460ff16151514801561270a5750600115158160060160019054906101000a900460ff161515145b801561276657503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b151561277157600080fd5b5b818160000181905550338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008160060160016101000a81548160ff02191690831515021790555060008160060160026101000a81548160ff02191690831515021790555060008160060160006101000a81548160ff0219169083151502179055504281600301819055506039544201816005018190555060008160060160036101000a81548160ff0219169083151502179055503073ffffffffffffffffffffffffffffffffffffffff1663c2569e5a833363b2d05e006040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561293b57600080fd5b505af115801561294f573d6000803e3d6000fd5b505050506040513d602081101561296557600080fd5b8101908080519060200190929190505050925060008314151561298757600080fd5b603a600081548092919060010191905055507f5f53357548142db44904e21464dc5ffa3e092fb7b155299341125bd259906e308233603a54604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1600082945094505050505b965096945050505050565b600081603360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015612a755750600082115b1515612a8057600080fd5b612ad282603360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614fe290919063ffffffff16565b603360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f4482101800a5c2e900f4156e57e05e19ffd7b366cde579553d723fd3abb2180e3383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1603360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080603460008481526020019081526020016000209050612be8816148bd565b1580612c0257508060060160019054906101000a900460ff165b15612c52577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa338361c3a0604051808381526020018281526020019250505060405180910390a160009150506134fe565b8060060160009054906101000a900460ff1615612cb4577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa338361c3aa604051808381526020018281526020019250505060405180910390a160009150506134fe565b8060060160029054906101000a900460ff1615612ee05760018160060160016101000a81548160ff0219169083151502179055506000603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166374205786858460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b158015612dd357600080fd5b505af1158015612de7573d6000803e3d6000fd5b505050506040513d6020811015612dfd57600080fd5b81019080805190602001909291905050509050600081141515612e1f57600080fd5b612e298483614b11565b603a60008154809291906001900391905055507f6ebb2f466d4c07e002cf7da3bf393c34f5c693c635dfd53295a724e2c03ad7e9848360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16603a54604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a16000925050506134fe565b806005015442111515612f38577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa338361c36e604051808381526020018281526020019250505060405180910390a160009150506134fe565b60018160060160016101000a81548160ff0219169083151502179055506000809050600073ffffffffffffffffffffffffffffffffffffffff168260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415613176576000603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166355e018ce866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561304457600080fd5b505afa158015613058573d6000803e3d6000fd5b505050506040513d602081101561306e57600080fd5b810190808051906020019092919050505090506000603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cae0581e836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b15801561311257600080fd5b505afa158015613126573d6000803e3d6000fd5b505050506040513d602081101561313c57600080fd5b810190808051906020019092919050505090506004600581111561315c57fe5b81600581111561316857fe5b141561317357600192505b50505b8015613353576000603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166395b45ee786336040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15801561324357600080fd5b505af1158015613257573d6000803e3d6000fd5b505050506040513d602081101561326d57600080fd5b8101908080519060200190929190505050905060008114151561328f57600080fd5b60008360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506132c28682612004565b5050603a60008154809291906001900391905055507f761ed2ea8db827133836a35e2fdc1cf23fcfe723b817ceffebb1d571439aad8e8682603a54604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a150506134f7565b6000603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166327426f7586336040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15801561341a57600080fd5b505af115801561342e573d6000803e3d6000fd5b505050506040513d602081101561344457600080fd5b8101908080519060200190929190505050905060008114151561346657600080fd5b7f68c34be3e9c7221898bee267017dda5f7344326a8825b2d4427dfeaba0fa1929858460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1505b6001925050505b919050565b63b2d05e0081565b600080600073ffffffffffffffffffffffffffffffffffffffff16603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561356c57600080fd5b600060346000858152602001908152602001600020905061358c816148bd565b15156135e1577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa338461c3a0604051808381526020018281526020019250505060405180910390a161c3a0849250925050613d4b565b600115158160060160039054906101000a900460ff161515141561364e577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa338461c418604051808381526020018281526020019250505060405180910390a161c418849250925050613d4b565b8060060160019054906101000a900460ff168061367957508060060160029054906101000a900460ff165b156136cd577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa338461c3b4604051808381526020018281526020019250505060405180910390a161c3b4849250925050613d4b565b8060060160009054906101000a900460ff1615613733577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa338461c3be604051808381526020018281526020019250505060405180910390a161c3be849250925050613d4b565b63b2d05e00603360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156137cd577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa338461c391604051808381526020018281526020019250505060405180910390a161c391849250925050613d4b565b6000603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c1f67ab386336040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15801561389457600080fd5b505af11580156138a8573d6000803e3d6000fd5b505050506040513d60208110156138be57600080fd5b8101908080519060200190929190505050905060008114151561392e577f94bc311f1c6f4ed382aae7a5df5a4917f0ef0289f84bad39fee69c943e85fa338582604051808381526020018281526020019250505060405180910390a1806000806001029050935093505050613d4b565b3073ffffffffffffffffffffffffffffffffffffffff1663c2569e5a863363b2d05e006040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156139dd57600080fd5b505af11580156139f1573d6000803e3d6000fd5b505050506040513d6020811015613a0757600080fd5b81019080805190602001909291905050509050600081141515613a2957600080fd5b60395442018260050181905550338260020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f4e4ec862758a1fd984d86a07836cbea0bb7aec069cc98cd7a543266b270e42e48533604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d1daeede868460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b158015613c2557600080fd5b505af1158015613c39573d6000803e3d6000fd5b505050507f39232966947bb72bddd01335ecadedd95920ea1e1f044f9913a5f35e34275d9c858360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a160018260060160006101000a81548160ff0219169083151502179055506000859350935050505b915091565b60385481565b603a5481565b60006034600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613e4457600080fd5b6000603460008581526020019081526020016000209050613e64816148bd565b1515613e6f57600080fd5b60008160060160006101000a81548160ff02191690831515021790555060008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613f0b5760018260060160026101000a81548160ff021916908315150217905550613f67565b8373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613f615760018260060160036101000a81548160ff021916908315150217905550613f66565b600080fd5b5b7f1a6e323d263407d13632ff217899ae9353a07223d311df6db8d80cad6a57c2d5858585604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a15050505050565b6000806034600084815260200190815260200160002090506002600581111561403257fe5b603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cae0581e856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505060206040518083038186803b1580156140c157600080fd5b505afa1580156140d5573d6000803e3d6000fd5b505050506040513d60208110156140eb57600080fd5b8101908080519060200190929190505050600581111561410757fe5b14801561412357508060060160029054906101000a900460ff16155b801561413e57508060060160009054906101000a900460ff16155b801561414d5750806005015442115b80156141aa5750600073ffffffffffffffffffffffffffffffffffffffff168160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b915050919050565b6000603660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061423b57503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561424657600080fd5b6000603460008681526020019081526020016000209050614266816148bd565b15156142775761c3a0915050614470565b82603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156142c95761c391915050614470565b61431b83603360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614fe290919063ffffffff16565b603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506143b2838260040160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614f5890919063ffffffff16565b8160040160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507ff49b89a01f8b7e79e855801f268b5df3d7c88c4bc61293934fc1f9c52ddfeb31858585604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a160009150505b9392505050565b600060346000838152602001908152602001600020600301549050919050565b60006034600083815260200190815260200160002060060160019054906101000a900460ff169050919050565b60006034600083815260200190815260200160002060060160029054906101000a900460ff169050919050565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60346020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060050154908060060160009054906101000a900460ff16908060060160019054906101000a900460ff16908060060160029054906101000a900460ff16908060060160039054906101000a900460ff16905089565b600060019054906101000a900460ff168061461b575061461a61506d565b5b8061463257506000809054906101000a900460ff16155b1515614689576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180615085602e913960400191505060405180910390fd5b60008060019054906101000a900460ff1615905080156146d9576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b85603560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084603660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360388190555082603981905550816037819055506000603a8190555080156147995760008060016101000a81548160ff0219169083151502179055505b505050505050565b60336020528060005260406000206000915090505481565b61480b81603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614f5890919063ffffffff16565b603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fd15c9547ea5c06670c0010ce19bc32d54682a4b3801ece7f3ab0c3f17106b4bb8282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b60008073ffffffffffffffffffffffffffffffffffffffff168260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60008160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515614ac85760008360040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050614a3c818560040160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614f5890919063ffffffff16565b8460040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508360040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055505b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515614b0b57614b088482612004565b50505b50505050565b60008160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015614bcd5750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b15614f525760008360040160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050670de0b6b3a764000081039050614c79818560040160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614f5890919063ffffffff16565b8460040160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550614cc88584612004565b50508360040160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000905560008090506000805b6007831015614f4d57603560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e5b7071896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808281526020019150506101206040518083038186803b158015614db157600080fd5b505afa158015614dc5573d6000803e3d6000fd5b505050506040513d610120811015614ddc57600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190505050909192939495969750909192939495965090919293949550909192939450909192935050809350819450829a505050506000600102881415614e7e57614f4d565b60046005811115614e8b57fe5b816005811115614e9757fe5b141515614ea357614d18565b614efd67016345785d8a0000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054614f5890919063ffffffff16565b603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508280600101935050614d18565b505050505b50505050565b6000808284019050838110151515614fd8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600082821115151561505c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b600082840390508091505092915050565b6000803090506000813b905060008114925050509056fe436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564a165627a7a72305820e4e93dd87a9a5d51fe916ac3b6938eca87ed3508005c70599ae36ac1045ead440029";

    public static final String FUNC_SUPERBLOCKTIMEOUT = "superblockTimeout";

    public static final String FUNC_SUPERBLOCKCONFIRMATIONS = "superblockConfirmations";

    public static final String FUNC_WITHDRAWDEPOSIT = "withdrawDeposit";

    public static final String FUNC_MAKEDEPOSIT = "makeDeposit";

    public static final String FUNC_MINPROPOSALDEPOSIT = "minProposalDeposit";

    public static final String FUNC_SUPERBLOCKDELAY = "superblockDelay";

    public static final String FUNC_INPROCESSCOUNTER = "inProcessCounter";

    public static final String FUNC_TRUSTEDSUPERBLOCKS = "trustedSuperblocks";

    public static final String FUNC_TRUSTEDVIRCLEBATTLEMANAGER = "trustedVircleBattleManager";

    public static final String FUNC_GETDEPOSIT = "getDeposit";

    public static final String FUNC_CLAIMS = "claims";

    public static final String FUNC_DEPOSITS = "deposits";

    public static final String FUNC_INIT = "init";

    public static final String FUNC_BONDDEPOSIT = "bondDeposit";

    public static final String FUNC_GETBONDEDDEPOSIT = "getBondedDeposit";

    public static final String FUNC_UNBONDDEPOSIT = "unbondDeposit";

    public static final String FUNC_PROPOSESUPERBLOCK = "proposeSuperblock";

    public static final String FUNC_CHALLENGESUPERBLOCK = "challengeSuperblock";

    public static final String FUNC_CONFIRMCLAIM = "confirmClaim";

    public static final String FUNC_REJECTCLAIM = "rejectClaim";

    public static final String FUNC_CHECKCLAIMFINISHED = "checkClaimFinished";

    public static final String FUNC_SESSIONDECIDED = "sessionDecided";

    public static final String FUNC_GETINBATTLEANDSEMIAPPROVABLE = "getInBattleAndSemiApprovable";

    public static final String FUNC_GETCLAIMSUBMITTER = "getClaimSubmitter";

    public static final String FUNC_GETNEWSUPERBLOCKEVENTTIMESTAMP = "getNewSuperblockEventTimestamp";

    public static final String FUNC_GETCLAIMEXISTS = "getClaimExists";

    public static final String FUNC_GETCLAIMDECIDED = "getClaimDecided";

    public static final String FUNC_GETCLAIMINVALID = "getClaimInvalid";

    public static final String FUNC_GETCLAIMCHALLENGER = "getClaimChallenger";

    public static final Event DEPOSITBONDED_EVENT = new Event("DepositBonded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DEPOSITUNBONDED_EVENT = new Event("DepositUnbonded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SUPERBLOCKCLAIMCREATED_EVENT = new Event("SuperblockClaimCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SUPERBLOCKCLAIMCHALLENGED_EVENT = new Event("SuperblockClaimChallenged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUPERBLOCKBATTLEDECIDED_EVENT = new Event("SuperblockBattleDecided", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUPERBLOCKCLAIMSUCCESSFUL_EVENT = new Event("SuperblockClaimSuccessful", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SUPERBLOCKCLAIMPENDING_EVENT = new Event("SuperblockClaimPending", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SUPERBLOCKCLAIMFAILED_EVENT = new Event("SuperblockClaimFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event VERIFICATIONGAMESTARTED_EVENT = new Event("VerificationGameStarted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event ERRORCLAIM_EVENT = new Event("ErrorClaim", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DEPOSITMADE_EVENT = new Event("DepositMade", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DEPOSITWITHDRAWN_EVENT = new Event("DepositWithdrawn", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("1", "THq61zyPRDKHXqXne7upsHC6Uk6cTFbNZQ");
    }

    private TrxContract trxCntr;
    public VircleClaimManager(TrxContract trxCntr) {
        super(trxCntr.getContract(), trxCntr.getOwnerAddress(), trxCntr.getClient());
        this.trxCntr = trxCntr;
    }

    public Uint256 superblockTimeout() {
        final Function function = new Function(FUNC_SUPERBLOCKTIMEOUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Uint256 superblockConfirmations() {
        final Function function = new Function(FUNC_SUPERBLOCKCONFIRMATIONS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public TransactionReturn withdrawDeposit(Uint256 amount) {
        final Function function = new Function(
                FUNC_WITHDRAWDEPOSIT, 
                Arrays.<Type>asList(amount), 
                Collections.<TypeReference<?>>emptyList());
        return this.trxCntr.executeRemoteCallTransaction(function);
    }

    public TransactionReturn makeDeposit(BigInteger weiValue) {
        final Function function = new Function(
                FUNC_MAKEDEPOSIT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return this.trxCntr.executeRemoteCallTransaction(function, weiValue);
    }

    public Uint256 minProposalDeposit() {
        final Function function = new Function(FUNC_MINPROPOSALDEPOSIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Uint256 superblockDelay() {
        final Function function = new Function(FUNC_SUPERBLOCKDELAY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Uint256 inProcessCounter() {
        final Function function = new Function(FUNC_INPROCESSCOUNTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Address trustedSuperblocks() {
        final Function function = new Function(FUNC_TRUSTEDSUPERBLOCKS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Address trustedVircleBattleManager() {
        final Function function = new Function(FUNC_TRUSTEDVIRCLEBATTLEMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Uint256 getDeposit(Address who) {
        final Function function = new Function(FUNC_GETDEPOSIT, 
                Arrays.<Type>asList(who), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Tuple9<Bytes32, Address, Address, Uint256, Uint256, Bool, Bool, Bool, Bool> claims(Bytes32 param0) {
        final Function function = new Function(FUNC_CLAIMS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}));
        List<Type> results = this.trxCntr.executeCallMultipleValueReturn(function);
        return new Tuple9<Bytes32, Address, Address, Uint256, Uint256, Bool, Bool, Bool, Bool>(
                (Bytes32) results.get(0),
                (Address) results.get(1),
                (Address) results.get(2),
                (Uint256) results.get(3),
                (Uint256) results.get(4),
                (Bool) results.get(5),
                (Bool) results.get(6),
                (Bool) results.get(7),
                (Bool) results.get(8));
    }

    public RemoteFunctionCall<Uint256> deposits(Address param0) {
        final Function function = new Function(FUNC_DEPOSITS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }
    /*
    public List<DepositBondedEventResponse> getDepositBondedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSITBONDED_EVENT, transactionReceipt);
        ArrayList<DepositBondedEventResponse> responses = new ArrayList<DepositBondedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositBondedEventResponse typedResponse = new DepositBondedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.account = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositBondedEventResponse> depositBondedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DepositBondedEventResponse>() {
            @Override
            public DepositBondedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSITBONDED_EVENT, log);
                DepositBondedEventResponse typedResponse = new DepositBondedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.account = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<DepositBondedEventResponse> depositBondedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITBONDED_EVENT));
        return depositBondedEventFlowable(filter);
    }

    public List<DepositUnbondedEventResponse> getDepositUnbondedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSITUNBONDED_EVENT, transactionReceipt);
        ArrayList<DepositUnbondedEventResponse> responses = new ArrayList<DepositUnbondedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositUnbondedEventResponse typedResponse = new DepositUnbondedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.account = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositUnbondedEventResponse> depositUnbondedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DepositUnbondedEventResponse>() {
            @Override
            public DepositUnbondedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSITUNBONDED_EVENT, log);
                DepositUnbondedEventResponse typedResponse = new DepositUnbondedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.account = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<DepositUnbondedEventResponse> depositUnbondedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITUNBONDED_EVENT));
        return depositUnbondedEventFlowable(filter);
    }

    public List<SuperblockClaimCreatedEventResponse> getSuperblockClaimCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKCLAIMCREATED_EVENT, transactionReceipt);
        ArrayList<SuperblockClaimCreatedEventResponse> responses = new ArrayList<SuperblockClaimCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimCreatedEventResponse typedResponse = new SuperblockClaimCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse.processCounter = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockClaimCreatedEventResponse> superblockClaimCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SuperblockClaimCreatedEventResponse>() {
            @Override
            public SuperblockClaimCreatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKCLAIMCREATED_EVENT, log);
                SuperblockClaimCreatedEventResponse typedResponse = new SuperblockClaimCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse.processCounter = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockClaimCreatedEventResponse> superblockClaimCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKCLAIMCREATED_EVENT));
        return superblockClaimCreatedEventFlowable(filter);
    }

    public List<SuperblockClaimChallengedEventResponse> getSuperblockClaimChallengedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKCLAIMCHALLENGED_EVENT, transactionReceipt);
        ArrayList<SuperblockClaimChallengedEventResponse> responses = new ArrayList<SuperblockClaimChallengedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimChallengedEventResponse typedResponse = new SuperblockClaimChallengedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockClaimChallengedEventResponse> superblockClaimChallengedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SuperblockClaimChallengedEventResponse>() {
            @Override
            public SuperblockClaimChallengedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKCLAIMCHALLENGED_EVENT, log);
                SuperblockClaimChallengedEventResponse typedResponse = new SuperblockClaimChallengedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockClaimChallengedEventResponse> superblockClaimChallengedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKCLAIMCHALLENGED_EVENT));
        return superblockClaimChallengedEventFlowable(filter);
    }

    public List<SuperblockBattleDecidedEventResponse> getSuperblockBattleDecidedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKBATTLEDECIDED_EVENT, transactionReceipt);
        ArrayList<SuperblockBattleDecidedEventResponse> responses = new ArrayList<SuperblockBattleDecidedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockBattleDecidedEventResponse typedResponse = new SuperblockBattleDecidedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.winner = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse.loser = (Address) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockBattleDecidedEventResponse> superblockBattleDecidedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SuperblockBattleDecidedEventResponse>() {
            @Override
            public SuperblockBattleDecidedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKBATTLEDECIDED_EVENT, log);
                SuperblockBattleDecidedEventResponse typedResponse = new SuperblockBattleDecidedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.winner = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse.loser = (Address) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockBattleDecidedEventResponse> superblockBattleDecidedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKBATTLEDECIDED_EVENT));
        return superblockBattleDecidedEventFlowable(filter);
    }

    public List<SuperblockClaimSuccessfulEventResponse> getSuperblockClaimSuccessfulEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKCLAIMSUCCESSFUL_EVENT, transactionReceipt);
        ArrayList<SuperblockClaimSuccessfulEventResponse> responses = new ArrayList<SuperblockClaimSuccessfulEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimSuccessfulEventResponse typedResponse = new SuperblockClaimSuccessfulEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse.processCounter = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockClaimSuccessfulEventResponse> superblockClaimSuccessfulEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SuperblockClaimSuccessfulEventResponse>() {
            @Override
            public SuperblockClaimSuccessfulEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKCLAIMSUCCESSFUL_EVENT, log);
                SuperblockClaimSuccessfulEventResponse typedResponse = new SuperblockClaimSuccessfulEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse.processCounter = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockClaimSuccessfulEventResponse> superblockClaimSuccessfulEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKCLAIMSUCCESSFUL_EVENT));
        return superblockClaimSuccessfulEventFlowable(filter);
    }

    public List<SuperblockClaimPendingEventResponse> getSuperblockClaimPendingEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKCLAIMPENDING_EVENT, transactionReceipt);
        ArrayList<SuperblockClaimPendingEventResponse> responses = new ArrayList<SuperblockClaimPendingEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimPendingEventResponse typedResponse = new SuperblockClaimPendingEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockClaimPendingEventResponse> superblockClaimPendingEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SuperblockClaimPendingEventResponse>() {
            @Override
            public SuperblockClaimPendingEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKCLAIMPENDING_EVENT, log);
                SuperblockClaimPendingEventResponse typedResponse = new SuperblockClaimPendingEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockClaimPendingEventResponse> superblockClaimPendingEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKCLAIMPENDING_EVENT));
        return superblockClaimPendingEventFlowable(filter);
    }

    public List<SuperblockClaimFailedEventResponse> getSuperblockClaimFailedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SUPERBLOCKCLAIMFAILED_EVENT, transactionReceipt);
        ArrayList<SuperblockClaimFailedEventResponse> responses = new ArrayList<SuperblockClaimFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SuperblockClaimFailedEventResponse typedResponse = new SuperblockClaimFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse.processCounter = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SuperblockClaimFailedEventResponse> superblockClaimFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SuperblockClaimFailedEventResponse>() {
            @Override
            public SuperblockClaimFailedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SUPERBLOCKCLAIMFAILED_EVENT, log);
                SuperblockClaimFailedEventResponse typedResponse = new SuperblockClaimFailedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse.processCounter = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<SuperblockClaimFailedEventResponse> superblockClaimFailedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPERBLOCKCLAIMFAILED_EVENT));
        return superblockClaimFailedEventFlowable(filter);
    }

    public List<VerificationGameStartedEventResponse> getVerificationGameStartedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VERIFICATIONGAMESTARTED_EVENT, transactionReceipt);
        ArrayList<VerificationGameStartedEventResponse> responses = new ArrayList<VerificationGameStartedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VerificationGameStartedEventResponse typedResponse = new VerificationGameStartedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VerificationGameStartedEventResponse> verificationGameStartedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, VerificationGameStartedEventResponse>() {
            @Override
            public VerificationGameStartedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VERIFICATIONGAMESTARTED_EVENT, log);
                VerificationGameStartedEventResponse typedResponse = new VerificationGameStartedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.submitter = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse.challenger = (Address) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<VerificationGameStartedEventResponse> verificationGameStartedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VERIFICATIONGAMESTARTED_EVENT));
        return verificationGameStartedEventFlowable(filter);
    }

    public List<ErrorClaimEventResponse> getErrorClaimEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ERRORCLAIM_EVENT, transactionReceipt);
        ArrayList<ErrorClaimEventResponse> responses = new ArrayList<ErrorClaimEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorClaimEventResponse typedResponse = new ErrorClaimEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ErrorClaimEventResponse> errorClaimEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ErrorClaimEventResponse>() {
            @Override
            public ErrorClaimEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ERRORCLAIM_EVENT, log);
                ErrorClaimEventResponse typedResponse = new ErrorClaimEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.err = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<ErrorClaimEventResponse> errorClaimEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ERRORCLAIM_EVENT));
        return errorClaimEventFlowable(filter);
    }

    public List<DepositMadeEventResponse> getDepositMadeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSITMADE_EVENT, transactionReceipt);
        ArrayList<DepositMadeEventResponse> responses = new ArrayList<DepositMadeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositMadeEventResponse typedResponse = new DepositMadeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositMadeEventResponse> depositMadeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DepositMadeEventResponse>() {
            @Override
            public DepositMadeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSITMADE_EVENT, log);
                DepositMadeEventResponse typedResponse = new DepositMadeEventResponse();
                typedResponse.log = log;
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<DepositMadeEventResponse> depositMadeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITMADE_EVENT));
        return depositMadeEventFlowable(filter);
    }

    public List<DepositWithdrawnEventResponse> getDepositWithdrawnEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSITWITHDRAWN_EVENT, transactionReceipt);
        ArrayList<DepositWithdrawnEventResponse> responses = new ArrayList<DepositWithdrawnEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositWithdrawnEventResponse typedResponse = new DepositWithdrawnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.who = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositWithdrawnEventResponse> depositWithdrawnEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DepositWithdrawnEventResponse>() {
            @Override
            public DepositWithdrawnEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSITWITHDRAWN_EVENT, log);
                DepositWithdrawnEventResponse typedResponse = new DepositWithdrawnEventResponse();
                typedResponse.log = log;
                typedResponse.who = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<DepositWithdrawnEventResponse> depositWithdrawnEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITWITHDRAWN_EVENT));
        return depositWithdrawnEventFlowable(filter);
    }
    */
    public TransactionReturn init(Address _superblocks, Address _vircleBattleManager, Uint256 _superblockDelay, Uint256 _superblockTimeout, Uint256 _superblockConfirmations) {
        final Function function = new Function(
                FUNC_INIT, 
                Arrays.<Type>asList(_superblocks, _vircleBattleManager, _superblockDelay, _superblockTimeout, _superblockConfirmations), 
                Collections.<TypeReference<?>>emptyList());
        return this.trxCntr.executeRemoteCallTransaction(function);
    }

    public TransactionReturn bondDeposit(Bytes32 superblockHash, Address account, Uint256 amount) {
        final Function function = new Function(
                FUNC_BONDDEPOSIT, 
                Arrays.<Type>asList(superblockHash, account, amount), 
                Collections.<TypeReference<?>>emptyList());
        return this.trxCntr.executeRemoteCallTransaction(function);
    }

    public Uint256 getBondedDeposit(Bytes32 superblockHash, Address account) {
        final Function function = new Function(FUNC_GETBONDEDDEPOSIT, 
                Arrays.<Type>asList(superblockHash, account), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public TransactionReturn unbondDeposit(Bytes32 superblockHash, Address account) {
        final Function function = new Function(
                FUNC_UNBONDDEPOSIT, 
                Arrays.<Type>asList(superblockHash, account), 
                Collections.<TypeReference<?>>emptyList());
        return this.trxCntr.executeRemoteCallTransaction(function);
    }

    public TransactionReturn proposeSuperblock(Bytes32 _blocksMerkleRoot, Uint256 _timestamp, Uint256 _mtpTimestamp, Bytes32 _lastHash, Uint32 _lastBits, Bytes32 _parentHash) {
        final Function function = new Function(
                FUNC_PROPOSESUPERBLOCK, 
                Arrays.<Type>asList(_blocksMerkleRoot, _timestamp, _mtpTimestamp, _lastHash, _lastBits, _parentHash), 
                Collections.<TypeReference<?>>emptyList());
        return this.trxCntr.executeRemoteCallTransaction(function);
    }

    public TransactionReturn challengeSuperblock(Bytes32 superblockHash) {
        final Function function = new Function(
                FUNC_CHALLENGESUPERBLOCK, 
                Arrays.<Type>asList(superblockHash), 
                Collections.<TypeReference<?>>emptyList());
        return this.trxCntr.executeRemoteCallTransaction(function);
    }

    public TransactionReturn confirmClaim(Bytes32 superblockHash, Bytes32 descendantId) {
        final Function function = new Function(
                FUNC_CONFIRMCLAIM, 
                Arrays.<Type>asList(superblockHash, descendantId), 
                Collections.<TypeReference<?>>emptyList());
        return this.trxCntr.executeRemoteCallTransaction(function);
    }

    public TransactionReturn rejectClaim(Bytes32 superblockHash) {
        final Function function = new Function(
                FUNC_REJECTCLAIM, 
                Arrays.<Type>asList(superblockHash), 
                Collections.<TypeReference<?>>emptyList());
        return this.trxCntr.executeRemoteCallTransaction(function);
    }

    public TransactionReturn checkClaimFinished(Bytes32 superblockHash) {
        final Function function = new Function(
                FUNC_CHECKCLAIMFINISHED, 
                Arrays.<Type>asList(superblockHash), 
                Collections.<TypeReference<?>>emptyList());
        return this.trxCntr.executeRemoteCallTransaction(function);
    }

    public TransactionReturn sessionDecided(Bytes32 superblockHash, Address winner, Address loser) {
        final Function function = new Function(
                FUNC_SESSIONDECIDED, 
                Arrays.<Type>asList(superblockHash, winner, loser), 
                Collections.<TypeReference<?>>emptyList());
        return this.trxCntr.executeRemoteCallTransaction(function);
    }

    public Bool getInBattleAndSemiApprovable(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETINBATTLEANDSEMIAPPROVABLE, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Address getClaimSubmitter(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMSUBMITTER, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Uint256 getNewSuperblockEventTimestamp(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETNEWSUPERBLOCKEVENTTIMESTAMP, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Bool getClaimExists(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMEXISTS, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Bool getClaimDecided(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMDECIDED, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Bool getClaimInvalid(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMINVALID, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    public Address getClaimChallenger(Bytes32 superblockHash) {
        final Function function = new Function(FUNC_GETCLAIMCHALLENGER, 
                Arrays.<Type>asList(superblockHash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return this.trxCntr.executeRemoteCallSingleValueReturn(function);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class DepositBondedEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Address account;

        public Uint256 amount;
    }

    public static class DepositUnbondedEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Address account;

        public Uint256 amount;
    }

    public static class SuperblockClaimCreatedEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Address submitter;

        public Uint256 processCounter;
    }

    public static class SuperblockClaimChallengedEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Address challenger;
    }

    public static class SuperblockBattleDecidedEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Address winner;

        public Address loser;
    }

    public static class SuperblockClaimSuccessfulEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Address submitter;

        public Uint256 processCounter;
    }

    public static class SuperblockClaimPendingEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Address submitter;
    }

    public static class SuperblockClaimFailedEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Address challenger;

        public Uint256 processCounter;
    }

    public static class VerificationGameStartedEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Address submitter;

        public Address challenger;
    }

    public static class ErrorClaimEventResponse extends BaseEventResponse {
        public Bytes32 superblockHash;

        public Uint256 err;
    }

    public static class DepositMadeEventResponse extends BaseEventResponse {
        public Address who;

        public Uint256 amount;
    }

    public static class DepositWithdrawnEventResponse extends BaseEventResponse {
        public Address who;

        public Uint256 amount;
    }
}
